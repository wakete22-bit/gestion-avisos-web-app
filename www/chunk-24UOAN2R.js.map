{
  "version": 3,
  "sources": ["src/app/modules/facturas/services/facturas.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { Observable, BehaviorSubject, from } from 'rxjs';\nimport { map, tap, catchError, switchMap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport {\n  Factura,\n  LineaFactura,\n  FacturaCompleta,\n  FacturaResponse,\n  CrearFacturaRequest,\n  ActualizarFacturaRequest,\n  FacturaLista\n} from '../models/factura.model';\nimport { SupabaseClientService } from '../../../core/services/supabase-client.service';\nimport { DataUpdateService } from '../../../core/services/data-update.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FacturasService {\n  private supabase: SupabaseClient;\n  private facturasSubject = new BehaviorSubject<Factura[]>([]);\n  public facturas$ = this.facturasSubject.asObservable();\n\n  constructor(\n    private supabaseClientService: SupabaseClientService,\n    private dataUpdateService: DataUpdateService\n  ) {\n    this.supabase = this.supabaseClientService.getClient();\n  }\n\n  /**\n   * Obtiene la lista de facturas con paginaci√≥n y filtros\n   */\n  getFacturas(\n    pagina: number = 1,\n    porPagina: number = 10,\n    busqueda?: string,\n    ordenarPor?: string,\n    orden?: 'asc' | 'desc',\n    estado?: string\n  ): Observable<FacturaResponse> {\n    let query = this.supabase\n      .from('facturas')\n      .select(`\n        *,\n        cliente:clientes(*),\n        aviso:avisos(*)\n      `, { count: 'exact' });\n\n    // Aplicar filtros\n    if (busqueda) {\n      query = query.or(`numero_factura.ilike.%${busqueda}%,nombre_cliente.ilike.%${busqueda}%`);\n    }\n\n    if (estado) {\n      query = query.eq('estado', estado);\n    }\n\n    // Aplicar paginaci√≥n y ordenamiento\n    const desde = (pagina - 1) * porPagina;\n    query = query\n      .range(desde, desde + porPagina - 1)\n      .order(ordenarPor || 'fecha_creacion', { ascending: orden === 'asc' });\n\n    return from(query).pipe(\n      map(({ data, error, count }) => {\n        if (error) throw error;\n\n        const facturas = data as Factura[];\n        this.facturasSubject.next(facturas);\n\n        return {\n          facturas,\n          total: count || 0,\n          pagina,\n          por_pagina: porPagina\n        };\n      }),\n      catchError(error => {\n        console.error('Error al obtener facturas:', error);\n        throw error;\n      })\n    );\n  }\n\n  /**\n   * Obtiene una factura por su ID con todas sus l√≠neas\n   */\n  getFactura(id: string): Observable<FacturaCompleta> {\n    return from(\n      this.supabase\n        .from('facturas')\n        .select(`\n          *,\n          cliente:clientes(*),\n          aviso:avisos(*)\n        `)\n        .eq('id', id)\n        .single()\n    ).pipe(\n      switchMap(({ data: factura, error: facturaError }) => {\n        if (facturaError) throw facturaError;\n\n        // Obtener las l√≠neas de la factura\n        return from(\n          this.supabase\n            .from('lineas_factura')\n            .select('*')\n            .eq('factura_id', id)\n            .order('fecha_creacion', { ascending: true })\n        ).pipe(\n          map(({ data: lineas, error: lineasError }) => {\n            if (lineasError) throw lineasError;\n\n            return {\n              factura: factura as Factura,\n              lineas: lineas as LineaFactura[]\n            };\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * Crea una nueva factura con sus l√≠neas\n   */\n  crearFactura(facturaCompleta: CrearFacturaRequest): Observable<FacturaCompleta> {\n    const { lineas, ...facturaData } = facturaCompleta;\n    \n    // Validar y asegurar que los campos num√©ricos tengan valores v√°lidos\n    const facturaInsert = {\n      ...facturaData,\n      subtotal: facturaData.subtotal || 0,\n      iva: facturaData.iva || 0,\n      total: facturaData.total || 0,\n      fecha_creacion: new Date().toISOString(),\n      fecha_actualizacion: new Date().toISOString()\n    };\n\n    // Validar que los valores num√©ricos sean v√°lidos\n    if (isNaN(facturaInsert.subtotal) || !isFinite(facturaInsert.subtotal)) {\n      console.error('‚ùå Subtotal inv√°lido:', facturaInsert.subtotal);\n      facturaInsert.subtotal = 0;\n    }\n    if (isNaN(facturaInsert.iva) || !isFinite(facturaInsert.iva)) {\n      console.error('‚ùå IVA inv√°lido:', facturaInsert.iva);\n      facturaInsert.iva = 0;\n    }\n    if (isNaN(facturaInsert.total) || !isFinite(facturaInsert.total)) {\n      console.error('‚ùå Total inv√°lido:', facturaInsert.total);\n      facturaInsert.total = 0;\n    }\n\n    console.log('üìã Insertando factura con datos:', facturaInsert);\n\n    return from(\n      this.supabase\n        .from('facturas')\n        .insert([facturaInsert])\n        .select(`\n          *,\n          cliente:clientes(*),\n          aviso:avisos(*)\n        `)\n        .single()\n    ).pipe(\n      switchMap(({ data: factura, error: facturaError }) => {\n        if (facturaError) {\n          // Si es un error de duplicaci√≥n, intentar con un nuevo n√∫mero\n          if (facturaError.code === '23505' && facturaError.message.includes('numero_factura')) {\n            console.warn('N√∫mero de factura duplicado, generando nuevo n√∫mero...');\n            return this.getSiguienteNumero().pipe(\n              switchMap(nuevoNumero => {\n                const facturaRetry = {\n                  ...facturaInsert,\n                  numero_factura: nuevoNumero\n                };\n                \n                return from(\n                  this.supabase\n                    .from('facturas')\n                    .insert([facturaRetry])\n                    .select(`\n                      *,\n                      cliente:clientes(*),\n                      aviso:avisos(*)\n                    `)\n                    .single()\n                ).pipe(\n                  switchMap(({ data: facturaRetryData, error: retryError }) => {\n                    if (retryError) throw retryError;\n                    return this.procesarLineasFactura(facturaRetryData as Factura, lineas);\n                  })\n                );\n              })\n            );\n          }\n          throw facturaError;\n        }\n\n        return this.procesarLineasFactura(factura as Factura, lineas);\n      })\n    );\n  }\n\n  /**\n   * Procesa las l√≠neas de factura despu√©s de crear la factura\n   */\n  private procesarLineasFactura(factura: Factura, lineas: LineaFactura[]): Observable<FacturaCompleta> {\n    // Si no hay l√≠neas, devolver solo la factura\n    if (!lineas || lineas.length === 0) {\n      const facturasActuales = this.facturasSubject.value;\n      this.facturasSubject.next([factura, ...facturasActuales]);\n      \n      // Notificar creaci√≥n y limpiar cache\n      this.dataUpdateService.notifyCreated('facturas');\n      \n      return from([{\n        factura,\n        lineas: []\n      }]);\n    }\n\n    // Insertar las l√≠neas de la factura\n    const lineasInsert = lineas.map(linea => ({\n      ...linea,\n      factura_id: factura.id,\n      fecha_creacion: new Date().toISOString()\n    }));\n\n    return from(\n      this.supabase\n        .from('lineas_factura')\n        .insert(lineasInsert)\n        .select()\n    ).pipe(\n      map(({ data: lineasCreadas, error: lineasError }) => {\n        if (lineasError) throw lineasError;\n\n        const facturasActuales = this.facturasSubject.value;\n        this.facturasSubject.next([factura, ...facturasActuales]);\n\n        // Notificar creaci√≥n y limpiar cache\n        this.dataUpdateService.notifyCreated('facturas');\n\n        return {\n          factura,\n          lineas: lineasCreadas as LineaFactura[]\n        };\n      })\n    );\n  }\n\n  /**\n   * Actualiza una factura existente\n   */\n  actualizarFactura(id: string, facturaCompleta: ActualizarFacturaRequest): Observable<FacturaCompleta> {\n    const { lineas, ...facturaData } = facturaCompleta;\n    \n    const facturaUpdate = {\n      ...facturaData,\n      fecha_actualizacion: new Date().toISOString()\n    };\n\n    return from(\n      this.supabase\n        .from('facturas')\n        .update(facturaUpdate)\n        .eq('id', id)\n        .select(`\n          *,\n          cliente:clientes(*),\n          aviso:avisos(*)\n        `)\n        .single()\n    ).pipe(\n      switchMap(({ data: factura, error: facturaError }) => {\n        if (facturaError) throw facturaError;\n\n        const facturaActualizada = factura as Factura;\n\n        // Si no hay l√≠neas para actualizar, devolver solo la factura\n        if (!lineas) {\n          return this.getFactura(id);\n        }\n\n        // Eliminar l√≠neas existentes y crear nuevas\n        return from(\n          this.supabase\n            .from('lineas_factura')\n            .delete()\n            .eq('factura_id', id)\n        ).pipe(\n          switchMap(({ error: deleteError }) => {\n            if (deleteError) throw deleteError;\n\n            if (lineas.length === 0) {\n              return from([{\n                factura: facturaActualizada,\n                lineas: []\n              }]);\n            }\n\n            // Insertar las nuevas l√≠neas\n            const lineasInsert = lineas.map(linea => ({\n              ...linea,\n              factura_id: id,\n              fecha_creacion: new Date().toISOString()\n            }));\n\n            return from(\n              this.supabase\n                .from('lineas_factura')\n                .insert(lineasInsert)\n                .select()\n            ).pipe(\n              map(({ data: lineasCreadas, error: lineasError }) => {\n                if (lineasError) throw lineasError;\n\n                const facturasActuales = this.facturasSubject.value;\n                const index = facturasActuales.findIndex(f => f.id === id);\n                if (index !== -1) {\n                  facturasActuales[index] = facturaActualizada;\n                  this.facturasSubject.next([...facturasActuales]);\n                }\n\n                // Notificar actualizaci√≥n y limpiar cache\n                this.dataUpdateService.notifyUpdated('facturas');\n\n                return {\n                  factura: facturaActualizada,\n                  lineas: lineasCreadas as LineaFactura[]\n                };\n              })\n            );\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * Elimina una factura y todas sus l√≠neas\n   */\n  eliminarFactura(id: string): Observable<void> {\n    return from(\n      this.supabase\n        .from('lineas_factura')\n        .delete()\n        .eq('factura_id', id)\n    ).pipe(\n      switchMap(({ error: lineasError }) => {\n        if (lineasError) throw lineasError;\n\n        return from(\n          this.supabase\n            .from('facturas')\n            .delete()\n            .eq('id', id)\n        );\n      }),\n      map(({ error }) => {\n        if (error) throw error;\n\n        const facturasActuales = this.facturasSubject.value;\n        const facturasFiltradas = facturasActuales.filter(f => f.id !== id);\n        this.facturasSubject.next(facturasFiltradas);\n\n        // Notificar eliminaci√≥n y limpiar cache\n        this.dataUpdateService.notifyDeleted('facturas');\n      })\n    );\n  }\n\n  /**\n   * Busca facturas por t√©rmino de b√∫squeda\n   */\n  buscarFacturas(termino: string): Observable<Factura[]> {\n    return from(\n      this.supabase\n        .from('facturas')\n        .select(`\n          *,\n          cliente:clientes(*),\n          aviso:avisos(*)\n        `)\n        .or(`numero_factura.ilike.%${termino}%,nombre_cliente.ilike.%${termino}%`)\n        .limit(10)\n    ).pipe(\n      map(({ data, error }) => {\n        if (error) throw error;\n        return data as Factura[];\n      })\n    );\n  }\n\n  /**\n   * Obtiene facturas por estado\n   */\n  getFacturasPorEstado(estado: string): Observable<Factura[]> {\n    return from(\n      this.supabase\n        .from('facturas')\n        .select(`\n          *,\n          cliente:clientes(*),\n          aviso:avisos(*)\n        `)\n        .eq('estado', estado)\n        .order('fecha_creacion', { ascending: false })\n    ).pipe(\n      map(({ data, error }) => {\n        if (error) throw error;\n        return data as Factura[];\n      })\n    );\n  }\n\n  /**\n   * Obtiene facturas por cliente\n   */\n  getFacturasPorCliente(clienteId: string): Observable<Factura[]> {\n    return from(\n      this.supabase\n        .from('facturas')\n        .select(`\n          *,\n          cliente:clientes(*),\n          aviso:avisos(*)\n        `)\n        .eq('cliente_id', clienteId)\n        .order('fecha_creacion', { ascending: false })\n    ).pipe(\n      map(({ data, error }) => {\n        if (error) throw error;\n        return data as Factura[];\n      })\n    );\n  }\n\n  /**\n   * Obtiene facturas por aviso\n   */\n  getFacturasPorAviso(avisoId: string): Observable<Factura[]> {\n    return from(\n      this.supabase\n        .from('facturas')\n        .select(`\n          *,\n          cliente:clientes(*),\n          aviso:avisos(*)\n        `)\n        .eq('aviso_id', avisoId)\n        .order('fecha_creacion', { ascending: false })\n    ).pipe(\n      map(({ data, error }) => {\n        if (error) throw error;\n        return data as Factura[];\n      })\n    );\n  }\n\n  /**\n   * Cambia el estado de una factura\n   */\n  cambiarEstado(id: string, estado: 'Pendiente' | 'En curso' | 'Completado'): Observable<Factura> {\n    return from(\n      this.supabase\n        .from('facturas')\n        .update({ \n          estado,\n          fecha_actualizacion: new Date().toISOString()\n        })\n        .eq('id', id)\n        .select(`\n          *,\n          cliente:clientes(*),\n          aviso:avisos(*)\n        `)\n        .single()\n    ).pipe(\n      map(({ data, error }) => {\n        if (error) throw error;\n\n        const facturaActualizada = data as Factura;\n        const facturasActuales = this.facturasSubject.value;\n        const index = facturasActuales.findIndex(f => f.id === id);\n        if (index !== -1) {\n          facturasActuales[index] = facturaActualizada;\n          this.facturasSubject.next([...facturasActuales]);\n        }\n\n        // Notificar actualizaci√≥n y limpiar cache\n        this.dataUpdateService.notifyUpdated('facturas');\n\n        return facturaActualizada;\n      })\n    );\n  }\n\n  /**\n   * Obtiene el siguiente n√∫mero de factura de forma at√≥mica\n   */\n  getSiguienteNumero(): Observable<string> {\n    return from(\n      this.supabase\n        .rpc('obtener_siguiente_numero_factura')\n    ).pipe(\n      map(({ data, error }) => {\n        if (error) {\n          console.error('Error al obtener n√∫mero de factura:', error);\n          // Fallback al m√©todo anterior si la funci√≥n no existe\n          return this.getSiguienteNumeroFallback();\n        }\n        return data;\n      }),\n      catchError(error => {\n        console.error('Error en RPC, usando fallback:', error);\n        return this.getSiguienteNumeroFallback();\n      })\n    );\n  }\n\n  /**\n   * M√©todo fallback para obtener el siguiente n√∫mero de factura con retry\n   */\n  private getSiguienteNumeroFallback(): Observable<string> {\n    const a√±o = new Date().getFullYear();\n    \n    return from(\n      this.supabase\n        .from('facturas')\n        .select('numero_factura')\n        .like('numero_factura', `FAC-${a√±o}-%`)\n        .order('numero_factura', { ascending: false })\n        .limit(1)\n    ).pipe(\n      map(({ data, error }) => {\n        if (error) throw error;\n\n        if (!data || data.length === 0) {\n          return `FAC-${a√±o}-001`;\n        }\n\n        const ultimoNumero = data[0].numero_factura;\n        const match = ultimoNumero.match(/FAC-\\d{4}-(\\d{3})/);\n        \n        if (match) {\n          const siguiente = parseInt(match[1]) + 1;\n          return `FAC-${a√±o}-${siguiente.toString().padStart(3, '0')}`;\n        }\n\n        return `FAC-${a√±o}-001`;\n      }),\n      // Agregar un peque√±o delay para evitar conflictos de concurrencia\n      tap(() => new Promise(resolve => setTimeout(resolve, 100)))\n    );\n  }\n\n  /**\n   * Calcula los totales de las l√≠neas de factura\n   */\n  calcularTotales(lineas: LineaFactura[]): { subtotal: number; iva: number; total: number } {\n    // Validar que lineas sea un array v√°lido\n    if (!lineas || !Array.isArray(lineas) || lineas.length === 0) {\n      console.warn('‚ö†Ô∏è No hay l√≠neas de factura para calcular totales');\n      return { subtotal: 0, iva: 0, total: 0 };\n    }\n\n    // Calcular subtotal con validaci√≥n de valores\n    const subtotal = lineas.reduce((acc, linea) => {\n      const cantidad = linea.cantidad || 0;\n      const precio = linea.precio_pvp || 0;\n      const subtotalLinea = cantidad * precio;\n      \n      // Validar que el resultado sea un n√∫mero v√°lido\n      if (isNaN(subtotalLinea) || !isFinite(subtotalLinea)) {\n        console.warn(`‚ö†Ô∏è L√≠nea con valores inv√°lidos:`, linea);\n        return acc;\n      }\n      \n      return acc + subtotalLinea;\n    }, 0);\n\n    // Validar subtotal\n    if (isNaN(subtotal) || !isFinite(subtotal)) {\n      console.warn('‚ö†Ô∏è Subtotal calculado es inv√°lido, usando 0');\n      return { subtotal: 0, iva: 0, total: 0 };\n    }\n\n    // Calcular IVA (21%)\n    const iva = +(subtotal * 0.21).toFixed(2);\n    \n    // Calcular total\n    const total = +(subtotal + iva).toFixed(2);\n\n    console.log('üßÆ C√°lculo de totales:', {\n      lineas: lineas.length,\n      subtotal,\n      iva,\n      total\n    });\n\n    return { subtotal, iva, total };\n  }\n\n  /**\n   * Obtiene el valor actual de facturas\n   */\n  getFacturasActuales(): Factura[] {\n    return this.facturasSubject.value;\n  }\n\n  /**\n   * Limpia el estado de facturas\n   */\n  limpiarFacturas(): void {\n    this.facturasSubject.next([]);\n  }\n\n  /**\n   * Crea una factura autom√°ticamente desde un presupuesto aprobado\n   */\n  crearFacturaDesdePresupuesto(presupuestoId: string): Observable<FacturaCompleta> {\n    // Primero obtener el presupuesto completo con materiales\n    return from(\n      this.supabase\n        .from('presupuestos')\n        .select(`\n          *,\n          aviso:avisos(\n            *,\n            cliente:clientes(*)\n          ),\n          materiales_estimados\n        `)\n        .eq('id', presupuestoId)\n        .single()\n    ).pipe(\n      switchMap(({ data: presupuesto, error: presupuestoError }) => {\n        if (presupuestoError) throw presupuestoError;\n\n        const presupuestoData = presupuesto as any;\n        \n        // Validar que el presupuesto est√© aprobado\n        if (presupuestoData.estado !== 'Completado') {\n          throw new Error('Solo se pueden facturar presupuestos aprobados');\n        }\n        \n        // Validar que el presupuesto tenga un aviso asociado\n        if (!presupuestoData.aviso) {\n          throw new Error('El presupuesto no tiene un aviso asociado');\n        }\n\n        // Generar n√∫mero de factura\n        return this.getSiguienteNumero().pipe(\n          switchMap(numeroFactura => {\n            // Convertir materiales del presupuesto en l√≠neas de factura\n            const lineasMateriales: LineaFactura[] = [];\n            \n            // Procesar materiales estimados del presupuesto (JSONB)\n            if (presupuestoData.materiales_estimados && Array.isArray(presupuestoData.materiales_estimados)) {\n              presupuestoData.materiales_estimados.forEach((material: any) => {\n                lineasMateriales.push({\n                  tipo: 'repuesto' as const,\n                  nombre: material.nombre || 'Material desconocido',\n                  cantidad: material.cantidad || 0,\n                  precio_neto: material.precio_neto || 0,\n                  precio_pvp: material.precio_pvp || 0,\n                  descripcion: `Material del presupuesto: ${material.descripcion || ''}`\n                });\n              });\n            }\n\n            // Agregar l√≠nea de mano de obra si hay horas estimadas\n            if (presupuestoData.horas_estimadas && presupuestoData.horas_estimadas > 0) {\n              const precioHora = 50; // Esto deber√≠a venir de configuraci√≥n\n              lineasMateriales.push({\n                tipo: 'mano_obra',\n                nombre: 'Mano de obra',\n                cantidad: presupuestoData.horas_estimadas,\n                precio_pvp: precioHora,\n                descripcion: `${presupuestoData.horas_estimadas} horas de trabajo t√©cnico`\n              });\n            }\n\n            // Calcular totales ANTES de crear la factura\n            const totales = this.calcularTotales(lineasMateriales);\n            \n            // Validar que los totales sean n√∫meros v√°lidos\n            const subtotal = totales.subtotal || 0;\n            const iva = totales.iva || 0;\n            const total = totales.total || 0;\n\n            console.log('üìä Totales calculados:', { subtotal, iva, total });\n\n            // Preparar datos de la factura con valores validados\n            const cliente = presupuestoData.aviso.cliente;\n            const facturaData: CrearFacturaRequest = {\n              numero_factura: numeroFactura,\n              fecha_emision: new Date().toISOString().split('T')[0],\n              cliente_id: cliente?.id,\n              nombre_cliente: cliente?.nombre_completo || presupuestoData.aviso.nombre_cliente_aviso || 'Cliente',\n              direccion_cliente: cliente?.direccion || presupuestoData.aviso.direccion_cliente_aviso || 'Sin direcci√≥n',\n              cif_cliente: cliente?.cif || 'Sin CIF',\n              email_cliente: cliente?.email || 'sin-email@ejemplo.com',\n              aviso_id: presupuestoData.aviso_id,\n              subtotal: subtotal, // Valor validado\n              iva: iva, // Valor validado\n              total: total, // Valor validado\n              estado: 'Pendiente',\n              notas: `Factura generada desde presupuesto ${presupuestoId}`,\n              lineas: lineasMateriales\n            };\n\n            console.log('üìã Datos de factura a crear:', facturaData);\n\n            // Crear la factura\n            return this.crearFactura(facturaData).pipe(\n              switchMap(facturaCreada => {\n                // Actualizar el presupuesto para marcar que ya fue facturado\n                return from(\n                  this.supabase\n                    .from('presupuestos')\n                    .update({ \n                      estado: 'Facturado', // Nuevo estado\n                      fecha_actualizacion: new Date().toISOString() \n                    })\n                    .eq('id', presupuestoId)\n                ).pipe(\n                  map(() => facturaCreada)\n                );\n              })\n            );\n          })\n        );\n      }),\n      catchError(error => {\n        console.error('Error al crear factura desde presupuesto:', error);\n        throw error;\n      })\n    );\n  }\n\n  /**\n   * Obtiene presupuestos listos para facturar\n   */\n  getPresupuestosListosParaFacturar(): Observable<any[]> {\n    return from(\n      this.supabase\n        .from('presupuestos')\n        .select(`\n          *,\n          aviso:avisos(\n            *,\n            cliente:clientes(*)\n          )\n        `)\n        .eq('estado', 'Completado')\n        .order('fecha_creacion', { ascending: false })\n    ).pipe(\n      map(({ data, error }) => {\n        if (error) throw error;\n        return data || [];\n      })\n    );\n  }\n} "],
  "mappings": "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",
  "names": []
}
