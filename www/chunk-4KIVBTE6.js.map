{
  "version": 3,
  "sources": ["src/app/core/services/clientes.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { SupabaseClient } from '@supabase/supabase-js';\r\nimport { Observable, BehaviorSubject, from } from 'rxjs';\r\nimport { map, tap, catchError } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { \r\n  Cliente, \r\n  ClienteResponse, \r\n  CrearClienteRequest, \r\n  ActualizarClienteRequest \r\n} from '../../modules/clientes/models/cliente.model';\r\nimport { SupabaseClientService } from './supabase-client.service';\r\nimport { DataUpdateService } from './data-update.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClientesService {\r\n  private supabase: SupabaseClient;\r\n  private clientesSubject = new BehaviorSubject<Cliente[]>([]);\r\n  public clientes$ = this.clientesSubject.asObservable();\r\n\r\n  constructor(\r\n    private supabaseClientService: SupabaseClientService,\r\n    private dataUpdateService: DataUpdateService\r\n  ) {\r\n    this.supabase = this.supabaseClientService.getClient();\r\n  }\r\n\r\n  /**\r\n   * Obtiene la lista de clientes con paginación y filtros\r\n   */\r\n  getClientes(\r\n    pagina: number = 1, \r\n    porPagina: number = 10, \r\n    busqueda?: string,\r\n    ordenarPor?: string,\r\n    orden?: 'asc' | 'desc',\r\n    soloActivos: boolean = false\r\n  ): Observable<ClienteResponse> {\r\n    let query = this.supabase\r\n      .from('clientes')\r\n      .select('*', { count: 'exact' });\r\n\r\n    // Aplicar filtros\r\n    if (busqueda) {\r\n      query = query.or(`nombre_completo.ilike.%${busqueda}%,email.ilike.%${busqueda}%`);\r\n    }\r\n\r\n    // Filtrar por estado activo solo si se solicita explícitamente\r\n    if (soloActivos) {\r\n      query = query.eq('es_activo', true);\r\n    }\r\n\r\n    // Aplicar paginación y ordenamiento\r\n    const desde = (pagina - 1) * porPagina;\r\n    query = query\r\n      .range(desde, desde + porPagina - 1)\r\n      .order(ordenarPor || 'fecha_creacion', { ascending: orden === 'asc' });\r\n\r\n    return from(query).pipe(\r\n      map(({ data, error, count }) => {\r\n        if (error) throw error;\r\n        \r\n        const clientes = data as Cliente[];\r\n        this.clientesSubject.next(clientes);\r\n        \r\n        return {\r\n          clientes,\r\n          total: count || 0,\r\n          pagina,\r\n          por_pagina: porPagina\r\n        };\r\n      }),\r\n      catchError(error => {\r\n        console.error('Error al obtener clientes:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene un cliente por su ID\r\n   */\r\n  getCliente(id: string): Observable<Cliente> {\r\n    return from(\r\n      this.supabase\r\n        .from('clientes')\r\n        .select('*')\r\n        .eq('id', id)\r\n        .single()\r\n    ).pipe(\r\n      map(({ data, error }) => {\r\n        if (error) throw error;\r\n        return data as Cliente;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Crea un nuevo cliente\r\n   */\r\n  crearCliente(cliente: CrearClienteRequest): Observable<Cliente> {\r\n    const clienteData = {\r\n      ...cliente,\r\n      fecha_creacion: new Date().toISOString(),\r\n      es_activo: cliente.es_activo ?? true\r\n    };\r\n\r\n    return from(\r\n      this.supabase\r\n        .from('clientes')\r\n        .insert([clienteData])\r\n        .select()\r\n        .single()\r\n    ).pipe(\r\n      map(({ data, error }) => {\r\n        if (error) throw error;\r\n        \r\n        const nuevoCliente = data as Cliente;\r\n        const clientesActuales = this.clientesSubject.value;\r\n        this.clientesSubject.next([nuevoCliente, ...clientesActuales]);\r\n        \r\n        // Notificar creación y limpiar cache\r\n        this.dataUpdateService.notifyCreated('clientes');\r\n        \r\n        return nuevoCliente;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Actualiza un cliente existente\r\n   */\r\n  actualizarCliente(id: string, cliente: ActualizarClienteRequest): Observable<Cliente> {\r\n    const datosActualizados = {\r\n      ...cliente,\r\n      fecha_actualizacion: new Date().toISOString()\r\n    };\r\n\r\n    return from(\r\n      this.supabase\r\n        .from('clientes')\r\n        .update(datosActualizados)\r\n        .eq('id', id)\r\n        .select()\r\n        .single()\r\n    ).pipe(\r\n      map(({ data, error }) => {\r\n        if (error) throw error;\r\n        \r\n        const clienteActualizado = data as Cliente;\r\n        const clientesActuales = this.clientesSubject.value;\r\n        const index = clientesActuales.findIndex(c => c.id === id);\r\n        if (index !== -1) {\r\n          clientesActuales[index] = clienteActualizado;\r\n          this.clientesSubject.next([...clientesActuales]);\r\n        }\r\n        \r\n        // Notificar actualización y limpiar cache\r\n        this.dataUpdateService.notifyUpdated('clientes');\r\n        \r\n        return clienteActualizado;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Elimina un cliente (marcar como inactivo)\r\n   */\r\n  eliminarCliente(id: string): Observable<void> {\r\n    return from(\r\n      this.supabase\r\n        .from('clientes')\r\n        .update({ \r\n          es_activo: false,\r\n          fecha_actualizacion: new Date().toISOString()\r\n        })\r\n        .eq('id', id)\r\n    ).pipe(\r\n      map(({ error }) => {\r\n        if (error) throw error;\r\n        \r\n        const clientesActuales = this.clientesSubject.value;\r\n        const index = clientesActuales.findIndex(c => c.id === id);\r\n        if (index !== -1) {\r\n          clientesActuales[index].es_activo = false;\r\n          this.clientesSubject.next([...clientesActuales]);\r\n        }\r\n\r\n        // Notificar eliminación y limpiar cache\r\n        this.dataUpdateService.notifyDeleted('clientes');\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Busca clientes por término de búsqueda\r\n   */\r\n  buscarClientes(termino: string): Observable<Cliente[]> {\r\n    return from(\r\n      this.supabase\r\n        .from('clientes')\r\n        .select('*')\r\n        .or(`nombre_completo.ilike.%${termino}%,email.ilike.%${termino}%`)\r\n        .eq('es_activo', true)\r\n        .limit(10)\r\n    ).pipe(\r\n      map(({ data, error }) => {\r\n        if (error) throw error;\r\n        return data as Cliente[];\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene el valor actual de clientes\r\n   */\r\n  getClientesActuales(): Cliente[] {\r\n    return this.clientesSubject.value;\r\n  }\r\n\r\n  /**\r\n   * Limpia el estado de clientes\r\n   */\r\n  limpiarClientes(): void {\r\n    this.clientesSubject.next([]);\r\n  }\r\n} "],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAiBM,IAAO,mBAAP,MAAO,iBAAe;EAK1B,YACU,uBACA,mBAAoC;AADpC,SAAA,wBAAA;AACA,SAAA,oBAAA;AALF,SAAA,kBAAkB,IAAI,gBAA2B,CAAA,CAAE;AACpD,SAAA,YAAY,KAAK,gBAAgB,aAAY;AAMlD,SAAK,WAAW,KAAK,sBAAsB,UAAS;EACtD;;;;EAKA,YACE,SAAiB,GACjB,YAAoB,IACpB,UACA,YACA,OACA,cAAuB,OAAK;AAE5B,QAAI,QAAQ,KAAK,SACd,KAAK,UAAU,EACf,OAAO,KAAK,EAAE,OAAO,QAAO,CAAE;AAGjC,QAAI,UAAU;AACZ,cAAQ,MAAM,GAAG,0BAA0B,QAAQ,kBAAkB,QAAQ,GAAG;IAClF;AAGA,QAAI,aAAa;AACf,cAAQ,MAAM,GAAG,aAAa,IAAI;IACpC;AAGA,UAAM,SAAS,SAAS,KAAK;AAC7B,YAAQ,MACL,MAAM,OAAO,QAAQ,YAAY,CAAC,EAClC,MAAM,cAAc,kBAAkB,EAAE,WAAW,UAAU,MAAK,CAAE;AAEvE,WAAO,KAAK,KAAK,EAAE,KACjB,IAAI,CAAC,EAAE,MAAM,OAAO,MAAK,MAAM;AAC7B,UAAI;AAAO,cAAM;AAEjB,YAAM,WAAW;AACjB,WAAK,gBAAgB,KAAK,QAAQ;AAElC,aAAO;QACL;QACA,OAAO,SAAS;QAChB;QACA,YAAY;;IAEhB,CAAC,GACD,WAAW,WAAQ;AACjB,cAAQ,MAAM,8BAA8B,KAAK;AACjD,YAAM;IACR,CAAC,CAAC;EAEN;;;;EAKA,WAAW,IAAU;AACnB,WAAO,KACL,KAAK,SACF,KAAK,UAAU,EACf,OAAO,GAAG,EACV,GAAG,MAAM,EAAE,EACX,OAAM,CAAE,EACX,KACA,IAAI,CAAC,EAAE,MAAM,MAAK,MAAM;AACtB,UAAI;AAAO,cAAM;AACjB,aAAO;IACT,CAAC,CAAC;EAEN;;;;EAKA,aAAa,SAA4B;AAtG3C;AAuGI,UAAM,cAAc,iCACf,UADe;MAElB,iBAAgB,oBAAI,KAAI,GAAG,YAAW;MACtC,YAAW,aAAQ,cAAR,YAAqB;;AAGlC,WAAO,KACL,KAAK,SACF,KAAK,UAAU,EACf,OAAO,CAAC,WAAW,CAAC,EACpB,OAAM,EACN,OAAM,CAAE,EACX,KACA,IAAI,CAAC,EAAE,MAAM,MAAK,MAAM;AACtB,UAAI;AAAO,cAAM;AAEjB,YAAM,eAAe;AACrB,YAAM,mBAAmB,KAAK,gBAAgB;AAC9C,WAAK,gBAAgB,KAAK,CAAC,cAAc,GAAG,gBAAgB,CAAC;AAG7D,WAAK,kBAAkB,cAAc,UAAU;AAE/C,aAAO;IACT,CAAC,CAAC;EAEN;;;;EAKA,kBAAkB,IAAY,SAAiC;AAC7D,UAAM,oBAAoB,iCACrB,UADqB;MAExB,sBAAqB,oBAAI,KAAI,GAAG,YAAW;;AAG7C,WAAO,KACL,KAAK,SACF,KAAK,UAAU,EACf,OAAO,iBAAiB,EACxB,GAAG,MAAM,EAAE,EACX,OAAM,EACN,OAAM,CAAE,EACX,KACA,IAAI,CAAC,EAAE,MAAM,MAAK,MAAM;AACtB,UAAI;AAAO,cAAM;AAEjB,YAAM,qBAAqB;AAC3B,YAAM,mBAAmB,KAAK,gBAAgB;AAC9C,YAAM,QAAQ,iBAAiB,UAAU,OAAK,EAAE,OAAO,EAAE;AACzD,UAAI,UAAU,IAAI;AAChB,yBAAiB,KAAK,IAAI;AAC1B,aAAK,gBAAgB,KAAK,CAAC,GAAG,gBAAgB,CAAC;MACjD;AAGA,WAAK,kBAAkB,cAAc,UAAU;AAE/C,aAAO;IACT,CAAC,CAAC;EAEN;;;;EAKA,gBAAgB,IAAU;AACxB,WAAO,KACL,KAAK,SACF,KAAK,UAAU,EACf,OAAO;MACN,WAAW;MACX,sBAAqB,oBAAI,KAAI,GAAG,YAAW;KAC5C,EACA,GAAG,MAAM,EAAE,CAAC,EACf,KACA,IAAI,CAAC,EAAE,MAAK,MAAM;AAChB,UAAI;AAAO,cAAM;AAEjB,YAAM,mBAAmB,KAAK,gBAAgB;AAC9C,YAAM,QAAQ,iBAAiB,UAAU,OAAK,EAAE,OAAO,EAAE;AACzD,UAAI,UAAU,IAAI;AAChB,yBAAiB,KAAK,EAAE,YAAY;AACpC,aAAK,gBAAgB,KAAK,CAAC,GAAG,gBAAgB,CAAC;MACjD;AAGA,WAAK,kBAAkB,cAAc,UAAU;IACjD,CAAC,CAAC;EAEN;;;;EAKA,eAAe,SAAe;AAC5B,WAAO,KACL,KAAK,SACF,KAAK,UAAU,EACf,OAAO,GAAG,EACV,GAAG,0BAA0B,OAAO,kBAAkB,OAAO,GAAG,EAChE,GAAG,aAAa,IAAI,EACpB,MAAM,EAAE,CAAC,EACZ,KACA,IAAI,CAAC,EAAE,MAAM,MAAK,MAAM;AACtB,UAAI;AAAO,cAAM;AACjB,aAAO;IACT,CAAC,CAAC;EAEN;;;;EAKA,sBAAmB;AACjB,WAAO,KAAK,gBAAgB;EAC9B;;;;EAKA,kBAAe;AACb,SAAK,gBAAgB,KAAK,CAAA,CAAE;EAC9B;;;mCAlNW,kBAAe,mBAAA,qBAAA,GAAA,mBAAA,iBAAA,CAAA;AAAA;oFAAf,kBAAe,SAAf,iBAAe,WAAA,YAFd,OAAM,CAAA;AAEd,IAAO,kBAAP;;sEAAO,iBAAe,CAAA;UAH3B;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
