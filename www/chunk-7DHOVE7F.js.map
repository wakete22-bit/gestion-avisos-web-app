{
  "version": 3,
  "sources": ["src/app/core/models/usuario.model.ts", "src/app/core/services/roles.service.ts"],
  "sourcesContent": ["// Enum para los tipos de roles disponibles\nexport enum TipoRol {\n  ADMINISTRADOR = 'Administrador',\n  TECNICO = 'Técnico',\n  USUARIO = 'Usuario'\n}\n\n// Enum para los permisos disponibles\nexport enum Permiso {\n  // Permisos de usuarios\n  VER_PERFIL_PROPIO = 'ver_perfil_propio',\n  EDITAR_PERFIL_PROPIO = 'editar_perfil_propio',\n  \n  // Permisos de avisos\n  VER_AVISOS = 'ver_avisos',\n  CREAR_AVISOS = 'crear_avisos',\n  EDITAR_AVISOS = 'editar_avisos',\n  ELIMINAR_AVISOS = 'eliminar_avisos',\n  ASIGNAR_AVISOS = 'asignar_avisos',\n  \n  // Permisos de clientes\n  VER_CLIENTES = 'ver_clientes',\n  CREAR_CLIENTES = 'crear_clientes',\n  EDITAR_CLIENTES = 'editar_clientes',\n  ELIMINAR_CLIENTES = 'eliminar_clientes',\n  \n  // Permisos de inventario\n  VER_INVENTARIO = 'ver_inventario',\n  GESTIONAR_INVENTARIO = 'gestionar_inventario',\n  \n  // Permisos de facturas\n  VER_FACTURAS = 'ver_facturas',\n  CREAR_FACTURAS = 'crear_facturas',\n  EDITAR_FACTURAS = 'editar_facturas',\n  \n  // Permisos de presupuestos\n  VER_PRESUPUESTOS = 'ver_presupuestos',\n  CREAR_PRESUPUESTOS = 'crear_presupuestos',\n  EDITAR_PRESUPUESTOS = 'editar_presupuestos',\n  \n  // Permisos de reportes\n  VER_REPORTES = 'ver_reportes',\n  GENERAR_REPORTES = 'generar_reportes',\n  \n  // Permisos administrativos\n  GESTIONAR_USUARIOS = 'gestionar_usuarios',\n  GESTIONAR_ROLES = 'gestionar_roles',\n  CONFIGURACION_SISTEMA = 'configuracion_sistema'\n}\n\nexport interface Rol {\n  id: string;\n  nombre_rol: TipoRol;\n  descripcion?: string;\n  permisos: Permiso[];\n  es_activo: boolean;\n  fecha_creacion: Date;\n  fecha_actualizacion?: Date;\n}\n\nexport interface Usuario {\n  id: string;\n  nombre_completo: string;\n  email: string;\n  telefono?: string;\n  avatar?: string;\n  rol_id: string;\n  rol?: Rol;\n  es_activo: boolean;\n  fecha_creacion: Date;\n  fecha_ultimo_acceso?: Date;\n  fecha_actualizacion?: Date;\n}\n\nexport interface LoginRequest {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterRequest {\n  id?: string; // ID del usuario de Supabase Auth\n  nombre_completo: string;\n  email: string;\n  password: string;\n  telefono?: string;\n  rol_id?: string;\n}\n\nexport interface AuthResponse {\n  usuario: Usuario;\n  token: string;\n  refreshToken?: string;\n} ", "import { Injectable } from '@angular/core';\nimport { TipoRol, Permiso, Rol } from '../models/usuario.model';\nimport { AuthService } from './auth.service';\nimport { map, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RolesService {\n\n  // Definición de roles con sus permisos\n  private readonly ROLES_PERMISOS: Record<TipoRol, Permiso[]> = {\n    [TipoRol.ADMINISTRADOR]: [\n      // Todos los permisos\n      ...Object.values(Permiso)\n    ],\n    [TipoRol.TECNICO]: [\n      // Permisos de perfil\n      Permiso.VER_PERFIL_PROPIO,\n      Permiso.EDITAR_PERFIL_PROPIO,\n      \n      // Permisos de avisos\n      Permiso.VER_AVISOS,\n      Permiso.EDITAR_AVISOS,\n      \n      // Permisos de clientes (solo ver)\n      Permiso.VER_CLIENTES,\n      \n      // Permisos de inventario (solo ver)\n      Permiso.VER_INVENTARIO,\n      \n      // Permisos de facturas\n      Permiso.VER_FACTURAS,\n      Permiso.CREAR_FACTURAS,\n      \n      // Permisos de presupuestos\n      Permiso.VER_PRESUPUESTOS,\n      Permiso.CREAR_PRESUPUESTOS,\n      \n      // Permisos de reportes (solo ver)\n      Permiso.VER_REPORTES\n    ],\n    [TipoRol.USUARIO]: [\n      // Permisos básicos\n      Permiso.VER_PERFIL_PROPIO,\n      Permiso.EDITAR_PERFIL_PROPIO,\n      \n      // Solo puede ver avisos relacionados\n      Permiso.VER_AVISOS,\n      \n      // Solo puede ver facturas relacionadas\n      Permiso.VER_FACTURAS,\n      \n      // Solo puede ver presupuestos relacionados\n      Permiso.VER_PRESUPUESTOS\n    ]\n  };\n\n  constructor(private authService: AuthService) {}\n\n  /**\n   * Obtiene los permisos del usuario actual\n   */\n  getPermisosUsuario(): Observable<Permiso[]> {\n    return this.authService.currentUser$.pipe(\n      map(usuario => {\n        if (!usuario || !usuario.rol) {\n          return [];\n        }\n        return this.ROLES_PERMISOS[usuario.rol.nombre_rol] || [];\n      })\n    );\n  }\n\n  /**\n   * Verifica si el usuario actual tiene un permiso específico\n   */\n  tienePermiso(permiso: Permiso): Observable<boolean> {\n    return this.getPermisosUsuario().pipe(\n      map(permisos => permisos.includes(permiso))\n    );\n  }\n\n  /**\n   * Verifica si el usuario actual tiene al menos uno de los permisos especificados\n   */\n  tieneAlgunPermiso(permisos: Permiso[]): Observable<boolean> {\n    return this.getPermisosUsuario().pipe(\n      map(permisosUsuario => \n        permisos.some(permiso => permisosUsuario.includes(permiso))\n      )\n    );\n  }\n\n  /**\n   * Verifica si el usuario actual tiene todos los permisos especificados\n   */\n  tieneTodosPermisos(permisos: Permiso[]): Observable<boolean> {\n    return this.getPermisosUsuario().pipe(\n      map(permisosUsuario => \n        permisos.every(permiso => permisosUsuario.includes(permiso))\n      )\n    );\n  }\n\n  /**\n   * Verifica si el usuario actual es administrador\n   */\n  esAdministrador(): Observable<boolean> {\n    return this.authService.currentUser$.pipe(\n      map(usuario => \n        usuario?.rol?.nombre_rol === TipoRol.ADMINISTRADOR\n      )\n    );\n  }\n\n  /**\n   * Verifica si el usuario actual es técnico\n   */\n  esTecnico(): Observable<boolean> {\n    return this.authService.currentUser$.pipe(\n      map(usuario => \n        usuario?.rol?.nombre_rol === TipoRol.TECNICO\n      )\n    );\n  }\n\n  /**\n   * Verifica si el usuario actual es usuario básico\n   */\n  esUsuario(): Observable<boolean> {\n    return this.authService.currentUser$.pipe(\n      map(usuario => \n        usuario?.rol?.nombre_rol === TipoRol.USUARIO\n      )\n    );\n  }\n\n  /**\n   * Obtiene el rol actual del usuario\n   */\n  getRolActual(): Observable<TipoRol | null> {\n    return this.authService.currentUser$.pipe(\n      map(usuario => usuario?.rol?.nombre_rol || null)\n    );\n  }\n\n  /**\n   * Obtiene todos los roles disponibles\n   */\n  getRolesDisponibles(): TipoRol[] {\n    return Object.values(TipoRol);\n  }\n\n  /**\n   * Obtiene los permisos de un rol específico\n   */\n  getPermisosRol(rol: TipoRol): Permiso[] {\n    return this.ROLES_PERMISOS[rol] || [];\n  }\n\n  /**\n   * Obtiene la descripción de un rol\n   */\n  getDescripcionRol(rol: TipoRol): string {\n    const descripciones: Record<TipoRol, string> = {\n      [TipoRol.ADMINISTRADOR]: 'Acceso completo al sistema. Puede gestionar usuarios, configuraciones y todos los módulos.',\n      [TipoRol.TECNICO]: 'Puede gestionar avisos, crear facturas y presupuestos. Acceso limitado a configuraciones.',\n      [TipoRol.USUARIO]: 'Acceso básico. Solo puede ver información relacionada con sus avisos y perfil.'\n    };\n    return descripciones[rol];\n  }\n\n  /**\n   * Verifica si un rol puede realizar una acción específica\n   */\n  rolPuedeRealizarAccion(rol: TipoRol, accion: string): boolean {\n    const permisos = this.ROLES_PERMISOS[rol] || [];\n    \n    // Mapeo de acciones a permisos\n    const mapeoAcciones: Record<string, Permiso[]> = {\n      'ver_avisos': [Permiso.VER_AVISOS],\n      'crear_avisos': [Permiso.CREAR_AVISOS],\n      'editar_avisos': [Permiso.EDITAR_AVISOS],\n      'eliminar_avisos': [Permiso.ELIMINAR_AVISOS],\n      'asignar_avisos': [Permiso.ASIGNAR_AVISOS],\n      'ver_clientes': [Permiso.VER_CLIENTES],\n      'crear_clientes': [Permiso.CREAR_CLIENTES],\n      'editar_clientes': [Permiso.EDITAR_CLIENTES],\n      'eliminar_clientes': [Permiso.ELIMINAR_CLIENTES],\n      'ver_inventario': [Permiso.VER_INVENTARIO],\n      'gestionar_inventario': [Permiso.GESTIONAR_INVENTARIO],\n      'ver_facturas': [Permiso.VER_FACTURAS],\n      'crear_facturas': [Permiso.CREAR_FACTURAS],\n      'editar_facturas': [Permiso.EDITAR_FACTURAS],\n      'ver_presupuestos': [Permiso.VER_PRESUPUESTOS],\n      'crear_presupuestos': [Permiso.CREAR_PRESUPUESTOS],\n      'editar_presupuestos': [Permiso.EDITAR_PRESUPUESTOS],\n      'ver_reportes': [Permiso.VER_REPORTES],\n      'generar_reportes': [Permiso.GENERAR_REPORTES],\n      'gestionar_usuarios': [Permiso.GESTIONAR_USUARIOS],\n      'gestionar_roles': [Permiso.GESTIONAR_ROLES],\n      'configuracion_sistema': [Permiso.CONFIGURACION_SISTEMA]\n    };\n\n    const permisosRequeridos = mapeoAcciones[accion] || [];\n    return permisosRequeridos.every(permiso => permisos.includes(permiso));\n  }\n} "],
  "mappings": ";;;;;;;;;;;;AACA,IAAY;CAAZ,SAAYA,UAAO;AACjB,EAAAA,SAAA,eAAA,IAAA;AACA,EAAAA,SAAA,SAAA,IAAA;AACA,EAAAA,SAAA,SAAA,IAAA;AACF,GAJY,YAAA,UAAO,CAAA,EAAA;AAOnB,IAAY;CAAZ,SAAYC,UAAO;AAEjB,EAAAA,SAAA,mBAAA,IAAA;AACA,EAAAA,SAAA,sBAAA,IAAA;AAGA,EAAAA,SAAA,YAAA,IAAA;AACA,EAAAA,SAAA,cAAA,IAAA;AACA,EAAAA,SAAA,eAAA,IAAA;AACA,EAAAA,SAAA,iBAAA,IAAA;AACA,EAAAA,SAAA,gBAAA,IAAA;AAGA,EAAAA,SAAA,cAAA,IAAA;AACA,EAAAA,SAAA,gBAAA,IAAA;AACA,EAAAA,SAAA,iBAAA,IAAA;AACA,EAAAA,SAAA,mBAAA,IAAA;AAGA,EAAAA,SAAA,gBAAA,IAAA;AACA,EAAAA,SAAA,sBAAA,IAAA;AAGA,EAAAA,SAAA,cAAA,IAAA;AACA,EAAAA,SAAA,gBAAA,IAAA;AACA,EAAAA,SAAA,iBAAA,IAAA;AAGA,EAAAA,SAAA,kBAAA,IAAA;AACA,EAAAA,SAAA,oBAAA,IAAA;AACA,EAAAA,SAAA,qBAAA,IAAA;AAGA,EAAAA,SAAA,cAAA,IAAA;AACA,EAAAA,SAAA,kBAAA,IAAA;AAGA,EAAAA,SAAA,oBAAA,IAAA;AACA,EAAAA,SAAA,iBAAA,IAAA;AACA,EAAAA,SAAA,uBAAA,IAAA;AACF,GAxCY,YAAA,UAAO,CAAA,EAAA;;;ACAb,IAAO,gBAAP,MAAO,cAAY;EAkDvB,YAAoB,aAAwB;AAAxB,SAAA,cAAA;AA/CH,SAAA,iBAA6C;MAC5D,CAAC,QAAQ,aAAa,GAAG;;QAEvB,GAAG,OAAO,OAAO,OAAO;;MAE1B,CAAC,QAAQ,OAAO,GAAG;;QAEjB,QAAQ;QACR,QAAQ;;QAGR,QAAQ;QACR,QAAQ;;QAGR,QAAQ;;QAGR,QAAQ;;QAGR,QAAQ;QACR,QAAQ;;QAGR,QAAQ;QACR,QAAQ;;QAGR,QAAQ;;MAEV,CAAC,QAAQ,OAAO,GAAG;;QAEjB,QAAQ;QACR,QAAQ;;QAGR,QAAQ;;QAGR,QAAQ;;QAGR,QAAQ;;;EAImC;;;;EAK/C,qBAAkB;AAChB,WAAO,KAAK,YAAY,aAAa,KACnC,IAAI,aAAU;AACZ,UAAI,CAAC,WAAW,CAAC,QAAQ,KAAK;AAC5B,eAAO,CAAA;MACT;AACA,aAAO,KAAK,eAAe,QAAQ,IAAI,UAAU,KAAK,CAAA;IACxD,CAAC,CAAC;EAEN;;;;EAKA,aAAa,SAAgB;AAC3B,WAAO,KAAK,mBAAkB,EAAG,KAC/B,IAAI,cAAY,SAAS,SAAS,OAAO,CAAC,CAAC;EAE/C;;;;EAKA,kBAAkB,UAAmB;AACnC,WAAO,KAAK,mBAAkB,EAAG,KAC/B,IAAI,qBACF,SAAS,KAAK,aAAW,gBAAgB,SAAS,OAAO,CAAC,CAAC,CAC5D;EAEL;;;;EAKA,mBAAmB,UAAmB;AACpC,WAAO,KAAK,mBAAkB,EAAG,KAC/B,IAAI,qBACF,SAAS,MAAM,aAAW,gBAAgB,SAAS,OAAO,CAAC,CAAC,CAC7D;EAEL;;;;EAKA,kBAAe;AACb,WAAO,KAAK,YAAY,aAAa,KACnC,IAAI,aAAQ;AA9GlB;AA+GQ,uDAAS,QAAT,mBAAc,gBAAe,QAAQ;KAAa,CACnD;EAEL;;;;EAKA,YAAS;AACP,WAAO,KAAK,YAAY,aAAa,KACnC,IAAI,aAAQ;AAzHlB;AA0HQ,uDAAS,QAAT,mBAAc,gBAAe,QAAQ;KAAO,CAC7C;EAEL;;;;EAKA,YAAS;AACP,WAAO,KAAK,YAAY,aAAa,KACnC,IAAI,aAAQ;AApIlB;AAqIQ,uDAAS,QAAT,mBAAc,gBAAe,QAAQ;KAAO,CAC7C;EAEL;;;;EAKA,eAAY;AACV,WAAO,KAAK,YAAY,aAAa,KACnC,IAAI,aAAQ;AA/IlB;AA+IqB,uDAAS,QAAT,mBAAc,eAAc;KAAI,CAAC;EAEpD;;;;EAKA,sBAAmB;AACjB,WAAO,OAAO,OAAO,OAAO;EAC9B;;;;EAKA,eAAe,KAAY;AACzB,WAAO,KAAK,eAAe,GAAG,KAAK,CAAA;EACrC;;;;EAKA,kBAAkB,KAAY;AAC5B,UAAM,gBAAyC;MAC7C,CAAC,QAAQ,aAAa,GAAG;MACzB,CAAC,QAAQ,OAAO,GAAG;MACnB,CAAC,QAAQ,OAAO,GAAG;;AAErB,WAAO,cAAc,GAAG;EAC1B;;;;EAKA,uBAAuB,KAAc,QAAc;AACjD,UAAM,WAAW,KAAK,eAAe,GAAG,KAAK,CAAA;AAG7C,UAAM,gBAA2C;MAC/C,cAAc,CAAC,QAAQ,UAAU;MACjC,gBAAgB,CAAC,QAAQ,YAAY;MACrC,iBAAiB,CAAC,QAAQ,aAAa;MACvC,mBAAmB,CAAC,QAAQ,eAAe;MAC3C,kBAAkB,CAAC,QAAQ,cAAc;MACzC,gBAAgB,CAAC,QAAQ,YAAY;MACrC,kBAAkB,CAAC,QAAQ,cAAc;MACzC,mBAAmB,CAAC,QAAQ,eAAe;MAC3C,qBAAqB,CAAC,QAAQ,iBAAiB;MAC/C,kBAAkB,CAAC,QAAQ,cAAc;MACzC,wBAAwB,CAAC,QAAQ,oBAAoB;MACrD,gBAAgB,CAAC,QAAQ,YAAY;MACrC,kBAAkB,CAAC,QAAQ,cAAc;MACzC,mBAAmB,CAAC,QAAQ,eAAe;MAC3C,oBAAoB,CAAC,QAAQ,gBAAgB;MAC7C,sBAAsB,CAAC,QAAQ,kBAAkB;MACjD,uBAAuB,CAAC,QAAQ,mBAAmB;MACnD,gBAAgB,CAAC,QAAQ,YAAY;MACrC,oBAAoB,CAAC,QAAQ,gBAAgB;MAC7C,sBAAsB,CAAC,QAAQ,kBAAkB;MACjD,mBAAmB,CAAC,QAAQ,eAAe;MAC3C,yBAAyB,CAAC,QAAQ,qBAAqB;;AAGzD,UAAM,qBAAqB,cAAc,MAAM,KAAK,CAAA;AACpD,WAAO,mBAAmB,MAAM,aAAW,SAAS,SAAS,OAAO,CAAC;EACvE;;;mCAvMW,eAAY,mBAAA,WAAA,CAAA;AAAA;iFAAZ,eAAY,SAAZ,cAAY,WAAA,YAFX,OAAM,CAAA;AAEd,IAAO,eAAP;;sEAAO,cAAY,CAAA;UAHxB;WAAW;MACV,YAAY;KACb;;;",
  "names": ["TipoRol", "Permiso"]
}
