{
  "version": 3,
  "sources": ["src/app/modules/inventario/services/inventario.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { SupabaseClient } from '@supabase/supabase-js';\r\nimport { Observable, BehaviorSubject, from } from 'rxjs';\r\nimport { map, tap, catchError } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { \r\n  Inventario, \r\n  CrearInventarioRequest, \r\n  ActualizarInventarioRequest, \r\n  InventarioResponse \r\n} from '../models/inventario.model';\r\nimport { SupabaseClientService } from '../../../core/services/supabase-client.service';\r\nimport { DataUpdateService } from '../../../core/services/data-update.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class InventarioService {\r\n  private supabase: SupabaseClient;\r\n  private inventarioSubject = new BehaviorSubject<Inventario[]>([]);\r\n  public inventario$ = this.inventarioSubject.asObservable();\r\n\r\n  constructor(\r\n    private supabaseClientService: SupabaseClientService,\r\n    private dataUpdateService: DataUpdateService\r\n  ) {\r\n    this.supabase = this.supabaseClientService.getClient();\r\n  }\r\n\r\n  /**\r\n   * Obtiene la lista de productos del inventario con paginación y filtros\r\n   */\r\n  getInventario(\r\n    pagina: number = 1,\r\n    porPagina: number = 10,\r\n    busqueda?: string,\r\n    ordenarPor?: string,\r\n    orden?: 'asc' | 'desc',\r\n    soloConStock: boolean = false\r\n  ): Observable<InventarioResponse> {\r\n    let query = this.supabase\r\n      .from('inventario')\r\n      .select('*', { count: 'exact' });\r\n\r\n    // Aplicar filtros\r\n    if (busqueda) {\r\n      query = query.or(`nombre.ilike.%${busqueda}%,descripcion.ilike.%${busqueda}%,codigo.ilike.%${busqueda}%`);\r\n    }\r\n\r\n    // Filtrar por stock si se solicita\r\n    if (soloConStock) {\r\n      query = query.gt('cantidad_disponible', 0);\r\n    }\r\n\r\n    // Aplicar paginación y ordenamiento\r\n    const desde = (pagina - 1) * porPagina;\r\n    query = query\r\n      .range(desde, desde + porPagina - 1)\r\n      .order(ordenarPor || 'fecha_creacion', { ascending: orden === 'asc' });\r\n\r\n    return from(query).pipe(\r\n      map(({ data, error, count }) => {\r\n        if (error) throw error;\r\n        \r\n        const inventario = data as Inventario[];\r\n        this.inventarioSubject.next(inventario);\r\n        \r\n        return {\r\n          inventario,\r\n          total: count || 0,\r\n          pagina,\r\n          por_pagina: porPagina\r\n        };\r\n      }),\r\n      catchError(error => {\r\n        console.error('Error al obtener inventario:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene un producto por su ID\r\n   */\r\n  getProducto(id: string): Observable<Inventario> {\r\n    return from(\r\n      this.supabase\r\n        .from('inventario')\r\n        .select('*')\r\n        .eq('id', id)\r\n        .single()\r\n    ).pipe(\r\n      map(({ data, error }) => {\r\n        if (error) throw error;\r\n        return data as Inventario;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene un producto por código\r\n   */\r\n  getProductoPorCodigo(codigo: string): Observable<Inventario> {\r\n    return from(\r\n      this.supabase\r\n        .from('inventario')\r\n        .select('*')\r\n        .eq('codigo', codigo)\r\n        .single()\r\n    ).pipe(\r\n      map(({ data, error }) => {\r\n        if (error) throw error;\r\n        return data as Inventario;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Crea un nuevo producto\r\n   */\r\n  crearProducto(producto: CrearInventarioRequest): Observable<Inventario> {\r\n    const productoData = {\r\n      ...producto,\r\n      fecha_creacion: new Date().toISOString(),\r\n      fecha_actualizacion: new Date().toISOString()\r\n    };\r\n\r\n    return from(\r\n      this.supabase\r\n        .from('inventario')\r\n        .insert([productoData])\r\n        .select()\r\n        .single()\r\n    ).pipe(\r\n      map(({ data, error }) => {\r\n        if (error) throw error;\r\n        \r\n        const nuevoProducto = data as Inventario;\r\n        const inventarioActual = this.inventarioSubject.value;\r\n        this.inventarioSubject.next([nuevoProducto, ...inventarioActual]);\r\n        \r\n        // Notificar creación y limpiar cache\r\n        this.dataUpdateService.notifyCreated('inventario');\r\n        \r\n        return nuevoProducto;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Actualiza un producto existente\r\n   */\r\n  actualizarProducto(id: string, producto: ActualizarInventarioRequest): Observable<Inventario> {\r\n    const datosActualizados = {\r\n      ...producto,\r\n      fecha_actualizacion: new Date().toISOString()\r\n    };\r\n\r\n    return from(\r\n      this.supabase\r\n        .from('inventario')\r\n        .update(datosActualizados)\r\n        .eq('id', id)\r\n        .select()\r\n        .single()\r\n    ).pipe(\r\n      map(({ data, error }) => {\r\n        if (error) throw error;\r\n        \r\n        const productoActualizado = data as Inventario;\r\n        const inventarioActual = this.inventarioSubject.value;\r\n        const index = inventarioActual.findIndex(p => p.id === id);\r\n        if (index !== -1) {\r\n          inventarioActual[index] = productoActualizado;\r\n          this.inventarioSubject.next([...inventarioActual]);\r\n        }\r\n        \r\n        // Notificar actualización y limpiar cache\r\n        this.dataUpdateService.notifyUpdated('inventario');\r\n        \r\n        return productoActualizado;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Elimina un producto\r\n   */\r\n  eliminarProducto(id: string): Observable<void> {\r\n    return from(\r\n      this.supabase\r\n        .from('inventario')\r\n        .delete()\r\n        .eq('id', id)\r\n    ).pipe(\r\n      map(({ error }) => {\r\n        if (error) throw error;\r\n        \r\n        const inventarioActual = this.inventarioSubject.value;\r\n        const inventarioFiltrado = inventarioActual.filter(p => p.id !== id);\r\n        this.inventarioSubject.next(inventarioFiltrado);\r\n\r\n        // Notificar eliminación y limpiar cache\r\n        this.dataUpdateService.notifyDeleted('inventario');\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Busca productos por término de búsqueda\r\n   */\r\n  buscarProductos(termino: string): Observable<Inventario[]> {\r\n    return from(\r\n      this.supabase\r\n        .from('inventario')\r\n        .select('*')\r\n        .or(`nombre.ilike.%${termino}%,descripcion.ilike.%${termino}%,codigo.ilike.%${termino}%`)\r\n        .order('fecha_creacion', { ascending: false })\r\n        .limit(10)\r\n    ).pipe(\r\n      map(({ data, error }) => {\r\n        if (error) throw error;\r\n        return data as Inventario[];\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene productos con stock bajo (menos de 5 unidades)\r\n   */\r\n  getProductosStockBajo(): Observable<Inventario[]> {\r\n    return from(\r\n      this.supabase\r\n        .from('inventario')\r\n        .select('*')\r\n        .lt('cantidad_disponible', 5)\r\n        .gt('cantidad_disponible', 0)\r\n        .order('cantidad_disponible', { ascending: true })\r\n    ).pipe(\r\n      map(({ data, error }) => {\r\n        if (error) throw error;\r\n        return data as Inventario[];\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene productos sin stock\r\n   */\r\n  getProductosSinStock(): Observable<Inventario[]> {\r\n    return from(\r\n      this.supabase\r\n        .from('inventario')\r\n        .select('*')\r\n        .eq('cantidad_disponible', 0)\r\n        .order('nombre', { ascending: true })\r\n    ).pipe(\r\n      map(({ data, error }) => {\r\n        if (error) throw error;\r\n        return data as Inventario[];\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Actualiza el stock de un producto\r\n   */\r\n  actualizarStock(id: string, nuevaCantidad: number): Observable<Inventario> {\r\n    return this.actualizarProducto(id, { cantidad_disponible: nuevaCantidad });\r\n  }\r\n\r\n  /**\r\n   * Genera un código único para un producto\r\n   */\r\n  generarCodigoProducto(): string {\r\n    const timestamp = Date.now().toString();\r\n    const random = Math.random().toString(36).substring(2, 8).toUpperCase();\r\n    return `P${timestamp.slice(-6)}${random}`;\r\n  }\r\n\r\n  /**\r\n   * Verifica si un código ya existe\r\n   */\r\n  verificarCodigoExistente(codigo: string): Observable<boolean> {\r\n    return from(\r\n      this.supabase\r\n        .from('inventario')\r\n        .select('codigo')\r\n        .eq('codigo', codigo)\r\n        .limit(1)\r\n    ).pipe(\r\n      map(({ data, error }) => {\r\n        if (error) throw error;\r\n        return data && data.length > 0;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene estadísticas del inventario\r\n   */\r\n  getEstadisticas(): Observable<any> {\r\n    return from(\r\n      this.supabase\r\n        .from('inventario')\r\n        .select('cantidad_disponible')\r\n    ).pipe(\r\n      map(({ data, error }) => {\r\n        if (error) throw error;\r\n        \r\n        const productos = data as any[];\r\n        const totalProductos = productos.length;\r\n        const productosConStock = productos.filter(p => p.cantidad_disponible > 0).length;\r\n        const productosSinStock = totalProductos - productosConStock;\r\n        const stockTotal = productos.reduce((sum, p) => sum + p.cantidad_disponible, 0);\r\n        \r\n        return {\r\n          totalProductos,\r\n          productosConStock,\r\n          productosSinStock,\r\n          stockTotal\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene el valor actual del inventario\r\n   */\r\n  getInventarioActual(): Inventario[] {\r\n    return this.inventarioSubject.value;\r\n  }\r\n\r\n  /**\r\n   * Limpia el estado del inventario\r\n   */\r\n  limpiarInventario(): void {\r\n    this.inventarioSubject.next([]);\r\n  }\r\n\r\n  /**\r\n   * Obtiene solo productos con stock\r\n   */\r\n  getProductosConStock(\r\n    pagina: number = 1,\r\n    porPagina: number = 10,\r\n    busqueda?: string,\r\n    ordenarPor?: string,\r\n    orden?: 'asc' | 'desc'\r\n  ): Observable<InventarioResponse> {\r\n    return this.getInventario(pagina, porPagina, busqueda, ordenarPor, orden, true);\r\n  }\r\n\r\n  /**\r\n   * Obtiene solo productos sin stock\r\n   */\r\n  getProductosSinStockPaginated(\r\n    pagina: number = 1,\r\n    porPagina: number = 10,\r\n    busqueda?: string,\r\n    ordenarPor?: string,\r\n    orden?: 'asc' | 'desc'\r\n  ): Observable<InventarioResponse> {\r\n    let query = this.supabase\r\n      .from('inventario')\r\n      .select('*', { count: 'exact' })\r\n      .eq('cantidad_disponible', 0);\r\n\r\n    // Aplicar filtros\r\n    if (busqueda) {\r\n      query = query.or(`nombre.ilike.%${busqueda}%,descripcion.ilike.%${busqueda}%,codigo.ilike.%${busqueda}%`);\r\n    }\r\n\r\n    // Aplicar paginación y ordenamiento\r\n    const desde = (pagina - 1) * porPagina;\r\n    query = query\r\n      .range(desde, desde + porPagina - 1)\r\n      .order(ordenarPor || 'fecha_creacion', { ascending: orden === 'asc' });\r\n\r\n    return from(query).pipe(\r\n      map(({ data, error, count }) => {\r\n        if (error) throw error;\r\n        \r\n        const inventario = data as Inventario[];\r\n        this.inventarioSubject.next(inventario);\r\n        \r\n        return {\r\n          inventario,\r\n          total: count || 0,\r\n          pagina,\r\n          por_pagina: porPagina\r\n        };\r\n      }),\r\n      catchError(error => {\r\n        console.error('Error al obtener productos sin stock:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n} "],
  "mappings": "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",
  "names": []
}
