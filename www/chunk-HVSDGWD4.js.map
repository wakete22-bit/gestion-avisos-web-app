{
  "version": 3,
  "sources": ["src/app/core/services/usuarios.service.ts", "src/app/core/services/auth.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { Observable, BehaviorSubject, from } from 'rxjs';\nimport { map, tap, catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { Usuario, RegisterRequest } from '../models/usuario.model';\nimport { SupabaseClientService } from './supabase-client.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsuariosService {\n  private supabase: SupabaseClient;\n  private usuariosSubject = new BehaviorSubject<Usuario[]>([]);\n  public usuarios$ = this.usuariosSubject.asObservable();\n\n  constructor(private supabaseClientService: SupabaseClientService) {\n    this.supabase = this.supabaseClientService.getClient();\n  }\n\n  /**\n   * Obtiene la lista de usuarios\n   */\n  getUsuarios(): Observable<Usuario[]> {\n    return from(\n      this.supabase\n        .from('usuarios')\n        .select(`\n          *,\n          rol:roles(*)\n        `)\n        .order('fecha_creacion', { ascending: false })\n    ).pipe(\n      map(({ data, error }) => {\n        if (error) throw error;\n        const usuarios = data as Usuario[];\n        this.usuariosSubject.next(usuarios);\n        return usuarios;\n      }),\n      catchError(error => {\n        console.error('Error al obtener usuarios:', error);\n        throw error;\n      })\n    );\n  }\n\n  /**\n   * Obtiene un usuario por su ID\n   */\n  getUsuario(id: string): Observable<Usuario> {\n    return from(\n      this.supabase\n        .from('usuarios')\n        .select(`\n          *,\n          rol:roles(*)\n        `)\n        .eq('id', id)\n        .single()\n    ).pipe(\n      map(({ data, error }) => {\n        if (error) throw error;\n        return data as Usuario;\n      })\n    );\n  }\n\n  /**\n   * Crea un nuevo usuario en la tabla usuarios\n   */\n  crearUsuario(userData: RegisterRequest): Observable<Usuario> {\n    const usuarioData = {\n      id: userData.id, // ID del usuario de Supabase Auth\n      nombre_completo: userData.nombre_completo,\n      email: userData.email,\n      telefono: userData.telefono,\n      rol_id: userData.rol_id || 'default-role-id',\n      fecha_creacion: new Date().toISOString(),\n      es_activo: true\n    };\n\n    return from(\n      this.supabase\n        .from('usuarios')\n        .insert([usuarioData])\n        .select(`\n          *,\n          rol:roles(*)\n        `)\n        .single()\n    ).pipe(\n      map(({ data, error }) => {\n        if (error) throw error;\n        \n        const nuevoUsuario = data as Usuario;\n        const usuariosActuales = this.usuariosSubject.value;\n        this.usuariosSubject.next([nuevoUsuario, ...usuariosActuales]);\n        \n        return nuevoUsuario;\n      })\n    );\n  }\n\n  /**\n   * Actualiza un usuario existente\n   */\n  actualizarUsuario(id: string, usuario: Partial<Usuario>): Observable<Usuario> {\n    const datosActualizados = {\n      ...usuario,\n      fecha_actualizacion: new Date().toISOString()\n    };\n\n    return from(\n      this.supabase\n        .from('usuarios')\n        .update(datosActualizados)\n        .eq('id', id)\n        .select(`\n          *,\n          rol:roles(*)\n        `)\n        .single()\n    ).pipe(\n      map(({ data, error }) => {\n        if (error) throw error;\n        \n        const usuarioActualizado = data as Usuario;\n        const usuariosActuales = this.usuariosSubject.value;\n        const index = usuariosActuales.findIndex(u => u.id === id);\n        if (index !== -1) {\n          usuariosActuales[index] = usuarioActualizado;\n          this.usuariosSubject.next([...usuariosActuales]);\n        }\n        \n        return usuarioActualizado;\n      })\n    );\n  }\n\n  /**\n   * Desactiva un usuario (marcar como inactivo)\n   */\n  desactivarUsuario(id: string): Observable<void> {\n    return from(\n      this.supabase\n        .from('usuarios')\n        .update({ \n          es_activo: false,\n          fecha_actualizacion: new Date().toISOString()\n        })\n        .eq('id', id)\n    ).pipe(\n      map(({ error }) => {\n        if (error) throw error;\n        \n        const usuariosActuales = this.usuariosSubject.value;\n        const index = usuariosActuales.findIndex(u => u.id === id);\n        if (index !== -1) {\n          usuariosActuales[index].es_activo = false;\n          this.usuariosSubject.next([...usuariosActuales]);\n        }\n      })\n    );\n  }\n\n  /**\n   * Obtiene el valor actual de usuarios\n   */\n  getUsuariosActuales(): Usuario[] {\n    return this.usuariosSubject.value;\n  }\n\n  /**\n   * Limpia el estado de usuarios\n   */\n  limpiarUsuarios(): void {\n    this.usuariosSubject.next([]);\n  }\n} ", "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, of, throwError } from 'rxjs';\r\nimport { map, catchError, tap } from 'rxjs/operators';\r\nimport { Usuario, LoginRequest, RegisterRequest, AuthResponse, Rol, TipoRol } from '../models/usuario.model';\r\nimport { environment } from '../../../environments/environment';\r\nimport { SupabaseClient, User, AuthResponse as SupabaseAuthResponse } from '@supabase/supabase-js';\r\nimport { UsuariosService } from './usuarios.service';\r\nimport { SupabaseClientService } from './supabase-client.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private currentUserSubject = new BehaviorSubject<Usuario | null>(null);\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n  \r\n  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\r\n  public isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\r\n\r\n  supabase: SupabaseClient;\r\n  private readonly TOKEN_KEY = 'auth_token';\r\n  private readonly USER_KEY = 'current_user';\r\n  private isInitializing = false;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private usuariosService: UsuariosService,\r\n    private supabaseClientService: SupabaseClientService\r\n  ) {\r\n    this.supabase = this.supabaseClientService.getClient();\r\n    this.initializeAuth();\r\n  }\r\n\r\n  private async initializeAuth(): Promise<void> {\r\n    if (this.isInitializing) {\r\n      console.log('üîß AuthService: Ya se est√° inicializando, esperando...');\r\n      return;\r\n    }\r\n\r\n    this.isInitializing = true;\r\n    try {\r\n      console.log('üîß AuthService: Iniciando autenticaci√≥n...');\r\n      \r\n      // Intentar limpiar locks problem√°ticos\r\n      await this.clearProblematicLocks();\r\n      \r\n      await this.loadStoredAuth();\r\n      this.setupAuthListener();\r\n      \r\n      console.log('üîß AuthService: Inicializaci√≥n completada');\r\n    } catch (error) {\r\n      console.error('‚ùå AuthService: Error en inicializaci√≥n:', error);\r\n      this.clearAuth();\r\n    } finally {\r\n      this.isInitializing = false;\r\n    }\r\n  }\r\n\r\n  private async loadStoredAuth(): Promise<void> {\r\n    try {\r\n      console.log('üîß AuthService: Cargando autenticaci√≥n almacenada...');\r\n      \r\n      // Usar un timeout para evitar bloqueos indefinidos\r\n      const sessionPromise = this.supabase.auth.getSession();\r\n      const timeoutPromise = new Promise((_, reject) => \r\n        setTimeout(() => reject(new Error('Timeout getting session')), 5000)\r\n      );\r\n      \r\n      const { data: { session } } = await Promise.race([sessionPromise, timeoutPromise]) as any;\r\n      \r\n      if (session?.user) {\r\n        console.log('üîß AuthService: Sesi√≥n encontrada, cargando datos del usuario...');\r\n        await this.loadUserData(session.user.id);\r\n      } else {\r\n        console.log('üîß AuthService: No hay sesi√≥n almacenada');\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå AuthService: Error loading stored auth:', error);\r\n      \r\n      // Marcar que hay problemas de locks\r\n      if (error instanceof Error && error.message.includes('NavigatorLockAcquireTimeoutError')) {\r\n        localStorage.setItem('supabase_lock_issue', 'true');\r\n        console.log('üîß AuthService: Problema de Navigator Lock detectado');\r\n      }\r\n      \r\n      this.clearAuth();\r\n    }\r\n  }\r\n\r\n  private setupAuthListener(): void {\r\n    this.supabase.auth.onAuthStateChange(async (event, session) => {\r\n      console.log('Auth state change:', event, session?.user?.id);\r\n      \r\n      if (event === 'SIGNED_IN' && session?.user) {\r\n        await this.loadUserData(session.user.id);\r\n      } else if (event === 'SIGNED_OUT') {\r\n        this.clearAuth();\r\n      } else if (event === 'TOKEN_REFRESHED' && session?.user) {\r\n        await this.loadUserData(session.user.id);\r\n      }\r\n    });\r\n  }\r\n\r\n  async loadUserData(userId: string): Promise<void> {\r\n    try {\r\n      console.log('üîß AuthService: Cargando datos del usuario:', userId);\r\n      \r\n      // Intentar obtener el usuario de la base de datos\r\n      try {\r\n        const usuario = await this.usuariosService.getUsuario(userId).toPromise();\r\n        console.log('üîß AuthService: Usuario encontrado en BD:', usuario);\r\n        this.currentUserSubject.next(usuario || null);\r\n        this.isAuthenticatedSubject.next(true);\r\n        console.log('üîß AuthService: Usuario cargado exitosamente desde BD');\r\n      } catch (dbError) {\r\n        console.warn('‚ö†Ô∏è AuthService: Usuario no encontrado en BD, esperando a que se complete la creaci√≥n:', dbError);\r\n        \r\n        // En lugar de crear un usuario por defecto, esperar un poco m√°s\r\n        // para que se complete la creaci√≥n del usuario en la BD\r\n        await new Promise(resolve => setTimeout(resolve, 3000));\r\n        \r\n        try {\r\n          const usuario = await this.usuariosService.getUsuario(userId).toPromise();\r\n          console.log('üîß AuthService: Usuario encontrado despu√©s de esperar:', usuario);\r\n          this.currentUserSubject.next(usuario || null);\r\n          this.isAuthenticatedSubject.next(true);\r\n          console.log('üîß AuthService: Usuario cargado exitosamente despu√©s de esperar');\r\n        } catch (finalError) {\r\n          console.error('‚ùå AuthService: Usuario no encontrado despu√©s de esperar, creando usuario por defecto:', finalError);\r\n          \r\n          // Solo crear usuario por defecto si realmente no existe\r\n          const usuarioDefault: Usuario = {\r\n            id: userId,\r\n            nombre_completo: 'Usuario',\r\n            email: 'usuario@example.com',\r\n            telefono: '',\r\n            rol_id: 'default-role-id',\r\n            rol: {\r\n              id: 'default-role-id',\r\n              nombre_rol: 'Cliente' as TipoRol,\r\n              descripcion: '',\r\n              permisos: [],\r\n              es_activo: true,\r\n              fecha_creacion: new Date(),\r\n              fecha_actualizacion: new Date()\r\n            },\r\n            es_activo: true,\r\n            fecha_creacion: new Date()\r\n          };\r\n\r\n          console.log('üîß AuthService: Usuario por defecto creado:', usuarioDefault);\r\n          this.currentUserSubject.next(usuarioDefault);\r\n          this.isAuthenticatedSubject.next(true);\r\n          console.log('üîß AuthService: Usuario por defecto cargado exitosamente');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå AuthService: Error loading user data:', error);\r\n      this.clearAuth();\r\n    }\r\n  }\r\n\r\n  async login(credentials: LoginRequest): Promise<AuthResponse> {\r\n    try {\r\n      const { data, error } = await this.supabase.auth.signInWithPassword({\r\n        email: credentials.email,\r\n        password: credentials.password\r\n      });\r\n\r\n      if (error) throw error;\r\n\r\n      if (data.user) {\r\n        await this.loadUserData(data.user.id);\r\n        return {\r\n          usuario: this.currentUserSubject.value!,\r\n          token: data.session?.access_token || ''\r\n        };\r\n      }\r\n\r\n      throw new Error('No se pudo obtener informaci√≥n del usuario');\r\n    } catch (error) {\r\n      console.error('Error en login:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async register(userData: RegisterRequest): Promise<AuthResponse> {\r\n    try {\r\n      // Registrar usuario en Supabase Auth\r\n      const { data, error } = await this.supabase.auth.signUp({\r\n        email: userData.email,\r\n        password: userData.password,\r\n        options: {\r\n          data: {\r\n            nombre_completo: userData.nombre_completo,\r\n            telefono: userData.telefono\r\n          }\r\n        }\r\n      });\r\n\r\n      if (error) throw error;\r\n\r\n      if (data.user) {\r\n        // Esperar a que se complete el registro\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // Crear el usuario en la tabla usuarios\r\n        const userDataWithId = {\r\n          ...userData,\r\n          id: data.user.id\r\n        };\r\n        \r\n        try {\r\n          await this.usuariosService.crearUsuario(userDataWithId).toPromise();\r\n          console.log('üîß AuthService: Usuario creado en tabla usuarios');\r\n        } catch (createError) {\r\n          console.warn('‚ö†Ô∏è AuthService: Error al crear usuario en tabla usuarios:', createError);\r\n          // Continuar aunque falle la creaci√≥n en la tabla usuarios\r\n        }\r\n        \r\n        // Intentar cargar los datos del usuario\r\n        await this.loadUserData(data.user.id);\r\n        \r\n        return {\r\n          usuario: this.currentUserSubject.value!,\r\n          token: data.session?.access_token || ''\r\n        };\r\n      }\r\n\r\n      throw new Error('No se pudo crear el usuario');\r\n    } catch (error) {\r\n      console.error('Error en registro:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async logout(): Promise<void> {\r\n    await this.supabase.auth.signOut();\r\n    this.clearAuth();\r\n  }\r\n\r\n  async refreshToken(): Promise<AuthResponse> {\r\n    try {\r\n      const { data, error } = await this.supabase.auth.refreshSession();\r\n      \r\n      if (error) throw error;\r\n\r\n      if (data.user) {\r\n        await this.loadUserData(data.user.id);\r\n        return {\r\n          usuario: this.currentUserSubject.value!,\r\n          token: data.session?.access_token || ''\r\n        };\r\n      }\r\n\r\n      throw new Error('No se pudo refrescar la sesi√≥n');\r\n    } catch (error) {\r\n      this.clearAuth();\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getCurrentUser(): Usuario | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    const isAuth = this.isAuthenticatedSubject.value;\r\n    console.log('üîß AuthService: isAuthenticated() - Estado:', isAuth);\r\n    return isAuth;\r\n  }\r\n\r\n  async getToken(): Promise<string | null> {\r\n    const { data: { session } } = await this.supabase.auth.getSession();\r\n    const token = session?.access_token || null;\r\n    console.log('üîß AuthService: getToken() - Token obtenido:', token ? 'S√ç' : 'NO');\r\n    return token;\r\n  }\r\n\r\n  private clearAuth(): void {\r\n    this.currentUserSubject.next(null);\r\n    this.isAuthenticatedSubject.next(false);\r\n  }\r\n\r\n  // M√©todo para obtener headers con token para requests autenticados\r\n  async getAuthHeaders(): Promise<HttpHeaders> {\r\n    const token = await this.getToken();\r\n    return new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    });\r\n  }\r\n\r\n  // Verificar si el token ha expirado\r\n  async isTokenExpired(): Promise<boolean> {\r\n    const { data: { session } } = await this.supabase.auth.getSession();\r\n    if (!session) return true;\r\n    \r\n    return new Date(session.expires_at! * 1000) < new Date();\r\n  }\r\n\r\n  // M√©todo p√∫blico para obtener la sesi√≥n actual\r\n  async getCurrentSession() {\r\n    return await this.supabase.auth.getSession();\r\n  }\r\n\r\n  // M√©todo para refresh manual de token (soluci√≥n para NavigatorLockAcquireTimeoutError)\r\n  async manualRefreshToken(): Promise<boolean> {\r\n    try {\r\n      console.log('üîÑ AuthService: Iniciando refresh manual de token...');\r\n      \r\n      // Verificar si hay una sesi√≥n activa\r\n      const { data: { session } } = await this.supabase.auth.getSession();\r\n      if (!session) {\r\n        console.log('üîÑ AuthService: No hay sesi√≥n activa para refrescar');\r\n        return false;\r\n      }\r\n\r\n      // Verificar si el token est√° pr√≥ximo a expirar (menos de 5 minutos)\r\n      const expiresAt = session.expires_at! * 1000; // Convertir a milisegundos\r\n      const now = Date.now();\r\n      const timeUntilExpiry = expiresAt - now;\r\n      const fiveMinutes = 5 * 60 * 1000;\r\n\r\n      if (timeUntilExpiry > fiveMinutes) {\r\n        console.log('üîÑ AuthService: Token a√∫n v√°lido, no es necesario refrescar');\r\n        return true;\r\n      }\r\n\r\n      console.log('üîÑ AuthService: Token pr√≥ximo a expirar, refrescando...');\r\n      \r\n      // Intentar refresh con timeout para evitar bloqueos\r\n      const refreshPromise = this.supabase.auth.refreshSession();\r\n      const timeoutPromise = new Promise((_, reject) => \r\n        setTimeout(() => reject(new Error('Refresh timeout')), 10000)\r\n      );\r\n      \r\n      const { data, error } = await Promise.race([refreshPromise, timeoutPromise]) as any;\r\n      \r\n      if (error) {\r\n        console.error('‚ùå AuthService: Error en refresh manual:', error);\r\n        return false;\r\n      }\r\n\r\n      if (data.session) {\r\n        console.log('üîÑ AuthService: Token refrescado exitosamente');\r\n        // Recargar datos del usuario si es necesario\r\n        if (data.user) {\r\n          await this.loadUserData(data.user.id);\r\n        }\r\n        return true;\r\n      }\r\n\r\n      console.log('üîÑ AuthService: No se pudo refrescar el token');\r\n      return false;\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå AuthService: Error en refresh manual:', error);\r\n      \r\n      // Si es un error de lock, limpiar y reintentar\r\n      if (error instanceof Error && error.message.includes('NavigatorLockAcquireTimeoutError')) {\r\n        console.log('üîÑ AuthService: Error de lock detectado, limpiando...');\r\n        await this.clearProblematicLocks();\r\n        localStorage.setItem('supabase_lock_issue', 'true');\r\n      }\r\n      \r\n      return false;\r\n    }\r\n  }\r\n\r\n  // M√©todo para asegurar que el token sea v√°lido\r\n  async ensureValidToken(): Promise<boolean> {\r\n    try {\r\n      const { data: { session } } = await this.supabase.auth.getSession();\r\n      if (!session) {\r\n        return false;\r\n      }\r\n\r\n      const expiresAt = session.expires_at! * 1000;\r\n      const now = Date.now();\r\n      const timeUntilExpiry = expiresAt - now;\r\n      const fiveMinutes = 5 * 60 * 1000;\r\n\r\n      if (timeUntilExpiry <= fiveMinutes) {\r\n        return await this.manualRefreshToken();\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('‚ùå AuthService: Error verificando validez del token:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // M√©todo para limpiar locks problem√°ticos de forma m√°s agresiva\r\n  private async clearProblematicLocks(): Promise<void> {\r\n    try {\r\n      console.log('üîß AuthService: Limpiando locks problem√°ticos...');\r\n      \r\n      // Limpiar localStorage si hay problemas de locks\r\n      const hasLockIssues = localStorage.getItem('supabase_lock_issue');\r\n      if (hasLockIssues) {\r\n        console.log('üîß AuthService: Detectados problemas de locks, limpiando...');\r\n        localStorage.removeItem('supabase_lock_issue');\r\n        \r\n        // Limpiar datos de Supabase del localStorage de forma m√°s agresiva\r\n        const keysToRemove = Object.keys(localStorage).filter(key => \r\n          key.includes('supabase') || \r\n          key.includes('sb-') || \r\n          key.includes('auth') ||\r\n          key.includes('token')\r\n        );\r\n        \r\n        keysToRemove.forEach(key => {\r\n          try {\r\n            localStorage.removeItem(key);\r\n            console.log(`üîß AuthService: Eliminado ${key}`);\r\n          } catch (error) {\r\n            console.warn(`‚ö†Ô∏è AuthService: Error eliminando ${key}:`, error);\r\n          }\r\n        });\r\n\r\n        // Esperar un poco para que se liberen los locks\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n      }\r\n    } catch (error) {\r\n      console.warn('‚ö†Ô∏è AuthService: Error al limpiar locks:', error);\r\n    }\r\n  }\r\n\r\n  // M√©todos de debug para diagn√≥stico\r\n  async debugTokenStatus(): Promise<any> {\r\n    try {\r\n      const { data: { session } } = await this.supabase.auth.getSession();\r\n      if (!session) {\r\n        return {\r\n          hasSession: false,\r\n          message: 'No hay sesi√≥n activa'\r\n        };\r\n      }\r\n\r\n      const expiresAt = session.expires_at! * 1000;\r\n      const now = Date.now();\r\n      const timeUntilExpiry = expiresAt - now;\r\n      const fiveMinutes = 5 * 60 * 1000;\r\n\r\n      return {\r\n        hasSession: true,\r\n        userId: session.user.id,\r\n        expiresAt: new Date(expiresAt).toISOString(),\r\n        timeUntilExpiry: Math.floor(timeUntilExpiry / 1000), // en segundos\r\n        needsRefresh: timeUntilExpiry <= fiveMinutes,\r\n        isExpired: timeUntilExpiry <= 0\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        hasSession: false,\r\n        error: error instanceof Error ? error.message : 'Error desconocido'\r\n      };\r\n    }\r\n  }\r\n\r\n  async debugLocalStorage(): Promise<any> {\r\n    try {\r\n      const supabaseKeys = Object.keys(localStorage).filter(key => \r\n        key.includes('supabase') || key.includes('sb-') || key.includes('auth')\r\n      );\r\n\r\n      return {\r\n        totalKeys: Object.keys(localStorage).length,\r\n        supabaseKeys: supabaseKeys,\r\n        hasLockIssue: localStorage.getItem('supabase_lock_issue') !== null\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        error: error instanceof Error ? error.message : 'Error desconocido'\r\n      };\r\n    }\r\n  }\r\n\r\n  async forceClearLocks(): Promise<void> {\r\n    try {\r\n      console.log('üîß AuthService: Forzando limpieza de locks...');\r\n      \r\n      // Limpiar todos los datos de Supabase\r\n      const keysToRemove = Object.keys(localStorage).filter(key => \r\n        key.includes('supabase') || \r\n        key.includes('sb-') || \r\n        key.includes('auth') ||\r\n        key.includes('token')\r\n      );\r\n      \r\n      keysToRemove.forEach(key => {\r\n        try {\r\n          localStorage.removeItem(key);\r\n          console.log(`üîß AuthService: Eliminado ${key}`);\r\n        } catch (error) {\r\n          console.warn(`‚ö†Ô∏è AuthService: Error eliminando ${key}:`, error);\r\n        }\r\n      });\r\n\r\n      // Marcar problema de locks para futuras limpiezas\r\n      localStorage.setItem('supabase_lock_issue', 'true');\r\n      \r\n      // Esperar para que se liberen los locks\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      console.log('üîß AuthService: Limpieza de locks completada');\r\n    } catch (error) {\r\n      console.error('‚ùå AuthService: Error en limpieza forzada:', error);\r\n    }\r\n  }\r\n} "],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAWM,IAAO,mBAAP,MAAO,iBAAe;EAK1B,YAAoB,uBAA4C;AAA5C,SAAA,wBAAA;AAHZ,SAAA,kBAAkB,IAAI,gBAA2B,CAAA,CAAE;AACpD,SAAA,YAAY,KAAK,gBAAgB,aAAY;AAGlD,SAAK,WAAW,KAAK,sBAAsB,UAAS;EACtD;;;;EAKA,cAAW;AACT,WAAO,KACL,KAAK,SACF,KAAK,UAAU,EACf,OAAO;;;SAGP,EACA,MAAM,kBAAkB,EAAE,WAAW,MAAK,CAAE,CAAC,EAChD,KACA,IAAI,CAAC,EAAE,MAAM,MAAK,MAAM;AACtB,UAAI;AAAO,cAAM;AACjB,YAAM,WAAW;AACjB,WAAK,gBAAgB,KAAK,QAAQ;AAClC,aAAO;IACT,CAAC,GACD,WAAW,WAAQ;AACjB,cAAQ,MAAM,8BAA8B,KAAK;AACjD,YAAM;IACR,CAAC,CAAC;EAEN;;;;EAKA,WAAW,IAAU;AACnB,WAAO,KACL,KAAK,SACF,KAAK,UAAU,EACf,OAAO;;;SAGP,EACA,GAAG,MAAM,EAAE,EACX,OAAM,CAAE,EACX,KACA,IAAI,CAAC,EAAE,MAAM,MAAK,MAAM;AACtB,UAAI;AAAO,cAAM;AACjB,aAAO;IACT,CAAC,CAAC;EAEN;;;;EAKA,aAAa,UAAyB;AACpC,UAAM,cAAc;MAClB,IAAI,SAAS;;MACb,iBAAiB,SAAS;MAC1B,OAAO,SAAS;MAChB,UAAU,SAAS;MACnB,QAAQ,SAAS,UAAU;MAC3B,iBAAgB,oBAAI,KAAI,GAAG,YAAW;MACtC,WAAW;;AAGb,WAAO,KACL,KAAK,SACF,KAAK,UAAU,EACf,OAAO,CAAC,WAAW,CAAC,EACpB,OAAO;;;SAGP,EACA,OAAM,CAAE,EACX,KACA,IAAI,CAAC,EAAE,MAAM,MAAK,MAAM;AACtB,UAAI;AAAO,cAAM;AAEjB,YAAM,eAAe;AACrB,YAAM,mBAAmB,KAAK,gBAAgB;AAC9C,WAAK,gBAAgB,KAAK,CAAC,cAAc,GAAG,gBAAgB,CAAC;AAE7D,aAAO;IACT,CAAC,CAAC;EAEN;;;;EAKA,kBAAkB,IAAY,SAAyB;AACrD,UAAM,oBAAoB,iCACrB,UADqB;MAExB,sBAAqB,oBAAI,KAAI,GAAG,YAAW;;AAG7C,WAAO,KACL,KAAK,SACF,KAAK,UAAU,EACf,OAAO,iBAAiB,EACxB,GAAG,MAAM,EAAE,EACX,OAAO;;;SAGP,EACA,OAAM,CAAE,EACX,KACA,IAAI,CAAC,EAAE,MAAM,MAAK,MAAM;AACtB,UAAI;AAAO,cAAM;AAEjB,YAAM,qBAAqB;AAC3B,YAAM,mBAAmB,KAAK,gBAAgB;AAC9C,YAAM,QAAQ,iBAAiB,UAAU,OAAK,EAAE,OAAO,EAAE;AACzD,UAAI,UAAU,IAAI;AAChB,yBAAiB,KAAK,IAAI;AAC1B,aAAK,gBAAgB,KAAK,CAAC,GAAG,gBAAgB,CAAC;MACjD;AAEA,aAAO;IACT,CAAC,CAAC;EAEN;;;;EAKA,kBAAkB,IAAU;AAC1B,WAAO,KACL,KAAK,SACF,KAAK,UAAU,EACf,OAAO;MACN,WAAW;MACX,sBAAqB,oBAAI,KAAI,GAAG,YAAW;KAC5C,EACA,GAAG,MAAM,EAAE,CAAC,EACf,KACA,IAAI,CAAC,EAAE,MAAK,MAAM;AAChB,UAAI;AAAO,cAAM;AAEjB,YAAM,mBAAmB,KAAK,gBAAgB;AAC9C,YAAM,QAAQ,iBAAiB,UAAU,OAAK,EAAE,OAAO,EAAE;AACzD,UAAI,UAAU,IAAI;AAChB,yBAAiB,KAAK,EAAE,YAAY;AACpC,aAAK,gBAAgB,KAAK,CAAC,GAAG,gBAAgB,CAAC;MACjD;IACF,CAAC,CAAC;EAEN;;;;EAKA,sBAAmB;AACjB,WAAO,KAAK,gBAAgB;EAC9B;;;;EAKA,kBAAe;AACb,SAAK,gBAAgB,KAAK,CAAA,CAAE;EAC9B;;;mCAtKW,kBAAe,mBAAA,qBAAA,CAAA;AAAA;oFAAf,kBAAe,SAAf,iBAAe,WAAA,YAFd,OAAM,CAAA;AAEd,IAAO,kBAAP;;sEAAO,iBAAe,CAAA;UAH3B;WAAW;MACV,YAAY;KACb;;;;;ACGK,IAAO,eAAP,MAAO,aAAW;EAYtB,YACU,MACA,iBACA,uBAA4C;AAF5C,SAAA,OAAA;AACA,SAAA,kBAAA;AACA,SAAA,wBAAA;AAdF,SAAA,qBAAqB,IAAI,gBAAgC,IAAI;AAC9D,SAAA,eAAe,KAAK,mBAAmB,aAAY;AAElD,SAAA,yBAAyB,IAAI,gBAAyB,KAAK;AAC5D,SAAA,mBAAmB,KAAK,uBAAuB,aAAY;AAGjD,SAAA,YAAY;AACZ,SAAA,WAAW;AACpB,SAAA,iBAAiB;AAOvB,SAAK,WAAW,KAAK,sBAAsB,UAAS;AACpD,SAAK,eAAc;EACrB;EAEc,iBAAc;;AAC1B,UAAI,KAAK,gBAAgB;AACvB,gBAAQ,IAAI,kEAAwD;AACpE;MACF;AAEA,WAAK,iBAAiB;AACtB,UAAI;AACF,gBAAQ,IAAI,sDAA4C;AAGxD,cAAM,KAAK,sBAAqB;AAEhC,cAAM,KAAK,eAAc;AACzB,aAAK,kBAAiB;AAEtB,gBAAQ,IAAI,qDAA2C;MACzD,SAAS,OAAO;AACd,gBAAQ,MAAM,mDAA2C,KAAK;AAC9D,aAAK,UAAS;MAChB;AACE,aAAK,iBAAiB;MACxB;IACF;;EAEc,iBAAc;;AAC1B,UAAI;AACF,gBAAQ,IAAI,gEAAsD;AAGlE,cAAM,iBAAiB,KAAK,SAAS,KAAK,WAAU;AACpD,cAAM,iBAAiB,IAAI,QAAQ,CAAC,GAAG,WACrC,WAAW,MAAM,OAAO,IAAI,MAAM,yBAAyB,CAAC,GAAG,GAAI,CAAC;AAGtE,cAAM,EAAE,MAAM,EAAE,QAAO,EAAE,IAAK,MAAM,QAAQ,KAAK,CAAC,gBAAgB,cAAc,CAAC;AAEjF,YAAI,mCAAS,MAAM;AACjB,kBAAQ,IAAI,4EAAkE;AAC9E,gBAAM,KAAK,aAAa,QAAQ,KAAK,EAAE;QACzC,OAAO;AACL,kBAAQ,IAAI,oDAA0C;QACxD;MACF,SAAS,OAAO;AACd,gBAAQ,MAAM,kDAA6C,KAAK;AAGhE,YAAI,iBAAiB,SAAS,MAAM,QAAQ,SAAS,kCAAkC,GAAG;AACxF,uBAAa,QAAQ,uBAAuB,MAAM;AAClD,kBAAQ,IAAI,6DAAsD;QACpE;AAEA,aAAK,UAAS;MAChB;IACF;;EAEQ,oBAAiB;AACvB,SAAK,SAAS,KAAK,kBAAkB,CAAO,OAAO,YAAW;AA3FlE;AA4FM,cAAQ,IAAI,sBAAsB,QAAO,wCAAS,SAAT,mBAAe,EAAE;AAE1D,UAAI,UAAU,gBAAe,mCAAS,OAAM;AAC1C,cAAM,KAAK,aAAa,QAAQ,KAAK,EAAE;MACzC,WAAW,UAAU,cAAc;AACjC,aAAK,UAAS;MAChB,WAAW,UAAU,sBAAqB,mCAAS,OAAM;AACvD,cAAM,KAAK,aAAa,QAAQ,KAAK,EAAE;MACzC;IACF,EAAC;EACH;EAEM,aAAa,QAAc;;AAC/B,UAAI;AACF,gBAAQ,IAAI,sDAA+C,MAAM;AAGjE,YAAI;AACF,gBAAM,UAAU,MAAM,KAAK,gBAAgB,WAAW,MAAM,EAAE,UAAS;AACvE,kBAAQ,IAAI,oDAA6C,OAAO;AAChE,eAAK,mBAAmB,KAAK,WAAW,IAAI;AAC5C,eAAK,uBAAuB,KAAK,IAAI;AACrC,kBAAQ,IAAI,8DAAuD;QACrE,SAAS,SAAS;AAChB,kBAAQ,KAAK,sGAAyF,OAAO;AAI7G,gBAAM,IAAI,QAAQ,aAAW,WAAW,SAAS,GAAI,CAAC;AAEtD,cAAI;AACF,kBAAM,UAAU,MAAM,KAAK,gBAAgB,WAAW,MAAM,EAAE,UAAS;AACvE,oBAAQ,IAAI,oEAA0D,OAAO;AAC7E,iBAAK,mBAAmB,KAAK,WAAW,IAAI;AAC5C,iBAAK,uBAAuB,KAAK,IAAI;AACrC,oBAAQ,IAAI,2EAAiE;UAC/E,SAAS,YAAY;AACnB,oBAAQ,MAAM,iGAAyF,UAAU;AAGjH,kBAAM,iBAA0B;cAC9B,IAAI;cACJ,iBAAiB;cACjB,OAAO;cACP,UAAU;cACV,QAAQ;cACR,KAAK;gBACH,IAAI;gBACJ,YAAY;gBACZ,aAAa;gBACb,UAAU,CAAA;gBACV,WAAW;gBACX,gBAAgB,oBAAI,KAAI;gBACxB,qBAAqB,oBAAI,KAAI;;cAE/B,WAAW;cACX,gBAAgB,oBAAI,KAAI;;AAG1B,oBAAQ,IAAI,sDAA+C,cAAc;AACzE,iBAAK,mBAAmB,KAAK,cAAc;AAC3C,iBAAK,uBAAuB,KAAK,IAAI;AACrC,oBAAQ,IAAI,iEAA0D;UACxE;QACF;MACF,SAAS,OAAO;AACd,gBAAQ,MAAM,gDAA2C,KAAK;AAC9D,aAAK,UAAS;MAChB;IACF;;EAEM,MAAM,aAAyB;;AAnKvC;AAoKI,UAAI;AACF,cAAM,EAAE,MAAM,MAAK,IAAK,MAAM,KAAK,SAAS,KAAK,mBAAmB;UAClE,OAAO,YAAY;UACnB,UAAU,YAAY;SACvB;AAED,YAAI;AAAO,gBAAM;AAEjB,YAAI,KAAK,MAAM;AACb,gBAAM,KAAK,aAAa,KAAK,KAAK,EAAE;AACpC,iBAAO;YACL,SAAS,KAAK,mBAAmB;YACjC,SAAO,UAAK,YAAL,mBAAc,iBAAgB;;QAEzC;AAEA,cAAM,IAAI,MAAM,+CAA4C;MAC9D,SAAS,OAAO;AACd,gBAAQ,MAAM,mBAAmB,KAAK;AACtC,cAAM;MACR;IACF;;EAEM,SAAS,UAAyB;;AA3L1C;AA4LI,UAAI;AAEF,cAAM,EAAE,MAAM,MAAK,IAAK,MAAM,KAAK,SAAS,KAAK,OAAO;UACtD,OAAO,SAAS;UAChB,UAAU,SAAS;UACnB,SAAS;YACP,MAAM;cACJ,iBAAiB,SAAS;cAC1B,UAAU,SAAS;;;SAGxB;AAED,YAAI;AAAO,gBAAM;AAEjB,YAAI,KAAK,MAAM;AAEb,gBAAM,IAAI,QAAQ,aAAW,WAAW,SAAS,GAAI,CAAC;AAGtD,gBAAM,iBAAiB,iCAClB,WADkB;YAErB,IAAI,KAAK,KAAK;;AAGhB,cAAI;AACF,kBAAM,KAAK,gBAAgB,aAAa,cAAc,EAAE,UAAS;AACjE,oBAAQ,IAAI,yDAAkD;UAChE,SAAS,aAAa;AACpB,oBAAQ,KAAK,uEAA6D,WAAW;UAEvF;AAGA,gBAAM,KAAK,aAAa,KAAK,KAAK,EAAE;AAEpC,iBAAO;YACL,SAAS,KAAK,mBAAmB;YACjC,SAAO,UAAK,YAAL,mBAAc,iBAAgB;;QAEzC;AAEA,cAAM,IAAI,MAAM,6BAA6B;MAC/C,SAAS,OAAO;AACd,gBAAQ,MAAM,sBAAsB,KAAK;AACzC,cAAM;MACR;IACF;;EAEM,SAAM;;AACV,YAAM,KAAK,SAAS,KAAK,QAAO;AAChC,WAAK,UAAS;IAChB;;EAEM,eAAY;;AAlPpB;AAmPI,UAAI;AACF,cAAM,EAAE,MAAM,MAAK,IAAK,MAAM,KAAK,SAAS,KAAK,eAAc;AAE/D,YAAI;AAAO,gBAAM;AAEjB,YAAI,KAAK,MAAM;AACb,gBAAM,KAAK,aAAa,KAAK,KAAK,EAAE;AACpC,iBAAO;YACL,SAAS,KAAK,mBAAmB;YACjC,SAAO,UAAK,YAAL,mBAAc,iBAAgB;;QAEzC;AAEA,cAAM,IAAI,MAAM,mCAAgC;MAClD,SAAS,OAAO;AACd,aAAK,UAAS;AACd,cAAM;MACR;IACF;;EAEA,iBAAc;AACZ,WAAO,KAAK,mBAAmB;EACjC;EAEA,kBAAe;AACb,UAAM,SAAS,KAAK,uBAAuB;AAC3C,YAAQ,IAAI,sDAA+C,MAAM;AACjE,WAAO;EACT;EAEM,WAAQ;;AACZ,YAAM,EAAE,MAAM,EAAE,QAAO,EAAE,IAAK,MAAM,KAAK,SAAS,KAAK,WAAU;AACjE,YAAM,SAAQ,mCAAS,iBAAgB;AACvC,cAAQ,IAAI,uDAAgD,QAAQ,UAAO,IAAI;AAC/E,aAAO;IACT;;EAEQ,YAAS;AACf,SAAK,mBAAmB,KAAK,IAAI;AACjC,SAAK,uBAAuB,KAAK,KAAK;EACxC;;EAGM,iBAAc;;AAClB,YAAM,QAAQ,MAAM,KAAK,SAAQ;AACjC,aAAO,IAAI,YAAY;QACrB,gBAAgB;QAChB,iBAAiB,UAAU,KAAK;OACjC;IACH;;;EAGM,iBAAc;;AAClB,YAAM,EAAE,MAAM,EAAE,QAAO,EAAE,IAAK,MAAM,KAAK,SAAS,KAAK,WAAU;AACjE,UAAI,CAAC;AAAS,eAAO;AAErB,aAAO,IAAI,KAAK,QAAQ,aAAc,GAAI,IAAI,oBAAI,KAAI;IACxD;;;EAGM,oBAAiB;;AACrB,aAAO,MAAM,KAAK,SAAS,KAAK,WAAU;IAC5C;;;EAGM,qBAAkB;;AACtB,UAAI;AACF,gBAAQ,IAAI,6DAAsD;AAGlE,cAAM,EAAE,MAAM,EAAE,QAAO,EAAE,IAAK,MAAM,KAAK,SAAS,KAAK,WAAU;AACjE,YAAI,CAAC,SAAS;AACZ,kBAAQ,IAAI,+DAAqD;AACjE,iBAAO;QACT;AAGA,cAAM,YAAY,QAAQ,aAAc;AACxC,cAAM,MAAM,KAAK,IAAG;AACpB,cAAM,kBAAkB,YAAY;AACpC,cAAM,cAAc,IAAI,KAAK;AAE7B,YAAI,kBAAkB,aAAa;AACjC,kBAAQ,IAAI,0EAA6D;AACzE,iBAAO;QACT;AAEA,gBAAQ,IAAI,mEAAyD;AAGrE,cAAM,iBAAiB,KAAK,SAAS,KAAK,eAAc;AACxD,cAAM,iBAAiB,IAAI,QAAQ,CAAC,GAAG,WACrC,WAAW,MAAM,OAAO,IAAI,MAAM,iBAAiB,CAAC,GAAG,GAAK,CAAC;AAG/D,cAAM,EAAE,MAAM,MAAK,IAAK,MAAM,QAAQ,KAAK,CAAC,gBAAgB,cAAc,CAAC;AAE3E,YAAI,OAAO;AACT,kBAAQ,MAAM,gDAA2C,KAAK;AAC9D,iBAAO;QACT;AAEA,YAAI,KAAK,SAAS;AAChB,kBAAQ,IAAI,sDAA+C;AAE3D,cAAI,KAAK,MAAM;AACb,kBAAM,KAAK,aAAa,KAAK,KAAK,EAAE;UACtC;AACA,iBAAO;QACT;AAEA,gBAAQ,IAAI,sDAA+C;AAC3D,eAAO;MAET,SAAS,OAAO;AACd,gBAAQ,MAAM,gDAA2C,KAAK;AAG9D,YAAI,iBAAiB,SAAS,MAAM,QAAQ,SAAS,kCAAkC,GAAG;AACxF,kBAAQ,IAAI,8DAAuD;AACnE,gBAAM,KAAK,sBAAqB;AAChC,uBAAa,QAAQ,uBAAuB,MAAM;QACpD;AAEA,eAAO;MACT;IACF;;;EAGM,mBAAgB;;AACpB,UAAI;AACF,cAAM,EAAE,MAAM,EAAE,QAAO,EAAE,IAAK,MAAM,KAAK,SAAS,KAAK,WAAU;AACjE,YAAI,CAAC,SAAS;AACZ,iBAAO;QACT;AAEA,cAAM,YAAY,QAAQ,aAAc;AACxC,cAAM,MAAM,KAAK,IAAG;AACpB,cAAM,kBAAkB,YAAY;AACpC,cAAM,cAAc,IAAI,KAAK;AAE7B,YAAI,mBAAmB,aAAa;AAClC,iBAAO,MAAM,KAAK,mBAAkB;QACtC;AAEA,eAAO;MACT,SAAS,OAAO;AACd,gBAAQ,MAAM,4DAAuD,KAAK;AAC1E,eAAO;MACT;IACF;;;EAGc,wBAAqB;;AACjC,UAAI;AACF,gBAAQ,IAAI,4DAAkD;AAG9D,cAAM,gBAAgB,aAAa,QAAQ,qBAAqB;AAChE,YAAI,eAAe;AACjB,kBAAQ,IAAI,oEAA6D;AACzE,uBAAa,WAAW,qBAAqB;AAG7C,gBAAM,eAAe,OAAO,KAAK,YAAY,EAAE,OAAO,SACpD,IAAI,SAAS,UAAU,KACvB,IAAI,SAAS,KAAK,KAClB,IAAI,SAAS,MAAM,KACnB,IAAI,SAAS,OAAO,CAAC;AAGvB,uBAAa,QAAQ,SAAM;AACzB,gBAAI;AACF,2BAAa,WAAW,GAAG;AAC3B,sBAAQ,IAAI,oCAA6B,GAAG,EAAE;YAChD,SAAS,OAAO;AACd,sBAAQ,KAAK,8CAAoC,GAAG,KAAK,KAAK;YAChE;UACF,CAAC;AAGD,gBAAM,IAAI,QAAQ,aAAW,WAAW,SAAS,GAAI,CAAC;QACxD;MACF,SAAS,OAAO;AACd,gBAAQ,KAAK,qDAA2C,KAAK;MAC/D;IACF;;;EAGM,mBAAgB;;AACpB,UAAI;AACF,cAAM,EAAE,MAAM,EAAE,QAAO,EAAE,IAAK,MAAM,KAAK,SAAS,KAAK,WAAU;AACjE,YAAI,CAAC,SAAS;AACZ,iBAAO;YACL,YAAY;YACZ,SAAS;;QAEb;AAEA,cAAM,YAAY,QAAQ,aAAc;AACxC,cAAM,MAAM,KAAK,IAAG;AACpB,cAAM,kBAAkB,YAAY;AACpC,cAAM,cAAc,IAAI,KAAK;AAE7B,eAAO;UACL,YAAY;UACZ,QAAQ,QAAQ,KAAK;UACrB,WAAW,IAAI,KAAK,SAAS,EAAE,YAAW;UAC1C,iBAAiB,KAAK,MAAM,kBAAkB,GAAI;;UAClD,cAAc,mBAAmB;UACjC,WAAW,mBAAmB;;MAElC,SAAS,OAAO;AACd,eAAO;UACL,YAAY;UACZ,OAAO,iBAAiB,QAAQ,MAAM,UAAU;;MAEpD;IACF;;EAEM,oBAAiB;;AACrB,UAAI;AACF,cAAM,eAAe,OAAO,KAAK,YAAY,EAAE,OAAO,SACpD,IAAI,SAAS,UAAU,KAAK,IAAI,SAAS,KAAK,KAAK,IAAI,SAAS,MAAM,CAAC;AAGzE,eAAO;UACL,WAAW,OAAO,KAAK,YAAY,EAAE;UACrC;UACA,cAAc,aAAa,QAAQ,qBAAqB,MAAM;;MAElE,SAAS,OAAO;AACd,eAAO;UACL,OAAO,iBAAiB,QAAQ,MAAM,UAAU;;MAEpD;IACF;;EAEM,kBAAe;;AACnB,UAAI;AACF,gBAAQ,IAAI,sDAA+C;AAG3D,cAAM,eAAe,OAAO,KAAK,YAAY,EAAE,OAAO,SACpD,IAAI,SAAS,UAAU,KACvB,IAAI,SAAS,KAAK,KAClB,IAAI,SAAS,MAAM,KACnB,IAAI,SAAS,OAAO,CAAC;AAGvB,qBAAa,QAAQ,SAAM;AACzB,cAAI;AACF,yBAAa,WAAW,GAAG;AAC3B,oBAAQ,IAAI,oCAA6B,GAAG,EAAE;UAChD,SAAS,OAAO;AACd,oBAAQ,KAAK,8CAAoC,GAAG,KAAK,KAAK;UAChE;QACF,CAAC;AAGD,qBAAa,QAAQ,uBAAuB,MAAM;AAGlD,cAAM,IAAI,QAAQ,aAAW,WAAW,SAAS,GAAI,CAAC;AAEtD,gBAAQ,IAAI,qDAA8C;MAC5D,SAAS,OAAO;AACd,gBAAQ,MAAM,kDAA6C,KAAK;MAClE;IACF;;;;mCAnfW,cAAW,mBAAA,UAAA,GAAA,mBAAA,eAAA,GAAA,mBAAA,qBAAA,CAAA;AAAA;gFAAX,cAAW,SAAX,aAAW,WAAA,YAFV,OAAM,CAAA;AAEd,IAAO,cAAP;;sEAAO,aAAW,CAAA;UAHvB;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
