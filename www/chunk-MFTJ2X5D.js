import{a as T}from"./chunk-QA4DYEAW.js";import{a as N}from"./chunk-FH3D3JZO.js";import{a as y}from"./chunk-5ZJTCSBL.js";import{a as w}from"./chunk-VQH6GBOE.js";import{B as h,F as A,I as F,f as g,j as l,m as C,s as E,z as d}from"./chunk-4AY4VQCP.js";var q=(()=>{let _=class _{constructor(a,e,t,i){this.avisosService=a,this.facturasService=e,this.presupuestosService=t,this.configuracionService=i}obtenerEstadoFlujo(a){return this.avisosService.getResumenCompletoAviso(a).pipe(l(e=>({avisoId:a,estadoActual:e.estado,puedeCrearPresupuesto:this.puedeCrearPresupuesto(e),puedeAprobarPresupuesto:this.puedeAprobarPresupuesto(e),puedeFacturarPresupuesto:this.puedeFacturarPresupuesto(e),puedeFacturarTrabajos:this.puedeFacturarTrabajos(e),puedeCompletarAviso:this.puedeCompletarAviso(e),resumen:e})))}actualizarEstadoConFacturaAutomatica(a){return console.log("\u{1F504} Iniciando actualizaci\xF3n de estado con verificaci\xF3n de factura autom\xE1tica para aviso:",a),this.avisosService.actualizarEstadoAutomatico(a).pipe(d(e=>(console.log("\u{1F4CA} Estado del aviso actualizado:",{avisoId:e.id,estadoNuevo:e.estado}),e.estado==="Listo para facturar"?(console.log('\u{1F4B0} Estado "Listo para facturar" detectado, verificando si se debe generar factura autom\xE1ticamente...'),this.generarFacturaAutomatica(a).pipe(l(t=>({aviso:e,facturaGenerada:t})),E(t=>(console.error("\u274C Error al generar factura autom\xE1tica:",t),g([{aviso:e,facturaGenerada:null,error:t.message}]))))):(console.log('\u2139\uFE0F Estado del aviso no es "Listo para facturar", no se genera factura autom\xE1tica'),g([{aviso:e,facturaGenerada:null}])))))}generarFacturaAutomatica(a){return console.log("\u{1F4B0} Iniciando generaci\xF3n autom\xE1tica de factura para aviso:",a),this.avisosService.getResumenCompletoAviso(a).pipe(d(e=>(console.log("\u{1F50D} Verificando condiciones para facturaci\xF3n autom\xE1tica:",{albaranesFinalizados:e.estadisticas.albaranesFinalizados,facturasPendientes:e.estadisticas.facturasPendientes,totalFacturas:e.estadisticas.totalFacturas,estado:e.estado}),!e.estadisticas.albaranesFinalizados||e.estadisticas.albaranesFinalizados===0?(console.log("\u26A0\uFE0F No hay albaranes finalizados para facturar autom\xE1ticamente"),g([{mensaje:"No hay albaranes finalizados para facturar"}])):e.estadisticas.facturasPendientes>0?(console.log("\u26A0\uFE0F Ya hay facturas pendientes, no se genera nueva factura autom\xE1tica"),g([{mensaje:"Ya existen facturas pendientes"}])):(console.log("\u2705 Condiciones cumplidas, procediendo a generar factura autom\xE1ticamente..."),this.facturarTrabajos(a).pipe(h(()=>console.log("\u2705 Factura generada autom\xE1ticamente")),l(t=>(console.log("\u{1F4B0} Factura generada autom\xE1ticamente:",t),{mensaje:"Factura generada autom\xE1ticamente",factura:t,avisoId:a})),E(t=>(console.error("\u274C Error en generaci\xF3n autom\xE1tica de factura:",t),g([{mensaje:"Error al generar factura autom\xE1ticamente: "+t.message,error:!0}]))))))))}ejecutarFlujoCompleto(a,e=!0){return e?this.flujoConPresupuesto(a):this.flujoDirectoSinPresupuesto(a)}flujoDirectoSinPresupuesto(a){return this.avisosService.actualizarAviso(a,{estado:"En curso",requiere_presupuesto:!1}).pipe(h(()=>console.log("\u2705 Aviso actualizado para trabajo directo")),d(()=>this.avisosService.getResumenCompletoAviso(a)),l(e=>({paso:"flujo_directo_iniciado",avisoId:a,mensaje:"Flujo directo iniciado. El t\xE9cnico puede comenzar a trabajar.",resumen:e})))}flujoConPresupuesto(a){return this.avisosService.actualizarAviso(a,{estado:"Pendiente de presupuesto",requiere_presupuesto:!0}).pipe(h(()=>console.log("\u2705 Aviso marcado como requiere presupuesto")),d(()=>this.presupuestosService.crearPresupuesto({aviso_id:a,horas_estimadas:2,total_estimado:0})),h(()=>console.log("\u2705 Presupuesto creado")),l(e=>({paso:"presupuesto_creado",avisoId:a,presupuestoId:e.id,mensaje:"Presupuesto creado. Pendiente de evaluaci\xF3n y aprobaci\xF3n.",presupuesto:e})))}aprobarPresupuesto(a){return this.presupuestosService.cambiarEstado(a,"Completado").pipe(d(e=>this.avisosService.actualizarAviso(e.aviso_id,{estado:"En curso"})),h(()=>console.log("\u2705 Presupuesto aprobado y aviso en curso")),l(e=>({paso:"presupuesto_aprobado",avisoId:e.id,mensaje:"Presupuesto aprobado. El t\xE9cnico puede comenzar a trabajar.",aviso:e})))}facturarPresupuesto(a){return this.facturasService.crearFacturaDesdePresupuesto(a).pipe(h(()=>console.log("\u2705 Factura creada desde presupuesto")),d(e=>this.avisosService.actualizarEstadoAutomatico(e.factura.aviso_id).pipe(l(()=>e))),l(e=>({paso:"factura_desde_presupuesto",avisoId:e.factura.aviso_id,facturaId:e.factura.id,mensaje:"Factura generada autom\xE1ticamente desde presupuesto aprobado.",factura:e})))}facturarTrabajos(a){return console.log("\u{1F527} Iniciando facturaci\xF3n de trabajos para aviso:",a),this.avisosService.getResumenCompletoAviso(a).pipe(d(e=>{var n;if(console.log("\u{1F527} Resumen completo obtenido:",e),!e.estadisticas.albaranesFinalizados)throw new Error('No hay albaranes finalizados para facturar. Solo los albaranes marcados como "Finalizado" se pueden facturar autom\xE1ticamente.');let t=((n=e.trabajos)==null?void 0:n.filter(s=>{var c;return!s.albaran_id||!((c=s.albaran)!=null&&c.estado_cierre)||s.albaran.estado_cierre!=="Finalizado"}))||[];if(t.length>0){let s=t.map(c=>{var v,j;return`Trabajo #${(v=c.id)==null?void 0:v.substring(0,8)} (${c.descripcion}) - Estado: ${((j=c.albaran)==null?void 0:j.estado_cierre)||"Sin cerrar"}`}).join(", ");throw new Error(`No se puede facturar. Solo se pueden facturar trabajos con albaranes marcados como "Finalizado". Trabajos pendientes: ${s}`)}console.log("\u{1F527} Cliente del resumen:",e.cliente);let i=this.convertirDatosAFactura({avisoId:a,cliente:e.cliente,resumen:e});return this.facturasService.getSiguienteNumero().pipe(d(s=>(i.numero_factura=s,console.log("\u{1F527} N\xFAmero de factura generado:",s),this.facturasService.crearFactura(i))))}),h(()=>console.log("\u2705 Factura creada desde trabajos realizados")),d(()=>this.avisosService.getResumenCompletoAviso(a)),l(e=>({paso:"factura_creada_desde_trabajos",avisoId:a,mensaje:"Factura creada exitosamente desde trabajos realizados",resumen:e})))}verificarEstadoFactura(a,e){return this.avisosService.getResumenCompletoAviso(e).pipe(d(t=>t.estado==="Completado"?this.facturasService.cambiarEstado(a,"Completado"):t.estado==="Listo para facturar"?this.facturasService.cambiarEstado(a,"En curso"):g([{id:a,estado:"Pendiente"}])))}sincronizarEstadosFacturas(a){return this.avisosService.getResumenCompletoAviso(a).pipe(d(e=>{if(!e.facturas||e.facturas.length===0)return g([{mensaje:"No hay facturas para sincronizar"}]);let t;e.estado==="Completado"?t="Completado":e.estado==="Listo para facturar"?t="En curso":t="Pendiente";let i=e.facturas.map(n=>this.facturasService.cambiarEstado(n.id,t));return C(i).pipe(l(()=>({mensaje:`Estados de ${e.facturas.length} factura(s) sincronizados a "${t}"`,avisoId:a,nuevoEstado:t})))}))}completarAviso(a){return this.avisosService.getResumenCompletoAviso(a).pipe(d(e=>{var i;if(!this.puedeCompletarAviso(e))throw new Error("No se puede completar el aviso. Verifica que haya trabajos finalizados y facturas generadas.");let t=((i=e.trabajos)==null?void 0:i.filter(n=>{var s;return!n.albaran_id||!((s=n.albaran)!=null&&s.estado_cierre)||n.albaran.estado_cierre==="Otra visita"}))||[];if(t.length>0){let n=t.map(s=>{var c,v;return`Trabajo #${(c=s.id)==null?void 0:c.substring(0,8)} (${s.descripcion}) - Estado: ${((v=s.albaran)==null?void 0:v.estado_cierre)||"Sin cerrar"}`}).join(", ");throw new Error(`No se puede completar el aviso. Los siguientes trabajos necesitan albaranes cerrados (Finalizado o Presupuesto pendiente): ${n}`)}return this.avisosService.actualizarAviso(a,{estado:"Completado",fecha_finalizacion:new Date}).pipe(d(n=>{if(e.facturas&&e.facturas.length>0){let s=e.facturas.map(c=>this.facturasService.cambiarEstado(c.id,"Completado"));return C(s).pipe(l(()=>n))}return g([n])}))}),h(()=>console.log("\u2705 Aviso completado exitosamente")),d(()=>this.avisosService.getResumenCompletoAviso(a)),l(e=>({paso:"aviso_completado",avisoId:a,mensaje:"Aviso marcado como completado",resumen:e})))}obtenerAccionesDisponibles(a){return this.obtenerEstadoFlujo(a).pipe(l(e=>{let t=[];return e.puedeFacturarTrabajos&&t.push("facturar_trabajos"),e.puedeCompletarAviso&&t.push("completar_aviso"),t}))}puedeCrearPresupuesto(a){return!1}puedeAprobarPresupuesto(a){return!1}puedeFacturarPresupuesto(a){return!1}puedeFacturarTrabajos(a){return a.estadisticas.albaranesFinalizados>0&&a.estadisticas.facturasPendientes===0}puedeCompletarAviso(a){let e=a.estadisticas.albaranesFinalizados>0&&a.estadisticas.totalFacturas>0,t=a.estadisticas.albaranesPresupuestoPendiente>0;return a.estadisticas.albaranesOtraVisita>0?!1:e||t}convertirDatosAFactura(a){var j,z,$;if(console.log("\u{1F527} Datos de factura recibidos:",a),!a.cliente||!a.cliente.id)throw new Error("Datos de cliente incompletos para crear factura");let e=[],t=0;if(a.resumen.albaranes&&a.resumen.albaranes.length>0&&(console.log("\u{1F527} Calculando horas totales de todos los albaranes:",a.resumen.albaranes.length,"albaranes"),a.resumen.albaranes.forEach((o,u)=>{if(o.hora_entrada&&o.hora_salida){let r=new Date(`2000-01-01T${o.hora_entrada}`),f=(new Date(`2000-01-01T${o.hora_salida}`).getTime()-r.getTime())/(1e3*60*60),m=Math.max(0,f);console.log(`\u{1F527} Albar\xE1n #${u+1}: ${o.hora_entrada} - ${o.hora_salida} = ${m.toFixed(2)} horas`),t+=m}}),console.log("\u{1F527} Horas totales acumuladas:",t.toFixed(2),"horas")),t>0){let o=this.configuracionService.getPrecioHoraManoObraSync();e.push({tipo:"mano_obra",nombre:"Mano de obra",cantidad:t,precio_neto:o,precio_pvp:o,descripcion:`Trabajo realizado: ${t.toFixed(2)} horas (${((j=a.resumen.albaranes)==null?void 0:j.length)||0} albaranes)`})}let i=new Map;a.resumen.albaranes&&a.resumen.albaranes.length>0&&(console.log("\u{1F527} Consolidando repuestos de todos los albaranes..."),a.resumen.albaranes.forEach((o,u)=>{console.log(`\u{1F527} Procesando albar\xE1n #${u+1}:`,o.id),o.repuestos&&o.repuestos.length>0&&o.repuestos.forEach(r=>{if(r&&r.cantidad&&r.cantidad>0){let p=r.nombre||"Repuesto sin nombre",f=p.toLowerCase();if(i.has(f)){let m=i.get(f);m.cantidad_total+=parseFloat(r.cantidad),m.precio_total+=parseFloat(r.precio_pvp||0)*parseFloat(r.cantidad),m.albaranes.push(u+1),console.log(`\u{1F527} Repuesto consolidado: ${p} - Cantidad total: ${m.cantidad_total}`)}else i.set(f,{nombre:p,cantidad_total:parseFloat(r.cantidad),precio_unitario:parseFloat(r.precio_neto||0),precio_total:parseFloat(r.precio_pvp||0)*parseFloat(r.cantidad),unidad:r.unidad||"unidad",albaranes:[u+1]}),console.log(`\u{1F527} Nuevo repuesto: ${p} - Cantidad: ${r.cantidad}`)}}),(!o.repuestos||o.repuestos.length===0)&&o.repuestos_utilizados&&Array.isArray(o.repuestos_utilizados)&&(console.log(`\u{1F527} Procesando repuestos_utilizados legacy para albar\xE1n #${u+1}`),o.repuestos_utilizados.forEach(r=>{if(r){let p,f=1,m=0;if(typeof r=="string")p=r;else if(typeof r=="object"&&r.nombre)p=r.nombre,f=Number(r.cantidad)||1,m=Number(r.precio_pvp)||Number(r.precio_neto)||0;else try{let b=typeof r=="string"?JSON.parse(r):r;p=b.nombre||"Repuesto sin nombre",f=Number(b.cantidad)||1,m=Number(b.precio_pvp)||Number(b.precio_neto)||0}catch{console.warn("\u26A0\uFE0F Repuesto mal formateado, ignorando:",r);return}let P=p.toLowerCase();if(i.has(P)){let b=i.get(P);b.cantidad_total+=f,b.precio_total+=m*f,b.albaranes.push(u+1),console.log(`\u{1F527} Repuesto legacy consolidado: ${p} - Cantidad total: ${b.cantidad_total}`)}else i.set(P,{nombre:p,cantidad_total:f,precio_unitario:m,precio_total:m*f,unidad:"unidad",albaranes:[u+1]}),console.log(`\u{1F527} Nuevo repuesto legacy: ${p} - Cantidad: ${f}`)}}))})),i.forEach((o,u)=>{let r=o.cantidad_total>0?o.precio_total/o.cantidad_total:o.precio_unitario;e.push({tipo:"repuesto",nombre:o.nombre,cantidad:o.cantidad_total,precio_neto:o.precio_unitario||0,precio_pvp:r||o.precio_unitario||0,descripcion:`${o.nombre} - ${o.cantidad_total} ${o.unidad} (usado en albaranes: ${o.albaranes.join(", ")})`}),console.log(`\u{1F527} L\xEDnea de factura creada: ${o.nombre} x${o.cantidad_total} = \u20AC${(r*o.cantidad_total).toFixed(2)}`)});let n=e.reduce((o,u)=>{let r=(u.precio_pvp||0)*(u.cantidad||0);return o+r},0),s=(($=(z=this.configuracionService.getConfiguracionActual())==null?void 0:z.facturacion)==null?void 0:$.iva_por_defecto)||21,c=+(n*(s/100)).toFixed(2),v=+(n+c).toFixed(2);return console.log("\u{1F527} L\xEDneas de factura consolidadas:",e.length,"l\xEDneas"),console.log("\u{1F527} Subtotal consolidado:",n.toFixed(2),"\u20AC"),console.log("\u{1F527} IVA:",c.toFixed(2),"\u20AC"),console.log("\u{1F527} Total consolidado:",v.toFixed(2),"\u20AC"),e.forEach((o,u)=>{console.log(`\u{1F527} L\xEDnea ${u+1}:`,{tipo:o.tipo,nombre:o.nombre,cantidad:o.cantidad,precio_neto:o.precio_neto,precio_pvp:o.precio_pvp,descripcion:o.descripcion})}),{cliente_id:a.cliente.id,nombre_cliente:a.cliente.nombre_completo,direccion_cliente:a.cliente.direccion||"",cif_cliente:a.cliente.cif||"",email_cliente:a.cliente.email||"",aviso_id:a.avisoId,fecha_emision:new Date().toISOString().split("T")[0],estado:"Pendiente",subtotal:n,iva:c,total:v,lineas:e}}};_.\u0275fac=function(e){return new(e||_)(F(w),F(N),F(T),F(y))},_.\u0275prov=A({token:_,factory:_.\u0275fac,providedIn:"root"});let S=_;return S})();export{q as a};
