{
  "version": 3,
  "sources": ["src/app/modules/presupuestos/services/presupuestos.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { Observable, BehaviorSubject, from } from 'rxjs';\nimport { map, tap, catchError, switchMap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { SupabaseClientService } from '../../../core/services/supabase-client.service';\nimport { DataUpdateService } from '../../../core/services/data-update.service';\n\nexport interface Presupuesto {\n  id: string;\n  aviso_id: string;\n  fecha_creacion: Date;\n  fecha_actualizacion?: Date;\n  horas_estimadas?: number;\n  total_estimado?: number;\n  pdf_url?: string;\n  estado: 'Pendiente' | 'En curso' | 'Completado' | 'Facturado' | 'Cancelado';\n  // Relaciones\n  aviso?: any;\n  materiales?: any;\n}\n\nexport interface MaterialPresupuesto {\n  id: string;\n  presupuesto_id: string;\n  material_id: string;\n  cantidad_estimada: number;\n  precio_neto_al_momento: number;\n  // Relaciones\n  material?: any;\n}\n\nexport interface PresupuestoResponse {\n  presupuestos: Presupuesto[];\n  total: number;\n  pagina: number;\n  por_pagina: number;\n}\n\nexport interface CrearPresupuestoRequest {\n  aviso_id: string;\n  horas_estimadas?: number;\n  total_estimado?: number;\n  estado?: 'Pendiente' | 'En curso' | 'Completado' | 'Facturado' | 'Cancelado';\n  pdf_url?: string;\n  materiales?: any[];\n}\n\nexport interface ActualizarPresupuestoRequest {\n  aviso_id?: string;\n  horas_estimadas?: number;\n  total_estimado?: number;\n  estado?: 'Pendiente' | 'En curso' | 'Completado' | 'Facturado' | 'Cancelado';\n  pdf_url?: string;\n  materiales?: any[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PresupuestosService {\n  private supabase: SupabaseClient;\n  private presupuestosSubject = new BehaviorSubject<Presupuesto[]>([]);\n  public presupuestos$ = this.presupuestosSubject.asObservable();\n\n  constructor(\n    private supabaseClientService: SupabaseClientService,\n    private dataUpdateService: DataUpdateService\n  ) {\n    this.supabase = this.supabaseClientService.getClient();\n  }\n\n  /**\n   * Obtiene la lista de presupuestos con paginación y filtros\n   */\n  getPresupuestos(\n    pagina: number = 1,\n    porPagina: number = 10,\n    busqueda?: string,\n    ordenarPor?: string,\n    orden?: 'asc' | 'desc',\n    estado?: string\n  ): Observable<PresupuestoResponse> {\n    let query = this.supabase\n      .from('presupuestos')\n      .select(`\n        *,\n        aviso:avisos(\n          *,\n          cliente:clientes(*)\n        )\n      `, { count: 'exact' });\n\n    // Aplicar filtros\n    if (busqueda) {\n      query = query.or(`aviso.nombre_cliente_aviso.ilike.%${busqueda}%`);\n    }\n\n    if (estado) {\n      query = query.eq('estado', estado);\n    }\n\n    // Aplicar paginación y ordenamiento\n    const desde = (pagina - 1) * porPagina;\n    query = query\n      .range(desde, desde + porPagina - 1)\n      .order(ordenarPor || 'fecha_creacion', { ascending: orden === 'asc' });\n\n    return from(query).pipe(\n      map(({ data, error, count }) => {\n        if (error) throw error;\n\n        const presupuestos = data as Presupuesto[];\n        this.presupuestosSubject.next(presupuestos);\n\n        return {\n          presupuestos,\n          total: count || 0,\n          pagina,\n          por_pagina: porPagina\n        };\n      }),\n      catchError(error => {\n        console.error('Error al obtener presupuestos:', error);\n        throw error;\n      })\n    );\n  }\n\n  /**\n   * Obtiene un presupuesto por su ID\n   */\n  getPresupuesto(id: string): Observable<Presupuesto> {\n    console.log('Servicio: Buscando presupuesto con ID:', id);\n    return from(\n      this.supabase\n        .from('presupuestos')\n        .select(`\n          *,\n          aviso:avisos(\n            *,\n            cliente:clientes(*)\n          ),\n          materiales_estimados\n        `)\n        .eq('id', id)\n        .single()\n    ).pipe(\n      map(({ data, error }) => {\n        console.log('Servicio: Respuesta de Supabase:', { data, error });\n        if (error) throw error;\n        return data as Presupuesto;\n      })\n    );\n  }\n\n  /**\n   * Crea un nuevo presupuesto\n   */\n  crearPresupuesto(presupuesto: CrearPresupuestoRequest): Observable<Presupuesto> {\n    const presupuestoData = {\n      ...presupuesto,\n      fecha_creacion: new Date().toISOString(),\n      estado: 'Pendiente'\n    };\n\n    return from(\n      this.supabase\n        .from('presupuestos')\n        .insert([presupuestoData])\n        .select(`\n          *,\n          aviso:avisos(\n            *,\n            cliente:clientes(*)\n          )\n        `)\n        .single()\n    ).pipe(\n      switchMap(({ data: presupuestoCreado, error: presupuestoError }) => {\n        if (presupuestoError) throw presupuestoError;\n\n        const presupuesto = presupuestoCreado as Presupuesto;\n\n                // Los materiales ahora se almacenan directamente en el campo JSONB materiales_estimados\n        const presupuestosActuales = this.presupuestosSubject.value;\n        this.presupuestosSubject.next([presupuesto, ...presupuestosActuales]);\n        \n        // Notificar creación y limpiar cache\n        this.dataUpdateService.notifyCreated('presupuestos');\n        \n        return from([presupuesto]);\n      })\n    );\n  }\n\n  /**\n   * Actualiza un presupuesto existente\n   */\n  actualizarPresupuesto(id: string, presupuesto: ActualizarPresupuestoRequest): Observable<Presupuesto> {\n    console.log('Servicio: Actualizando presupuesto con ID:', id);\n    console.log('Servicio: Datos recibidos:', presupuesto);\n    \n    const datosActualizados = {\n      ...presupuesto,\n      fecha_actualizacion: new Date().toISOString()\n    };\n\n    // Los materiales ahora se almacenan directamente en el campo JSONB materiales_estimados\n    console.log('Servicio: Datos del presupuesto:', datosActualizados);\n\n    return from(\n      this.supabase\n        .from('presupuestos')\n        .update(datosActualizados)\n        .eq('id', id)\n        .select(`\n          *,\n          aviso:avisos(\n            *,\n            cliente:clientes(*)\n          )\n        `)\n        .single()\n    ).pipe(\n      switchMap(({ data: presupuestoActualizado, error: presupuestoError }) => {\n        if (presupuestoError) throw presupuestoError;\n\n        const presupuesto = presupuestoActualizado as Presupuesto;\n        console.log('Servicio: Presupuesto actualizado:', presupuesto);\n\n        // Los materiales ahora se almacenan directamente en el campo JSONB materiales_estimados\n        console.log('Servicio: Presupuesto actualizado:', presupuesto);\n        \n        // Actualizar el estado local\n        const presupuestosActuales = this.presupuestosSubject.value;\n        const index = presupuestosActuales.findIndex(p => p.id === id);\n        if (index !== -1) {\n          presupuestosActuales[index] = presupuesto;\n          this.presupuestosSubject.next([...presupuestosActuales]);\n        }\n\n        // Notificar actualización y limpiar cache\n        this.dataUpdateService.notifyUpdated('presupuestos');\n\n        return from([presupuesto]);\n      })\n    );\n  }\n\n  /**\n   * Elimina un presupuesto\n   */\n  eliminarPresupuesto(id: string): Observable<void> {\n    return from(\n      this.supabase\n        .from('presupuestos')\n        .delete()\n        .eq('id', id)\n    ).pipe(\n      map(({ error }) => {\n        if (error) throw error;\n\n        const presupuestosActuales = this.presupuestosSubject.value;\n        const presupuestosFiltrados = presupuestosActuales.filter(p => p.id !== id);\n        this.presupuestosSubject.next(presupuestosFiltrados);\n\n        // Notificar eliminación y limpiar cache\n        this.dataUpdateService.notifyDeleted('presupuestos');\n      })\n    );\n  }\n\n  /**\n   * Busca presupuestos por término de búsqueda\n   */\n  buscarPresupuestos(termino: string): Observable<Presupuesto[]> {\n    return from(\n      this.supabase\n        .from('presupuestos')\n        .select(`\n          *,\n          aviso:avisos(\n            *,\n            cliente:clientes(*)\n          )\n        `)\n        .or(`aviso.nombre_cliente_aviso.ilike.%${termino}%`)\n        .limit(10)\n    ).pipe(\n      map(({ data, error }) => {\n        if (error) throw error;\n        return data as Presupuesto[];\n      })\n    );\n  }\n\n  /**\n   * Obtiene presupuestos por estado\n   */\n  getPresupuestosPorEstado(estado: string): Observable<Presupuesto[]> {\n    return from(\n      this.supabase\n        .from('presupuestos')\n        .select(`\n          *,\n          aviso:avisos(\n            *,\n            cliente:clientes(*)\n          )\n        `)\n        .eq('estado', estado)\n        .order('fecha_creacion', { ascending: false })\n    ).pipe(\n      map(({ data, error }) => {\n        if (error) throw error;\n        return data as Presupuesto[];\n      })\n    );\n  }\n\n  /**\n   * Obtiene presupuestos por aviso\n   */\n  getPresupuestosPorAviso(avisoId: string): Observable<Presupuesto[]> {\n    return from(\n      this.supabase\n        .from('presupuestos')\n        .select(`\n          *,\n          aviso:avisos(\n            *,\n            cliente:clientes(*)\n          )\n        `)\n        .eq('aviso_id', avisoId)\n        .order('fecha_creacion', { ascending: false })\n    ).pipe(\n      map(({ data, error }) => {\n        if (error) throw error;\n        return data as Presupuesto[];\n      })\n    );\n  }\n\n  /**\n   * Cambia el estado de un presupuesto\n   */\n  cambiarEstado(id: string, estado: 'Pendiente' | 'En curso' | 'Completado' | 'Facturado' | 'Cancelado'): Observable<Presupuesto> {\n    return from(\n      this.supabase\n        .from('presupuestos')\n        .update({ \n          estado,\n          fecha_actualizacion: new Date().toISOString()\n        })\n        .eq('id', id)\n        .select(`\n          *,\n          aviso:avisos(\n            *,\n            cliente:clientes(*)\n          )\n        `)\n        .single()\n    ).pipe(\n      map(({ data, error }) => {\n        if (error) throw error;\n\n        const presupuestoActualizado = data as Presupuesto;\n        const presupuestosActuales = this.presupuestosSubject.value;\n        const index = presupuestosActuales.findIndex(p => p.id === id);\n        if (index !== -1) {\n          presupuestosActuales[index] = presupuestoActualizado;\n          this.presupuestosSubject.next([...presupuestosActuales]);\n        }\n\n        return presupuestoActualizado;\n      })\n    );\n  }\n\n  /**\n   * Obtiene el valor actual de presupuestos\n   */\n  getPresupuestosActuales(): Presupuesto[] {\n    return this.presupuestosSubject.value;\n  }\n\n  /**\n   * Limpia el estado de presupuestos\n   */\n  limpiarPresupuestos(): void {\n    this.presupuestosSubject.next([]);\n  }\n} "],
  "mappings": "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",
  "names": ["presupuesto"]
}
