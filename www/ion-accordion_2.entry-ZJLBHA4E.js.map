{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-accordion_2.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, e as config, h, d as Host, g as getElement, c as createEvent, f as printIonWarning } from './index-4DxY6_gG.js';\nimport { g as getElementRoot, r as raf, f as addEventListener, m as removeEventListener, t as transitionEndAsync } from './helpers-8KSQQGQy.js';\nimport { l as chevronDown } from './index-DV3sJJW8.js';\nimport { b as getIonMode } from './ionic-global-CTSyufhF.js';\nconst accordionIosCss = \":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-expanding) #content-wrapper{overflow:auto}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}:host(.accordion-next) ::slotted(ion-item[slot=header]){--border-width:0.55px 0px 0.55px 0px}\";\nconst accordionMdCss = \":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-expanding) #content-wrapper{overflow:auto}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}\";\nconst Accordion = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.updateListener = () => this.updateState(false);\n    this.state = 1 /* AccordionState.Collapsed */;\n    this.isNext = false;\n    this.isPrevious = false;\n    /**\n     * The value of the accordion. Defaults to an autogenerated\n     * value.\n     */\n    this.value = `ion-accordion-${accordionIds++}`;\n    /**\n     * If `true`, the accordion cannot be interacted with.\n     */\n    this.disabled = false;\n    /**\n     * If `true`, the accordion cannot be interacted with,\n     * but does not alter the opacity.\n     */\n    this.readonly = false;\n    /**\n     * The toggle icon to use. This icon will be\n     * rotated when the accordion is expanded\n     * or collapsed.\n     */\n    this.toggleIcon = chevronDown;\n    /**\n     * The slot inside of `ion-item` to\n     * place the toggle icon. Defaults to `\"end\"`.\n     */\n    this.toggleIconSlot = 'end';\n    this.setItemDefaults = () => {\n      const ionItem = this.getSlottedHeaderIonItem();\n      if (!ionItem) {\n        return;\n      }\n      /**\n       * For a11y purposes, we make\n       * the ion-item a button so users\n       * can tab to it and use keyboard\n       * navigation to get around.\n       */\n      ionItem.button = true;\n      ionItem.detail = false;\n      /**\n       * By default, the lines in an\n       * item should be full here, but\n       * only do that if a user has\n       * not explicitly overridden them\n       */\n      if (ionItem.lines === undefined) {\n        ionItem.lines = 'full';\n      }\n    };\n    this.getSlottedHeaderIonItem = () => {\n      const {\n        headerEl\n      } = this;\n      if (!headerEl) {\n        return;\n      }\n      /**\n       * Get the first ion-item\n       * slotted in the header slot\n       */\n      const slot = headerEl.querySelector('slot');\n      if (!slot) {\n        return;\n      }\n      // This is not defined in unit tests\n      if (slot.assignedElements === undefined) return;\n      return slot.assignedElements().find(el => el.tagName === 'ION-ITEM');\n    };\n    this.setAria = (expanded = false) => {\n      const ionItem = this.getSlottedHeaderIonItem();\n      if (!ionItem) {\n        return;\n      }\n      /**\n       * Get the native <button> element inside of\n       * ion-item because that is what will be focused\n       */\n      const root = getElementRoot(ionItem);\n      const button = root.querySelector('button');\n      if (!button) {\n        return;\n      }\n      button.setAttribute('aria-expanded', `${expanded}`);\n    };\n    this.slotToggleIcon = () => {\n      const ionItem = this.getSlottedHeaderIonItem();\n      if (!ionItem) {\n        return;\n      }\n      const {\n        toggleIconSlot,\n        toggleIcon\n      } = this;\n      /**\n       * Check if there already is a toggle icon.\n       * If so, do not add another one.\n       */\n      const existingToggleIcon = ionItem.querySelector('.ion-accordion-toggle-icon');\n      if (existingToggleIcon) {\n        return;\n      }\n      const iconEl = document.createElement('ion-icon');\n      iconEl.slot = toggleIconSlot;\n      iconEl.lazy = false;\n      iconEl.classList.add('ion-accordion-toggle-icon');\n      iconEl.icon = toggleIcon;\n      iconEl.setAttribute('aria-hidden', 'true');\n      ionItem.appendChild(iconEl);\n    };\n    this.expandAccordion = (initialUpdate = false) => {\n      const {\n        contentEl,\n        contentElWrapper\n      } = this;\n      if (initialUpdate || contentEl === undefined || contentElWrapper === undefined) {\n        this.state = 4 /* AccordionState.Expanded */;\n        return;\n      }\n      if (this.state === 4 /* AccordionState.Expanded */) {\n        return;\n      }\n      if (this.currentRaf !== undefined) {\n        cancelAnimationFrame(this.currentRaf);\n      }\n      if (this.shouldAnimate()) {\n        raf(() => {\n          this.state = 8 /* AccordionState.Expanding */;\n          this.currentRaf = raf(async () => {\n            const contentHeight = contentElWrapper.offsetHeight;\n            const waitForTransition = transitionEndAsync(contentEl, 2000);\n            contentEl.style.setProperty('max-height', `${contentHeight}px`);\n            await waitForTransition;\n            this.state = 4 /* AccordionState.Expanded */;\n            contentEl.style.removeProperty('max-height');\n          });\n        });\n      } else {\n        this.state = 4 /* AccordionState.Expanded */;\n      }\n    };\n    this.collapseAccordion = (initialUpdate = false) => {\n      const {\n        contentEl\n      } = this;\n      if (initialUpdate || contentEl === undefined) {\n        this.state = 1 /* AccordionState.Collapsed */;\n        return;\n      }\n      if (this.state === 1 /* AccordionState.Collapsed */) {\n        return;\n      }\n      if (this.currentRaf !== undefined) {\n        cancelAnimationFrame(this.currentRaf);\n      }\n      if (this.shouldAnimate()) {\n        this.currentRaf = raf(async () => {\n          const contentHeight = contentEl.offsetHeight;\n          contentEl.style.setProperty('max-height', `${contentHeight}px`);\n          raf(async () => {\n            const waitForTransition = transitionEndAsync(contentEl, 2000);\n            this.state = 2 /* AccordionState.Collapsing */;\n            await waitForTransition;\n            this.state = 1 /* AccordionState.Collapsed */;\n            contentEl.style.removeProperty('max-height');\n          });\n        });\n      } else {\n        this.state = 1 /* AccordionState.Collapsed */;\n      }\n    };\n    /**\n     * Helper function to determine if\n     * something should animate.\n     * If prefers-reduced-motion is set\n     * then we should not animate, regardless\n     * of what is set in the config.\n     */\n    this.shouldAnimate = () => {\n      if (typeof window === 'undefined') {\n        return false;\n      }\n      const prefersReducedMotion = matchMedia('(prefers-reduced-motion: reduce)').matches;\n      if (prefersReducedMotion) {\n        return false;\n      }\n      const animated = config.get('animated', true);\n      if (!animated) {\n        return false;\n      }\n      if (this.accordionGroupEl && !this.accordionGroupEl.animated) {\n        return false;\n      }\n      return true;\n    };\n    this.updateState = async (initialUpdate = false) => {\n      const accordionGroup = this.accordionGroupEl;\n      const accordionValue = this.value;\n      if (!accordionGroup) {\n        return;\n      }\n      const value = accordionGroup.value;\n      const shouldExpand = Array.isArray(value) ? value.includes(accordionValue) : value === accordionValue;\n      if (shouldExpand) {\n        this.expandAccordion(initialUpdate);\n        this.isNext = this.isPrevious = false;\n      } else {\n        this.collapseAccordion(initialUpdate);\n        /**\n         * When using popout or inset,\n         * the collapsed accordion items\n         * may need additional border radius\n         * applied. Check to see if the\n         * next or previous accordion is selected.\n         */\n        const nextAccordion = this.getNextSibling();\n        const nextAccordionValue = nextAccordion === null || nextAccordion === void 0 ? void 0 : nextAccordion.value;\n        if (nextAccordionValue !== undefined) {\n          this.isPrevious = Array.isArray(value) ? value.includes(nextAccordionValue) : value === nextAccordionValue;\n        }\n        const previousAccordion = this.getPreviousSibling();\n        const previousAccordionValue = previousAccordion === null || previousAccordion === void 0 ? void 0 : previousAccordion.value;\n        if (previousAccordionValue !== undefined) {\n          this.isNext = Array.isArray(value) ? value.includes(previousAccordionValue) : value === previousAccordionValue;\n        }\n      }\n    };\n    this.getNextSibling = () => {\n      if (!this.el) {\n        return;\n      }\n      const nextSibling = this.el.nextElementSibling;\n      if ((nextSibling === null || nextSibling === void 0 ? void 0 : nextSibling.tagName) !== 'ION-ACCORDION') {\n        return;\n      }\n      return nextSibling;\n    };\n    this.getPreviousSibling = () => {\n      if (!this.el) {\n        return;\n      }\n      const previousSibling = this.el.previousElementSibling;\n      if ((previousSibling === null || previousSibling === void 0 ? void 0 : previousSibling.tagName) !== 'ION-ACCORDION') {\n        return;\n      }\n      return previousSibling;\n    };\n  }\n  valueChanged() {\n    this.updateState();\n  }\n  connectedCallback() {\n    var _a;\n    const accordionGroupEl = this.accordionGroupEl = (_a = this.el) === null || _a === void 0 ? void 0 : _a.closest('ion-accordion-group');\n    if (accordionGroupEl) {\n      this.updateState(true);\n      addEventListener(accordionGroupEl, 'ionValueChange', this.updateListener);\n    }\n  }\n  disconnectedCallback() {\n    const accordionGroupEl = this.accordionGroupEl;\n    if (accordionGroupEl) {\n      removeEventListener(accordionGroupEl, 'ionValueChange', this.updateListener);\n    }\n  }\n  componentDidLoad() {\n    this.setItemDefaults();\n    this.slotToggleIcon();\n    /**\n     * We need to wait a tick because we\n     * just set ionItem.button = true and\n     * the button has not have been rendered yet.\n     */\n    raf(() => {\n      /**\n       * Set aria label on button inside of ion-item\n       * once the inner content has been rendered.\n       */\n      const expanded = this.state === 4 /* AccordionState.Expanded */ || this.state === 8 /* AccordionState.Expanding */;\n      this.setAria(expanded);\n    });\n  }\n  toggleExpanded() {\n    const {\n      accordionGroupEl,\n      disabled,\n      readonly,\n      value,\n      state\n    } = this;\n    if (disabled || readonly) return;\n    if (accordionGroupEl) {\n      /**\n       * Because the accordion group may or may\n       * not allow multiple accordions open, we\n       * need to request the toggling of this\n       * accordion and the accordion group will\n       * make the decision on whether or not\n       * to allow it.\n       */\n      const expand = state === 1 /* AccordionState.Collapsed */ || state === 2 /* AccordionState.Collapsing */;\n      accordionGroupEl.requestAccordionToggle(value, expand);\n    }\n  }\n  render() {\n    const {\n      disabled,\n      readonly\n    } = this;\n    const mode = getIonMode(this);\n    const expanded = this.state === 4 /* AccordionState.Expanded */ || this.state === 8 /* AccordionState.Expanding */;\n    const headerPart = expanded ? 'header expanded' : 'header';\n    const contentPart = expanded ? 'content expanded' : 'content';\n    this.setAria(expanded);\n    return h(Host, {\n      key: '073e1d02c18dcbc20c68648426e87c14750c031d',\n      class: {\n        [mode]: true,\n        'accordion-expanding': this.state === 8 /* AccordionState.Expanding */,\n        'accordion-expanded': this.state === 4 /* AccordionState.Expanded */,\n        'accordion-collapsing': this.state === 2 /* AccordionState.Collapsing */,\n        'accordion-collapsed': this.state === 1 /* AccordionState.Collapsed */,\n        'accordion-next': this.isNext,\n        'accordion-previous': this.isPrevious,\n        'accordion-disabled': disabled,\n        'accordion-readonly': readonly,\n        'accordion-animated': this.shouldAnimate()\n      }\n    }, h(\"div\", {\n      key: '9b4cf326de8bb6b4033992903c0c1bfd7eea9bcc',\n      onClick: () => this.toggleExpanded(),\n      id: \"header\",\n      part: headerPart,\n      \"aria-controls\": \"content\",\n      ref: headerEl => this.headerEl = headerEl\n    }, h(\"slot\", {\n      key: '464c32a37f64655eacf4218284214f5f30b14a1e',\n      name: \"header\"\n    })), h(\"div\", {\n      key: '8bb52e6a62d7de0106b253201a89a32e79d9a594',\n      id: \"content\",\n      part: contentPart,\n      role: \"region\",\n      \"aria-labelledby\": \"header\",\n      ref: contentEl => this.contentEl = contentEl\n    }, h(\"div\", {\n      key: '1d9dfd952ad493754aaeea7a8f625b33c2dd90a0',\n      id: \"content-wrapper\",\n      ref: contentElWrapper => this.contentElWrapper = contentElWrapper\n    }, h(\"slot\", {\n      key: '970dfbc55a612d739d0ca3b7b1a08e5c96d0c479',\n      name: \"content\"\n    }))));\n  }\n  static get delegatesFocus() {\n    return true;\n  }\n  get el() {\n    return getElement(this);\n  }\n  static get watchers() {\n    return {\n      \"value\": [\"valueChanged\"]\n    };\n  }\n};\nlet accordionIds = 0;\nAccordion.style = {\n  ios: accordionIosCss,\n  md: accordionMdCss\n};\nconst accordionGroupIosCss = \":host{display:block}:host(.accordion-group-expand-inset){-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px;margin-top:16px;margin-bottom:16px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){border-bottom:none}\";\nconst accordionGroupMdCss = \":host{display:block}:host(.accordion-group-expand-inset){-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px;margin-top:16px;margin-bottom:16px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion){-webkit-box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){margin-left:0;margin-right:0;margin-top:16px;margin-bottom:16px;border-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-previous){border-end-end-radius:6px;border-end-start-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-next){border-start-start-radius:6px;border-start-end-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion):first-of-type{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}\";\nconst AccordionGroup = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.ionValueChange = createEvent(this, \"ionValueChange\", 7);\n    /**\n     * If `true`, all accordions inside of the\n     * accordion group will animate when expanding\n     * or collapsing.\n     */\n    this.animated = true;\n    /**\n     * If `true`, the accordion group cannot be interacted with.\n     */\n    this.disabled = false;\n    /**\n     * If `true`, the accordion group cannot be interacted with,\n     * but does not alter the opacity.\n     */\n    this.readonly = false;\n    /**\n     * Describes the expansion behavior for each accordion.\n     * Possible values are `\"compact\"` and `\"inset\"`.\n     * Defaults to `\"compact\"`.\n     */\n    this.expand = 'compact';\n  }\n  valueChanged() {\n    const {\n      value,\n      multiple\n    } = this;\n    if (!multiple && Array.isArray(value)) {\n      /**\n       * We do some processing on the `value` array so\n       * that it looks more like an array when logged to\n       * the console.\n       * Example given ['a', 'b']\n       * Default toString() behavior: a,b\n       * Custom behavior: ['a', 'b']\n       */\n      printIonWarning(`[ion-accordion-group] - An array of values was passed, but multiple is \"false\". This is incorrect usage and may result in unexpected behaviors. To dismiss this warning, pass a string to the \"value\" property when multiple=\"false\".\n\n  Value Passed: [${value.map(v => `'${v}'`).join(', ')}]\n`, this.el);\n    }\n    /**\n     * Do not use `value` here as that will be\n     * not account for the adjustment we make above.\n     */\n    this.ionValueChange.emit({\n      value: this.value\n    });\n  }\n  async disabledChanged() {\n    const {\n      disabled\n    } = this;\n    const accordions = await this.getAccordions();\n    for (const accordion of accordions) {\n      accordion.disabled = disabled;\n    }\n  }\n  async readonlyChanged() {\n    const {\n      readonly\n    } = this;\n    const accordions = await this.getAccordions();\n    for (const accordion of accordions) {\n      accordion.readonly = readonly;\n    }\n  }\n  async onKeydown(ev) {\n    const activeElement = document.activeElement;\n    if (!activeElement) {\n      return;\n    }\n    /**\n     * Make sure focus is in the header, not the body, of the accordion. This ensures\n     * that if there are any interactable elements in the body, their keyboard\n     * interaction doesn't get stolen by the accordion. Example: using up/down keys\n     * in ion-textarea.\n     */\n    const activeAccordionHeader = activeElement.closest('ion-accordion [slot=\"header\"]');\n    if (!activeAccordionHeader) {\n      return;\n    }\n    const accordionEl = activeElement.tagName === 'ION-ACCORDION' ? activeElement : activeElement.closest('ion-accordion');\n    if (!accordionEl) {\n      return;\n    }\n    const closestGroup = accordionEl.closest('ion-accordion-group');\n    if (closestGroup !== this.el) {\n      return;\n    }\n    // If the active accordion is not in the current array of accordions, do not do anything\n    const accordions = await this.getAccordions();\n    const startingIndex = accordions.findIndex(a => a === accordionEl);\n    if (startingIndex === -1) {\n      return;\n    }\n    let accordion;\n    if (ev.key === 'ArrowDown') {\n      accordion = this.findNextAccordion(accordions, startingIndex);\n    } else if (ev.key === 'ArrowUp') {\n      accordion = this.findPreviousAccordion(accordions, startingIndex);\n    } else if (ev.key === 'Home') {\n      accordion = accordions[0];\n    } else if (ev.key === 'End') {\n      accordion = accordions[accordions.length - 1];\n    }\n    if (accordion !== undefined && accordion !== activeElement) {\n      accordion.focus();\n    }\n  }\n  async componentDidLoad() {\n    if (this.disabled) {\n      this.disabledChanged();\n    }\n    if (this.readonly) {\n      this.readonlyChanged();\n    }\n    /**\n     * When binding values in frameworks such as Angular\n     * it is possible for the value to be set after the Web Component\n     * initializes but before the value watcher is set up in Stencil.\n     * As a result, the watcher callback may not be fired.\n     * We work around this by manually calling the watcher\n     * callback when the component has loaded and the watcher\n     * is configured.\n     */\n    this.valueChanged();\n  }\n  /**\n   * Sets the value property and emits ionChange.\n   * This should only be called when the user interacts\n   * with the accordion and not for any update\n   * to the value property. The exception is when\n   * the app sets the value of a single-select\n   * accordion group to an array.\n   */\n  setValue(accordionValue) {\n    const value = this.value = accordionValue;\n    this.ionChange.emit({\n      value\n    });\n  }\n  /**\n   * This method is used to ensure that the value\n   * of ion-accordion-group is being set in a valid\n   * way. This method should only be called in\n   * response to a user generated action.\n   * @internal\n   */\n  async requestAccordionToggle(accordionValue, accordionExpand) {\n    const {\n      multiple,\n      value,\n      readonly,\n      disabled\n    } = this;\n    if (readonly || disabled) {\n      return;\n    }\n    if (accordionExpand) {\n      /**\n       * If group accepts multiple values\n       * check to see if value is already in\n       * in values array. If not, add it\n       * to the array.\n       */\n      if (multiple) {\n        const groupValue = value !== null && value !== void 0 ? value : [];\n        const processedValue = Array.isArray(groupValue) ? groupValue : [groupValue];\n        const valueExists = processedValue.find(v => v === accordionValue);\n        if (valueExists === undefined && accordionValue !== undefined) {\n          this.setValue([...processedValue, accordionValue]);\n        }\n      } else {\n        this.setValue(accordionValue);\n      }\n    } else {\n      /**\n       * If collapsing accordion, either filter the value\n       * out of the values array or unset the value.\n       */\n      if (multiple) {\n        const groupValue = value !== null && value !== void 0 ? value : [];\n        const processedValue = Array.isArray(groupValue) ? groupValue : [groupValue];\n        this.setValue(processedValue.filter(v => v !== accordionValue));\n      } else {\n        this.setValue(undefined);\n      }\n    }\n  }\n  findNextAccordion(accordions, startingIndex) {\n    const nextAccordion = accordions[startingIndex + 1];\n    if (nextAccordion === undefined) {\n      return accordions[0];\n    }\n    return nextAccordion;\n  }\n  findPreviousAccordion(accordions, startingIndex) {\n    const prevAccordion = accordions[startingIndex - 1];\n    if (prevAccordion === undefined) {\n      return accordions[accordions.length - 1];\n    }\n    return prevAccordion;\n  }\n  /**\n   * @internal\n   */\n  async getAccordions() {\n    return Array.from(this.el.querySelectorAll(':scope > ion-accordion'));\n  }\n  render() {\n    const {\n      disabled,\n      readonly,\n      expand\n    } = this;\n    const mode = getIonMode(this);\n    return h(Host, {\n      key: 'd1a79a93179474fbba66fcf11a92f4871dacc975',\n      class: {\n        [mode]: true,\n        'accordion-group-disabled': disabled,\n        'accordion-group-readonly': readonly,\n        [`accordion-group-expand-${expand}`]: true\n      },\n      role: \"presentation\"\n    }, h(\"slot\", {\n      key: 'e6b8954b686d1fbb4fc92adb07fddc97a24b0a31'\n    }));\n  }\n  get el() {\n    return getElement(this);\n  }\n  static get watchers() {\n    return {\n      \"value\": [\"valueChanged\"],\n      \"disabled\": [\"disabledChanged\"],\n      \"readonly\": [\"readonlyChanged\"]\n    };\n  }\n};\nAccordionGroup.style = {\n  ios: accordionGroupIosCss,\n  md: accordionGroupMdCss\n};\nexport { Accordion as ion_accordion, AccordionGroup as ion_accordion_group };"],"mappings":"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","names":[],"x_google_ignoreList":[0]}