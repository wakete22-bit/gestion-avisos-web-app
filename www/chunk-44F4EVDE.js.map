{
  "version": 3,
  "sources": ["src/app/core/services/materiales-trabajo.service.ts", "src/app/core/services/trabajos.service.ts", "src/app/core/services/flujo-avisos.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { SupabaseClient } from '@supabase/supabase-js';\r\nimport { SupabaseClientService } from './supabase-client.service';\r\nimport { Observable, BehaviorSubject, from, forkJoin } from 'rxjs';\r\nimport { map, tap, catchError, switchMap } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { MaterialTrabajo } from '../../modules/avisos/models/trabajo-realizado.model';\r\nimport { InventarioService } from '../../modules/inventario/services/inventario.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MaterialesTrabajoService {\r\n  private supabase: SupabaseClient;\r\n  private materialesSubject = new BehaviorSubject<MaterialTrabajo[]>([]);\r\n  public materiales$ = this.materialesSubject.asObservable();\r\n\r\n  constructor(\r\n    private inventarioService: InventarioService,\r\n    private supabaseClientService: SupabaseClientService\r\n  ) {\r\n    this.supabase = this.supabaseClientService.getClient();\r\n  }\r\n\r\n  /**\r\n   * Obtiene los materiales de un trabajo específico\r\n   */\r\n  getMaterialesTrabajo(trabajoId: string): Observable<MaterialTrabajo[]> {\r\n    return from(\r\n      this.supabase\r\n        .from('materiales_trabajo')\r\n        .select(`\r\n          *,\r\n          material:inventario(*)\r\n        `)\r\n        .eq('trabajo_id', trabajoId)\r\n        .order('id', { ascending: true })\r\n    ).pipe(\r\n      map(({ data, error }) => {\r\n        if (error) throw error;\r\n        const materiales = data as MaterialTrabajo[];\r\n        this.materialesSubject.next(materiales);\r\n        return materiales;\r\n      }),\r\n      catchError(error => {\r\n        console.error('Error al obtener materiales del trabajo:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Añade materiales a un trabajo y descuenta del inventario\r\n   */\r\n  agregarMateriales(trabajoId: string, materiales: Omit<MaterialTrabajo, 'id' | 'trabajo_id'>[]): Observable<MaterialTrabajo[]> {\r\n    if (materiales.length === 0) {\r\n      return from([[]]);\r\n    }\r\n\r\n    const materialesInsert = materiales.map(material => ({\r\n      trabajo_id: trabajoId,\r\n      material_id: material.material_id,\r\n      cantidad_utilizada: material.cantidad_utilizada,\r\n      precio_neto_al_momento: material.precio_neto_al_momento\r\n    }));\r\n\r\n    return from(\r\n      this.supabase\r\n        .from('materiales_trabajo')\r\n        .insert(materialesInsert)\r\n        .select(`\r\n          *,\r\n          material:inventario(*)\r\n        `)\r\n    ).pipe(\r\n      switchMap(({ data, error }) => {\r\n        if (error) throw error;\r\n        const nuevosMateriales = data as MaterialTrabajo[];\r\n        \r\n        // Actualizar el estado local\r\n        const materialesActuales = this.materialesSubject.value;\r\n        this.materialesSubject.next([...materialesActuales, ...nuevosMateriales]);\r\n        \r\n        // Descontar materiales del inventario\r\n        const actualizacionesStock = nuevosMateriales.map(material => {\r\n          const nuevaCantidad = material.material.cantidad_disponible - material.cantidad_utilizada;\r\n          return this.inventarioService.actualizarStock(material.material_id, nuevaCantidad);\r\n        });\r\n        \r\n        return forkJoin(actualizacionesStock).pipe(\r\n          map(() => nuevosMateriales)\r\n        );\r\n      }),\r\n      catchError(error => {\r\n        console.error('Error al agregar materiales al trabajo:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Actualiza un material específico y ajusta el inventario\r\n   */\r\n  actualizarMaterial(materialId: string, material: Partial<MaterialTrabajo>): Observable<MaterialTrabajo> {\r\n    // Primero obtener el material actual para calcular la diferencia\r\n    return from(\r\n      this.supabase\r\n        .from('materiales_trabajo')\r\n        .select(`\r\n          *,\r\n          material:inventario(*)\r\n        `)\r\n        .eq('id', materialId)\r\n        .single()\r\n    ).pipe(\r\n      switchMap(({ data: materialActual, error: errorActual }) => {\r\n        if (errorActual) throw errorActual;\r\n        \r\n        const materialActualData = materialActual as MaterialTrabajo;\r\n        const cantidadAnterior = materialActualData.cantidad_utilizada;\r\n        const cantidadNueva = material.cantidad_utilizada || cantidadAnterior;\r\n        const diferencia = cantidadNueva - cantidadAnterior;\r\n        \r\n        const datosActualizados = {\r\n          cantidad_utilizada: material.cantidad_utilizada,\r\n          precio_neto_al_momento: material.precio_neto_al_momento\r\n        };\r\n\r\n        return from(\r\n          this.supabase\r\n            .from('materiales_trabajo')\r\n            .update(datosActualizados)\r\n            .eq('id', materialId)\r\n            .select(`\r\n              *,\r\n              material:inventario(*)\r\n            `)\r\n            .single()\r\n        ).pipe(\r\n          switchMap(({ data, error }) => {\r\n            if (error) throw error;\r\n            \r\n            const materialActualizado = data as MaterialTrabajo;\r\n            \r\n            // Actualizar el estado local\r\n            const materialesActuales = this.materialesSubject.value;\r\n            const index = materialesActuales.findIndex(m => m.id === materialId);\r\n            if (index !== -1) {\r\n              materialesActuales[index] = materialActualizado;\r\n              this.materialesSubject.next([...materialesActuales]);\r\n            }\r\n            \r\n            // Ajustar el inventario si la cantidad cambió\r\n            if (diferencia !== 0) {\r\n              const nuevaCantidad = materialActualData.material.cantidad_disponible - diferencia;\r\n              return this.inventarioService.actualizarStock(materialActualData.material_id, nuevaCantidad).pipe(\r\n                map(() => materialActualizado)\r\n              );\r\n            }\r\n            \r\n            return from([materialActualizado]);\r\n          })\r\n        );\r\n      }),\r\n      catchError(error => {\r\n        console.error('Error al actualizar material:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Elimina un material del trabajo y devuelve al inventario\r\n   */\r\n  eliminarMaterial(materialId: string): Observable<void> {\r\n    // Primero obtener el material para saber cuánto devolver al inventario\r\n    return from(\r\n      this.supabase\r\n        .from('materiales_trabajo')\r\n        .select(`\r\n          *,\r\n          material:inventario(*)\r\n        `)\r\n        .eq('id', materialId)\r\n        .single()\r\n    ).pipe(\r\n      switchMap(({ data: material, error: errorMaterial }) => {\r\n        if (errorMaterial) throw errorMaterial;\r\n        \r\n        const materialData = material as MaterialTrabajo;\r\n        \r\n        return from(\r\n          this.supabase\r\n            .from('materiales_trabajo')\r\n            .delete()\r\n            .eq('id', materialId)\r\n        ).pipe(\r\n          switchMap(({ error }) => {\r\n            if (error) throw error;\r\n            \r\n            // Actualizar el estado local\r\n            const materialesActuales = this.materialesSubject.value;\r\n            const materialesFiltrados = materialesActuales.filter(m => m.id !== materialId);\r\n            this.materialesSubject.next(materialesFiltrados);\r\n            \r\n            // Devolver la cantidad al inventario\r\n            const nuevaCantidad = materialData.material.cantidad_disponible + materialData.cantidad_utilizada;\r\n            return this.inventarioService.actualizarStock(materialData.material_id, nuevaCantidad).pipe(\r\n              map(() => {})\r\n            );\r\n          })\r\n        );\r\n      }),\r\n      catchError(error => {\r\n        console.error('Error al eliminar material:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Elimina todos los materiales de un trabajo y los devuelve al inventario\r\n   */\r\n  eliminarMaterialesTrabajo(trabajoId: string): Observable<void> {\r\n    // Primero obtener todos los materiales del trabajo\r\n    return from(\r\n      this.supabase\r\n        .from('materiales_trabajo')\r\n        .select(`\r\n          *,\r\n          material:inventario(*)\r\n        `)\r\n        .eq('trabajo_id', trabajoId)\r\n    ).pipe(\r\n      switchMap(({ data: materiales, error: errorMateriales }) => {\r\n        if (errorMateriales) throw errorMateriales;\r\n        \r\n        const materialesData = materiales as MaterialTrabajo[];\r\n        \r\n        return from(\r\n          this.supabase\r\n            .from('materiales_trabajo')\r\n            .delete()\r\n            .eq('trabajo_id', trabajoId)\r\n        ).pipe(\r\n          switchMap(({ error }) => {\r\n            if (error) throw error;\r\n            \r\n            // Actualizar el estado local\r\n            const materialesActuales = this.materialesSubject.value;\r\n            const materialesFiltrados = materialesActuales.filter(m => m.trabajo_id !== trabajoId);\r\n            this.materialesSubject.next(materialesFiltrados);\r\n            \r\n            // Devolver todas las cantidades al inventario\r\n            if (materialesData.length > 0) {\r\n              const actualizacionesStock = materialesData.map(material => {\r\n                const nuevaCantidad = material.material.cantidad_disponible + material.cantidad_utilizada;\r\n                return this.inventarioService.actualizarStock(material.material_id, nuevaCantidad);\r\n              });\r\n              \r\n              return forkJoin(actualizacionesStock).pipe(\r\n                map(() => {})\r\n              );\r\n            }\r\n\r\n            return from([undefined]);\r\n          })\r\n        );\r\n      }),\r\n      catchError(error => {\r\n        console.error('Error al eliminar materiales del trabajo:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Calcula el costo total de materiales de un trabajo\r\n   */\r\n  calcularCostoMateriales(materiales: MaterialTrabajo[]): number {\r\n    return materiales.reduce((total, material) => {\r\n      return total + (material.cantidad_utilizada * material.precio_neto_al_momento);\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * Obtiene el valor actual de materiales\r\n   */\r\n  getMaterialesActuales(): MaterialTrabajo[] {\r\n    return this.materialesSubject.value;\r\n  }\r\n\r\n  /**\r\n   * Limpia el estado de materiales\r\n   */\r\n  limpiarMateriales(): void {\r\n    this.materialesSubject.next([]);\r\n  }\r\n} ", "import { Injectable } from '@angular/core';\r\nimport { SupabaseClient } from '@supabase/supabase-js';\r\nimport { Observable, BehaviorSubject, from, forkJoin } from 'rxjs';\r\nimport { map, tap, catchError, switchMap } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\nimport {\r\n    TrabajoRealizado,\r\n    TrabajoResponse,\r\n    CrearTrabajoRequest,\r\n    ActualizarTrabajoRequest,\r\n    TrabajoCompleto,\r\n    MaterialTrabajo\r\n} from '../../modules/avisos/models/trabajo-realizado.model';\r\nimport { MaterialesTrabajoService } from './materiales-trabajo.service';\r\nimport { SupabaseClientService } from './supabase-client.service';\r\nimport { DataUpdateService } from './data-update.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TrabajosService {\r\n    private supabase: SupabaseClient;\r\n    private trabajosSubject = new BehaviorSubject<TrabajoRealizado[]>([]);\r\n    public trabajos$ = this.trabajosSubject.asObservable();\r\n\r\n    constructor(\r\n        private materialesTrabajoService: MaterialesTrabajoService,\r\n        private supabaseClientService: SupabaseClientService,\r\n        private dataUpdateService: DataUpdateService\r\n    ) {\r\n        this.supabase = this.supabaseClientService.getClient();\r\n    }\r\n\r\n    /**\r\n     * Obtiene los trabajos realizados de un aviso\r\n     */\r\n    getTrabajosAviso(\r\n        avisoId: string,\r\n        pagina: number = 1,\r\n        porPagina: number = 10\r\n    ): Observable<TrabajoResponse> {\r\n        const desde = (pagina - 1) * porPagina;\r\n\r\n        return from(\r\n            this.supabase\r\n                .from('trabajos_realizados')\r\n                .select('*', { count: 'exact' })\r\n                .eq('aviso_id', avisoId)\r\n                .order('fecha_trabajo', { ascending: false })\r\n                .range(desde, desde + porPagina - 1)\r\n        ).pipe(\r\n            map(({ data, error, count }) => {\r\n                if (error) throw error;\r\n\r\n                const trabajos = data as TrabajoRealizado[];\r\n                this.trabajosSubject.next(trabajos);\r\n\r\n                return {\r\n                    trabajos,\r\n                    total: count || 0,\r\n                    pagina,\r\n                    por_pagina: porPagina\r\n                };\r\n            }),\r\n            catchError(error => {\r\n                console.error('Error al obtener trabajos:', error);\r\n                throw error;\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Obtiene un trabajo por su ID con sus materiales\r\n     */\r\n    getTrabajo(id: string): Observable<TrabajoCompleto> {\r\n        return from(\r\n            this.supabase\r\n                .from('trabajos_realizados')\r\n                .select('*')\r\n                .eq('id', id)\r\n                .single()\r\n        ).pipe(\r\n            switchMap(({ data: trabajo, error: trabajoError }) => {\r\n                if (trabajoError) throw trabajoError;\r\n\r\n                const trabajoData = trabajo as TrabajoRealizado;\r\n\r\n                // Obtener los materiales del trabajo\r\n                return this.materialesTrabajoService.getMaterialesTrabajo(id).pipe(\r\n                    map(materiales => ({\r\n                        trabajo: trabajoData,\r\n                        materiales\r\n                    }))\r\n                );\r\n            }),\r\n            catchError(error => {\r\n                console.error('Error al obtener trabajo:', error);\r\n                throw error;\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Crea un nuevo trabajo realizado con materiales\r\n     */\r\n    crearTrabajo(trabajo: CrearTrabajoRequest): Observable<TrabajoCompleto> {\r\n        const { materiales, ...trabajoData } = trabajo;\r\n        \r\n        const trabajoInsert = {\r\n            ...trabajoData,\r\n            fecha_creacion: new Date().toISOString(),\r\n            fecha_actualizacion: new Date().toISOString()\r\n        };\r\n\r\n        return from(\r\n            this.supabase\r\n                .from('trabajos_realizados')\r\n                .insert([trabajoInsert])\r\n                .select()\r\n                .single()\r\n        ).pipe(\r\n            switchMap(({ data: trabajoCreado, error: trabajoError }) => {\r\n                if (trabajoError) throw trabajoError;\r\n\r\n                const nuevoTrabajo = trabajoCreado as TrabajoRealizado;\r\n\r\n                // Actualizar el estado local\r\n                const trabajosActuales = this.trabajosSubject.value;\r\n                this.trabajosSubject.next([nuevoTrabajo, ...trabajosActuales]);\r\n\r\n                // Notificar creación y limpiar cache\r\n                this.dataUpdateService.notifyCreated('trabajos');\r\n\r\n                // Si no hay materiales, devolver solo el trabajo\r\n                if (!materiales || materiales.length === 0) {\r\n                    return from([{\r\n                        trabajo: nuevoTrabajo,\r\n                        materiales: []\r\n                    }]);\r\n                }\r\n\r\n                // Agregar los materiales al trabajo\r\n                return this.materialesTrabajoService.agregarMateriales(nuevoTrabajo.id!, materiales).pipe(\r\n                    map(materialesCreados => ({\r\n                        trabajo: nuevoTrabajo,\r\n                        materiales: materialesCreados\r\n                    }))\r\n                );\r\n            }),\r\n            catchError(error => {\r\n                console.error('Error al crear trabajo:', error);\r\n                throw error;\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Actualiza un trabajo existente\r\n     */\r\n    actualizarTrabajo(id: string, trabajo: ActualizarTrabajoRequest): Observable<TrabajoCompleto> {\r\n        const { materiales, ...trabajoData } = trabajo;\r\n        \r\n        const datosActualizados = {\r\n            ...trabajoData,\r\n            fecha_actualizacion: new Date().toISOString()\r\n        };\r\n\r\n        return from(\r\n            this.supabase\r\n                .from('trabajos_realizados')\r\n                .update(datosActualizados)\r\n                .eq('id', id)\r\n                .select()\r\n                .single()\r\n        ).pipe(\r\n            switchMap(({ data: trabajoActualizado, error: trabajoError }) => {\r\n                if (trabajoError) throw trabajoError;\r\n\r\n                const trabajo = trabajoActualizado as TrabajoRealizado;\r\n\r\n                // Actualizar el estado local\r\n                const trabajosActuales = this.trabajosSubject.value;\r\n                const index = trabajosActuales.findIndex(t => t.id === id);\r\n                if (index !== -1) {\r\n                    trabajosActuales[index] = trabajo;\r\n                    this.trabajosSubject.next([...trabajosActuales]);\r\n                }\r\n\r\n                // Notificar actualización y limpiar cache\r\n                this.dataUpdateService.notifyUpdated('trabajos');\r\n\r\n                // Si no hay materiales para actualizar, devolver solo el trabajo\r\n                if (!materiales) {\r\n                    return this.getTrabajo(id);\r\n                }\r\n\r\n                // Eliminar materiales existentes y crear nuevos\r\n                return this.materialesTrabajoService.eliminarMaterialesTrabajo(id).pipe(\r\n                    switchMap(() => {\r\n                        if (materiales.length === 0) {\r\n                            return from([{\r\n                                trabajo,\r\n                                materiales: []\r\n                            }]);\r\n                        }\r\n\r\n                        return this.materialesTrabajoService.agregarMateriales(id, materiales).pipe(\r\n                            map(materialesCreados => ({\r\n                                trabajo,\r\n                                materiales: materialesCreados\r\n                            }))\r\n                        );\r\n                    })\r\n                );\r\n            }),\r\n            catchError(error => {\r\n                console.error('Error al actualizar trabajo:', error);\r\n                throw error;\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Elimina un trabajo y sus materiales\r\n     */\r\n    eliminarTrabajo(id: string): Observable<void> {\r\n        // Primero eliminar los materiales del trabajo\r\n        return this.materialesTrabajoService.eliminarMaterialesTrabajo(id).pipe(\r\n            switchMap(() => {\r\n                // Luego eliminar el trabajo\r\n                return from(\r\n                    this.supabase\r\n                        .from('trabajos_realizados')\r\n                        .delete()\r\n                        .eq('id', id)\r\n                );\r\n            }),\r\n            map(({ error }) => {\r\n                if (error) throw error;\r\n\r\n                const trabajosActuales = this.trabajosSubject.value;\r\n                const trabajosFiltrados = trabajosActuales.filter(t => t.id !== id);\r\n                this.trabajosSubject.next(trabajosFiltrados);\r\n\r\n                // Notificar eliminación y limpiar cache\r\n                this.dataUpdateService.notifyDeleted('trabajos');\r\n            }),\r\n            catchError(error => {\r\n                console.error('Error al eliminar trabajo:', error);\r\n                throw error;\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Obtiene estadísticas de trabajos para un aviso\r\n     */\r\n    getEstadisticasTrabajos(avisoId: string): Observable<any> {\r\n        return from(\r\n            this.supabase\r\n                .from('trabajos_realizados')\r\n                .select('*')\r\n                .eq('aviso_id', avisoId)\r\n        ).pipe(\r\n            map(({ data, error }) => {\r\n                if (error) throw error;\r\n\r\n                const trabajos = data as TrabajoRealizado[];\r\n                \r\n                const estadisticas = {\r\n                    totalTrabajos: trabajos.length,\r\n                    trabajosCompletados: trabajos.filter(t => t.estado === 'Completado').length,\r\n                    trabajosPendientes: trabajos.filter(t => t.estado === 'Pendiente').length,\r\n                    trabajosEnCurso: trabajos.filter(t => t.estado === 'En curso').length,\r\n                    trabajosCancelados: trabajos.filter(t => t.estado === 'Cancelado').length,\r\n                    totalHoras: trabajos.reduce((total, trabajo) => {\r\n                        const inicio = new Date(`2000-01-01T${trabajo.hora_inicio}`);\r\n                        const fin = new Date(`2000-01-01T${trabajo.hora_fin}`);\r\n                        const horas = (fin.getTime() - inicio.getTime()) / (1000 * 60 * 60);\r\n                        return total + Math.max(0, horas);\r\n                    }, 0)\r\n                };\r\n\r\n                return estadisticas;\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Obtiene el valor actual de trabajos\r\n     */\r\n    getTrabajosActuales(): TrabajoRealizado[] {\r\n        return this.trabajosSubject.value;\r\n    }\r\n\r\n    /**\r\n     * Limpia el estado de trabajos\r\n     */\r\n    limpiarTrabajos(): void {\r\n        this.trabajosSubject.next([]);\r\n        this.materialesTrabajoService.limpiarMateriales();\r\n    }\r\n\r\n    /**\r\n     * Actualiza el estado del trabajo cuando se crea un albarán\r\n     */\r\n    actualizarEstadoTrabajo(id: string, nuevoEstado: string, albaranId?: string): Observable<TrabajoRealizado> {\r\n        const datosActualizados: any = {\r\n            estado: nuevoEstado,\r\n            fecha_actualizacion: new Date().toISOString()\r\n        };\r\n\r\n        // Si se proporciona un albaran_id, actualizarlo también\r\n        if (albaranId) {\r\n            datosActualizados.albaran_id = albaranId;\r\n        }\r\n\r\n        return from(\r\n            this.supabase\r\n                .from('trabajos_realizados')\r\n                .update(datosActualizados)\r\n                .eq('id', id)\r\n                .select()\r\n                .single()\r\n        ).pipe(\r\n            map(({ data, error }) => {\r\n                if (error) throw error;\r\n\r\n                const trabajo = data as TrabajoRealizado;\r\n\r\n                // Actualizar el estado local\r\n                const trabajosActuales = this.trabajosSubject.value;\r\n                const index = trabajosActuales.findIndex(t => t.id === id);\r\n                if (index !== -1) {\r\n                    trabajosActuales[index] = trabajo;\r\n                    this.trabajosSubject.next([...trabajosActuales]);\r\n                }\r\n\r\n                // Notificar actualización y limpiar cache\r\n                this.dataUpdateService.notifyUpdated('trabajos');\r\n\r\n                return trabajo;\r\n            }),\r\n            catchError(error => {\r\n                console.error('Error al actualizar estado del trabajo:', error);\r\n                throw error;\r\n            })\r\n        );\r\n    }\r\n} ", "import { Injectable } from '@angular/core';\r\nimport { Observable, forkJoin, from, of } from 'rxjs';\r\nimport { map, switchMap, tap, catchError } from 'rxjs/operators';\r\nimport { AvisosService } from './avisos.service';\r\nimport { FacturasService } from '../../modules/facturas/services/facturas.service';\r\nimport { PresupuestosService } from '../../modules/presupuestos/services/presupuestos.service';\r\nimport { TrabajosService } from './trabajos.service';\r\n\r\nexport interface FlujoEstado {\r\n  avisoId: string;\r\n  estadoActual: string;\r\n  puedeCrearPresupuesto: boolean;\r\n  puedeAprobarPresupuesto: boolean;\r\n  puedeFacturarPresupuesto: boolean;\r\n  puedeFacturarTrabajos: boolean;\r\n  puedeCompletarAviso: boolean;\r\n  resumen: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FlujoAvisosService {\r\n\r\n  constructor(\r\n    private avisosService: AvisosService,\r\n    private facturasService: FacturasService,\r\n    private presupuestosService: PresupuestosService,\r\n    private trabajosService: TrabajosService\r\n  ) {}\r\n\r\n  /**\r\n   * Obtiene el estado actual del flujo para un aviso\r\n   */\r\n  obtenerEstadoFlujo(avisoId: string): Observable<FlujoEstado> {\r\n    return this.avisosService.getResumenCompletoAviso(avisoId).pipe(\r\n      map(resumen => {\r\n        const estado: FlujoEstado = {\r\n          avisoId,\r\n          estadoActual: resumen.estado,\r\n          puedeCrearPresupuesto: this.puedeCrearPresupuesto(resumen),\r\n          puedeAprobarPresupuesto: this.puedeAprobarPresupuesto(resumen),\r\n          puedeFacturarPresupuesto: this.puedeFacturarPresupuesto(resumen),\r\n          puedeFacturarTrabajos: this.puedeFacturarTrabajos(resumen),\r\n          puedeCompletarAviso: this.puedeCompletarAviso(resumen),\r\n          resumen\r\n        };\r\n        \r\n        return estado;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Ejecuta el flujo completo: Presupuesto → Aprobación → Factura\r\n   */\r\n  ejecutarFlujoCompleto(avisoId: string, crearPresupuesto: boolean = true): Observable<any> {\r\n    if (!crearPresupuesto) {\r\n      // Flujo directo: Aviso → Trabajos → Factura\r\n      return this.flujoDirectoSinPresupuesto(avisoId);\r\n    }\r\n    \r\n    // Flujo con presupuesto: Aviso → Presupuesto → Aprobación → Trabajos → Factura\r\n    return this.flujoConPresupuesto(avisoId);\r\n  }\r\n\r\n  /**\r\n   * Flujo directo sin presupuesto\r\n   */\r\n  private flujoDirectoSinPresupuesto(avisoId: string): Observable<any> {\r\n    return this.avisosService.actualizarAviso(avisoId, { \r\n      estado: 'En curso',\r\n      requiere_presupuesto: false \r\n    }).pipe(\r\n      tap(() => console.log('✅ Aviso actualizado para trabajo directo')),\r\n      switchMap(() => this.avisosService.getResumenCompletoAviso(avisoId)),\r\n      map(resumen => ({\r\n        paso: 'flujo_directo_iniciado',\r\n        avisoId,\r\n        mensaje: 'Flujo directo iniciado. El técnico puede comenzar a trabajar.',\r\n        resumen\r\n      }))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Flujo con presupuesto\r\n   */\r\n  private flujoConPresupuesto(avisoId: string): Observable<any> {\r\n    return this.avisosService.actualizarAviso(avisoId, { \r\n      estado: 'Pendiente de presupuesto',\r\n      requiere_presupuesto: true \r\n    }).pipe(\r\n      tap(() => console.log('✅ Aviso marcado como requiere presupuesto')),\r\n      switchMap(() => this.presupuestosService.crearPresupuesto({\r\n        aviso_id: avisoId,\r\n        horas_estimadas: 2, // Estimación por defecto\r\n        total_estimado: 0\r\n      })),\r\n      tap(() => console.log('✅ Presupuesto creado')),\r\n      map(presupuesto => ({\r\n        paso: 'presupuesto_creado',\r\n        avisoId,\r\n        presupuestoId: presupuesto.id,\r\n        mensaje: 'Presupuesto creado. Pendiente de evaluación y aprobación.',\r\n        presupuesto\r\n      }))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Aprueba un presupuesto y cambia el estado del aviso\r\n   */\r\n  aprobarPresupuesto(presupuestoId: string): Observable<any> {\r\n    return this.presupuestosService.cambiarEstado(presupuestoId, 'Completado').pipe(\r\n      switchMap(presupuesto => \r\n        this.avisosService.actualizarAviso(presupuesto.aviso_id, { estado: 'En curso' })\r\n      ),\r\n      tap(() => console.log('✅ Presupuesto aprobado y aviso en curso')),\r\n      map(aviso => ({\r\n        paso: 'presupuesto_aprobado',\r\n        avisoId: aviso.id,\r\n        mensaje: 'Presupuesto aprobado. El técnico puede comenzar a trabajar.',\r\n        aviso\r\n      }))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Convierte un presupuesto aprobado en factura automáticamente\r\n   */\r\n  facturarPresupuesto(presupuestoId: string): Observable<any> {\r\n    return this.facturasService.crearFacturaDesdePresupuesto(presupuestoId).pipe(\r\n      tap(() => console.log('✅ Factura creada desde presupuesto')),\r\n      switchMap(factura => \r\n        this.avisosService.actualizarEstadoAutomatico(factura.factura.aviso_id!).pipe(\r\n          map(() => factura)\r\n        )\r\n      ),\r\n      map(factura => ({\r\n        paso: 'factura_desde_presupuesto',\r\n        avisoId: factura.factura.aviso_id,\r\n        facturaId: factura.factura.id,\r\n        mensaje: 'Factura generada automáticamente desde presupuesto aprobado.',\r\n        factura\r\n      }))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Factura trabajos realizados sin presupuesto\r\n   * Actualizado para el nuevo flujo de albaranes\r\n   */\r\n  facturarTrabajos(avisoId: string): Observable<any> {\r\n    console.log('🔧 Iniciando facturación de trabajos para aviso:', avisoId);\r\n    \r\n    return this.avisosService.getResumenCompletoAviso(avisoId).pipe(\r\n      switchMap(resumen => {\r\n        console.log('🔧 Resumen completo obtenido:', resumen);\r\n        \r\n        if (!resumen.estadisticas.trabajosFinalizados) {\r\n          throw new Error('No hay trabajos finalizados para facturar. Debes crear un albarán primero.');\r\n        }\r\n\r\n        // Validar que TODOS los trabajos tengan albaranes cerrados\r\n        const trabajosSinAlbaranCerrado = resumen.trabajos?.filter((t: any) => \r\n          !t.albaran_id || !t.albaran?.estado_cierre || t.albaran.estado_cierre === 'Otra visita'\r\n        ) || [];\r\n        \r\n        if (trabajosSinAlbaranCerrado.length > 0) {\r\n          const trabajosPendientes = trabajosSinAlbaranCerrado.map((t: any) => \r\n            `Trabajo #${t.id?.substring(0, 8)} (${t.descripcion})`\r\n          ).join(', ');\r\n          \r\n          throw new Error(`No se puede facturar. Los siguientes trabajos no tienen albaranes cerrados: ${trabajosPendientes}. Debes cerrar todos los albaranes antes de facturar.`);\r\n        }\r\n\r\n        console.log('🔧 Cliente del resumen:', resumen.cliente);\r\n        \r\n        const datosFactura = this.convertirDatosAFactura({\r\n          avisoId,\r\n          cliente: resumen.cliente,\r\n          resumen: resumen\r\n        });\r\n\r\n        // Generar número de factura automáticamente\r\n        return this.facturasService.getSiguienteNumero().pipe(\r\n          switchMap(numeroFactura => {\r\n            datosFactura.numero_factura = numeroFactura;\r\n            console.log('🔧 Número de factura generado:', numeroFactura);\r\n            return this.facturasService.crearFactura(datosFactura);\r\n          })\r\n        );\r\n      }),\r\n      tap(() => console.log('✅ Factura creada desde trabajos realizados')),\r\n      switchMap(() => this.avisosService.getResumenCompletoAviso(avisoId)),\r\n      map(resumen => ({\r\n        paso: 'factura_creada_desde_trabajos',\r\n        avisoId,\r\n        mensaje: 'Factura creada exitosamente desde trabajos realizados',\r\n        resumen\r\n      }))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Verifica si una factura puede ser marcada como \"Completado\"\r\n   * basándose en el estado del aviso\r\n   */\r\n  verificarEstadoFactura(facturaId: string, avisoId: string): Observable<any> {\r\n    return this.avisosService.getResumenCompletoAviso(avisoId).pipe(\r\n      switchMap(resumen => {\r\n        // Si el aviso está completado, la factura también debería estarlo\r\n        if (resumen.estado === 'Completado') {\r\n          return this.facturasService.cambiarEstado(facturaId, 'Completado');\r\n        }\r\n        \r\n        // Si el aviso está listo para facturar, la factura debería estar \"En curso\"\r\n        if (resumen.estado === 'Listo para facturar') {\r\n          return this.facturasService.cambiarEstado(facturaId, 'En curso');\r\n        }\r\n        \r\n        return from([{ id: facturaId, estado: 'Pendiente' }]);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sincroniza el estado de todas las facturas de un aviso\r\n   * basándose en el estado actual del aviso\r\n   */\r\n  sincronizarEstadosFacturas(avisoId: string): Observable<any> {\r\n    return this.avisosService.getResumenCompletoAviso(avisoId).pipe(\r\n      switchMap(resumen => {\r\n        if (!resumen.facturas || resumen.facturas.length === 0) {\r\n          return from([{ mensaje: 'No hay facturas para sincronizar' }]);\r\n        }\r\n\r\n        let nuevoEstadoFactura: 'Pendiente' | 'En curso' | 'Completado';\r\n        \r\n        // Determinar el estado apropiado para las facturas\r\n        if (resumen.estado === 'Completado') {\r\n          nuevoEstadoFactura = 'Completado';\r\n        } else if (resumen.estado === 'Listo para facturar') {\r\n          nuevoEstadoFactura = 'En curso';\r\n        } else {\r\n          nuevoEstadoFactura = 'Pendiente';\r\n        }\r\n\r\n        // Actualizar todas las facturas al estado apropiado\r\n        const actualizacionesFacturas = resumen.facturas.map((factura: any) => \r\n          this.facturasService.cambiarEstado(factura.id, nuevoEstadoFactura)\r\n        );\r\n        \r\n        return forkJoin(actualizacionesFacturas).pipe(\r\n          map(() => ({\r\n            mensaje: `Estados de ${resumen.facturas.length} factura(s) sincronizados a \"${nuevoEstadoFactura}\"`,\r\n            avisoId,\r\n            nuevoEstado: nuevoEstadoFactura\r\n          }))\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Completa un aviso marcándolo como finalizado\r\n   * Actualizado para el nuevo flujo de albaranes\r\n   */\r\n  completarAviso(avisoId: string): Observable<any> {\r\n    return this.avisosService.getResumenCompletoAviso(avisoId).pipe(\r\n      switchMap(resumen => {\r\n        // Validar que se puede completar el aviso\r\n        if (!this.puedeCompletarAviso(resumen)) {\r\n          throw new Error('No se puede completar el aviso. Verifica que haya trabajos finalizados y facturas generadas.');\r\n        }\r\n\r\n        // Validación adicional: verificar que TODOS los trabajos tengan albaranes cerrados\r\n        const trabajosSinAlbaranCerrado = resumen.trabajos?.filter((t: any) => \r\n          !t.albaran_id || !t.albaran?.estado_cierre || t.albaran.estado_cierre === 'Otra visita'\r\n        ) || [];\r\n        \r\n        if (trabajosSinAlbaranCerrado.length > 0) {\r\n          const trabajosPendientes = trabajosSinAlbaranCerrado.map((t: any) => \r\n            `Trabajo #${t.id?.substring(0, 8)} (${t.descripcion})`\r\n          ).join(', ');\r\n          \r\n          throw new Error(`No se puede completar el aviso. Los siguientes trabajos no tienen albaranes cerrados: ${trabajosPendientes}. Debes cerrar todos los albaranes antes de completar el aviso.`);\r\n        }\r\n\r\n        // Actualizar el aviso a estado \"Completado\"\r\n        return this.avisosService.actualizarAviso(avisoId, {\r\n          estado: 'Completado',\r\n          fecha_finalizacion: new Date()\r\n        }).pipe(\r\n          switchMap(avisoActualizado => {\r\n            // Marcar las facturas relacionadas como \"Completado\"\r\n            if (resumen.facturas && resumen.facturas.length > 0) {\r\n              const actualizacionesFacturas = resumen.facturas.map((factura: any) => \r\n                this.facturasService.cambiarEstado(factura.id, 'Completado')\r\n              );\r\n              \r\n              return forkJoin(actualizacionesFacturas).pipe(\r\n                map(() => avisoActualizado)\r\n              );\r\n            }\r\n            \r\n            return from([avisoActualizado]);\r\n          })\r\n        );\r\n      }),\r\n      tap(() => console.log('✅ Aviso completado exitosamente')),\r\n      switchMap(() => this.avisosService.getResumenCompletoAviso(avisoId)),\r\n      map(resumen => ({\r\n        paso: 'aviso_completado',\r\n        avisoId,\r\n        mensaje: 'Aviso marcado como completado',\r\n        resumen\r\n      }))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene todas las acciones disponibles para un aviso\r\n   */\r\n  obtenerAccionesDisponibles(avisoId: string): Observable<string[]> {\r\n    return this.obtenerEstadoFlujo(avisoId).pipe(\r\n      map(estado => {\r\n        const acciones: string[] = [];\r\n        \r\n        // Nuevo flujo: solo facturar trabajos finalizados\r\n        if (estado.puedeFacturarTrabajos) {\r\n          acciones.push('facturar_trabajos');\r\n        }\r\n        \r\n        if (estado.puedeCompletarAviso) {\r\n          acciones.push('completar_aviso');\r\n        }\r\n        \r\n        return acciones;\r\n      })\r\n    );\r\n  }\r\n\r\n  // Métodos de validación privados para el nuevo flujo\r\n  private puedeCrearPresupuesto(resumen: any): boolean {\r\n    // En el nuevo flujo, no se crean presupuestos automáticamente\r\n    return false;\r\n  }\r\n\r\n  private puedeAprobarPresupuesto(resumen: any): boolean {\r\n    // En el nuevo flujo, no se aprueban presupuestos automáticamente\r\n    return false;\r\n  }\r\n\r\n  private puedeFacturarPresupuesto(resumen: any): boolean {\r\n    // En el nuevo flujo, no se facturan presupuestos automáticamente\r\n    return false;\r\n  }\r\n\r\n  private puedeFacturarTrabajos(resumen: any): boolean {\r\n    // Solo se puede facturar si:\r\n    // 1. Hay trabajos finalizados (con albaranes cerrados)\r\n    // 2. No hay facturas pendientes\r\n    // 3. TODOS los trabajos tienen albaranes cerrados (no puede haber trabajos abiertos)\r\n    const todosLosTrabajosTienenAlbaranesCerrados = resumen.trabajos?.every((t: any) => \r\n      t.albaran_id && t.albaran?.estado_cierre && t.albaran.estado_cierre !== 'Otra visita'\r\n    ) || false;\r\n    \r\n    return resumen.estadisticas.trabajosFinalizados > 0 && \r\n           resumen.estadisticas.facturasPendientes === 0 &&\r\n           todosLosTrabajosTienenAlbaranesCerrados;\r\n  }\r\n\r\n  private puedeCompletarAviso(resumen: any): boolean {\r\n    // Solo se puede completar si:\r\n    // 1. Hay trabajos finalizados (con albaranes cerrados)\r\n    // 2. Hay facturas generadas\r\n    // 3. TODOS los trabajos tienen albaranes cerrados (no puede haber trabajos abiertos)\r\n    const todosLosTrabajosTienenAlbaranesCerrados = resumen.trabajos?.every((t: any) => \r\n      t.albaran_id && t.albaran?.estado_cierre && t.albaran.estado_cierre !== 'Otra visita'\r\n    ) || false;\r\n    \r\n    return resumen.estadisticas.trabajosFinalizados > 0 && \r\n           resumen.estadisticas.totalFacturas > 0 &&\r\n           todosLosTrabajosTienenAlbaranesCerrados;\r\n  }\r\n\r\n  private convertirDatosAFactura(datosFactura: any): any {\r\n    console.log('🔧 Datos de factura recibidos:', datosFactura);\r\n    \r\n    // Validar que tenemos los datos necesarios\r\n    if (!datosFactura.cliente || !datosFactura.cliente.id) {\r\n      throw new Error('Datos de cliente incompletos para crear factura');\r\n    }\r\n    \r\n    const lineasFactura = [];\r\n    \r\n    // 1. Calcular horas totales de trabajo desde los albaranes\r\n    let horasTotales = 0;\r\n    if (datosFactura.resumen.albaranes && datosFactura.resumen.albaranes.length > 0) {\r\n      datosFactura.resumen.albaranes.forEach((albaran: any) => {\r\n        if (albaran.estado_cierre === 'Finalizado') {\r\n          // Calcular horas entre hora_entrada y hora_salida\r\n          const horaEntrada = new Date(`2000-01-01T${albaran.hora_entrada}`);\r\n          const horaSalida = new Date(`2000-01-01T${albaran.hora_salida}`);\r\n          const horasTrabajo = (horaSalida.getTime() - horaEntrada.getTime()) / (1000 * 60 * 60);\r\n          horasTotales += Math.max(0, horasTrabajo);\r\n        }\r\n      });\r\n    }\r\n    \r\n    // 2. Agregar línea de mano de obra con horas reales\r\n    if (horasTotales > 0) {\r\n      lineasFactura.push({\r\n        tipo: 'mano_obra' as const,\r\n        nombre: 'Mano de obra técnica',\r\n        cantidad: Math.round(horasTotales * 10) / 10, // Redondear a 1 decimal\r\n        precio_pvp: 50, // Precio por hora\r\n        descripcion: `${Math.round(horasTotales * 10) / 10} horas de trabajo técnico`\r\n      });\r\n    }\r\n    \r\n    // 3. Agregar repuestos utilizados desde los albaranes CON CANTIDADES REALES\r\n    const repuestosUtilizados = new Map<string, any>(); // nombre -> {cantidad, precio, unidad, codigo}\r\n    \r\n    if (datosFactura.resumen.albaranes) {\r\n      datosFactura.resumen.albaranes.forEach((albaran: any) => {\r\n        if (albaran.repuestos_utilizados && albaran.repuestos_utilizados.length > 0) {\r\n          albaran.repuestos_utilizados.forEach((repuesto: any) => {\r\n            // Verificar si el repuesto ya existe\r\n            const existente = repuestosUtilizados.get(repuesto.nombre);\r\n            if (existente) {\r\n              // Si ya existe, sumar la cantidad\r\n              existente.cantidad += repuesto.cantidad || 1;\r\n            } else {\r\n              // Si no existe, crearlo con los datos del repuesto\r\n              repuestosUtilizados.set(repuesto.nombre, {\r\n                cantidad: repuesto.cantidad || 1,\r\n                precio_neto: repuesto.precio_neto || 0,\r\n                precio_pvp: repuesto.precio_pvp || 25,\r\n                unidad: repuesto.unidad || 'unidad',\r\n                codigo: repuesto.codigo || ''\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Agregar líneas de repuestos con cantidades reales\r\n    repuestosUtilizados.forEach((datos, nombre) => {\r\n      lineasFactura.push({\r\n        tipo: 'repuesto' as const,\r\n        nombre: nombre,\r\n        cantidad: datos.cantidad, // ← CANTIDAD REAL\r\n        precio_neto: datos.precio_neto,\r\n        precio_pvp: datos.precio_pvp,\r\n        descripcion: `Repuesto utilizado: ${nombre} (${datos.cantidad} ${datos.unidad})`\r\n      });\r\n    });\r\n    \r\n    // Si no hay líneas, agregar una línea básica\r\n    if (lineasFactura.length === 0) {\r\n      lineasFactura.push({\r\n        tipo: 'mano_obra' as const,\r\n        nombre: 'Servicio técnico básico',\r\n        cantidad: 1,\r\n        precio_pvp: 50,\r\n        descripcion: 'Servicio técnico realizado'\r\n      });\r\n    }\r\n\r\n    console.log('🔧 Líneas de factura creadas:', lineasFactura);\r\n    console.log('🔧 Horas totales calculadas:', horasTotales);\r\n    console.log('🔧 Repuestos con cantidades reales:', repuestosUtilizados);\r\n    \r\n    const totales = this.facturasService.calcularTotales(lineasFactura);\r\n    \r\n    console.log('🔧 Totales calculados:', totales);\r\n\r\n    return {\r\n      numero_factura: '', // Se generará automáticamente por el servicio\r\n      fecha_emision: new Date().toISOString().split('T')[0],\r\n      cliente_id: datosFactura.cliente.id,\r\n      nombre_cliente: datosFactura.cliente.nombre_completo,\r\n      direccion_cliente: datosFactura.cliente.direccion || 'Sin dirección',\r\n      cif_cliente: 'Sin CIF', // El modelo de cliente no tiene CIF\r\n      email_cliente: datosFactura.cliente.email || 'Sin email',\r\n      aviso_id: datosFactura.avisoId,\r\n      subtotal: totales.subtotal,\r\n      iva: totales.iva,\r\n      total: totales.total,\r\n      estado: 'En curso', // Cambiar a 'En curso' para indicar que está siendo procesada\r\n      notas: `Factura generada desde ${datosFactura.resumen.albaranes?.length || 0} albarán(es) con ${Math.round(horasTotales * 10) / 10}h de trabajo técnico`,\r\n      lineas: lineasFactura\r\n    };\r\n  }\r\n} "],
  "mappings": "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",
  "names": ["trabajo", "_a"]
}
