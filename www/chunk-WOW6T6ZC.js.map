{
  "version": 3,
  "sources": ["src/app/core/services/navigation.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NavigationService {\r\n  private currentRoute$ = new BehaviorSubject<string>('');\r\n  private isNavigating$ = new BehaviorSubject<boolean>(false);\r\n\r\n  constructor(private router: Router) {\r\n    this.setupRouteTracking();\r\n  }\r\n\r\n  /**\r\n   * Configura el tracking de rutas\r\n   */\r\n  private setupRouteTracking() {\r\n    this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd)\r\n    ).subscribe((event: NavigationEnd) => {\r\n      const currentRoute = event.urlAfterRedirects;\r\n      console.log('üß≠ Navegando a:', currentRoute);\r\n      \r\n      this.currentRoute$.next(currentRoute);\r\n      this.isNavigating$.next(false);\r\n      \r\n      // Peque√±o delay para asegurar que el DOM est√© listo\r\n      setTimeout(() => {\r\n        this.isNavigating$.next(false);\r\n      }, 100);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Obtiene la ruta actual\r\n   */\r\n  getCurrentRoute(): Observable<string> {\r\n    return this.currentRoute$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Verifica si se est√° navegando\r\n   */\r\n  isNavigating(): Observable<boolean> {\r\n    return this.isNavigating$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Marca que se est√° iniciando una navegaci√≥n\r\n   */\r\n  startNavigation() {\r\n    this.isNavigating$.next(true);\r\n  }\r\n\r\n  /**\r\n   * Verifica si la ruta actual es la especificada\r\n   */\r\n  isCurrentRoute(route: string): boolean {\r\n    return this.currentRoute$.value === route;\r\n  }\r\n\r\n  /**\r\n   * Obtiene el valor actual de la ruta\r\n   */\r\n  getCurrentRouteValue(): string {\r\n    return this.currentRoute$.value;\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;AAQM,IAAO,qBAAP,MAAO,mBAAiB;EAI5B,YAAoB,QAAc;AAAd,SAAA,SAAA;AAHZ,SAAA,gBAAgB,IAAI,gBAAwB,EAAE;AAC9C,SAAA,gBAAgB,IAAI,gBAAyB,KAAK;AAGxD,SAAK,mBAAkB;EACzB;;;;EAKQ,qBAAkB;AACxB,SAAK,OAAO,OAAO,KACjB,OAAO,WAAS,iBAAiB,aAAa,CAAC,EAC/C,UAAU,CAAC,UAAwB;AACnC,YAAM,eAAe,MAAM;AAC3B,cAAQ,IAAI,0BAAmB,YAAY;AAE3C,WAAK,cAAc,KAAK,YAAY;AACpC,WAAK,cAAc,KAAK,KAAK;AAG7B,iBAAW,MAAK;AACd,aAAK,cAAc,KAAK,KAAK;MAC/B,GAAG,GAAG;IACR,CAAC;EACH;;;;EAKA,kBAAe;AACb,WAAO,KAAK,cAAc,aAAY;EACxC;;;;EAKA,eAAY;AACV,WAAO,KAAK,cAAc,aAAY;EACxC;;;;EAKA,kBAAe;AACb,SAAK,cAAc,KAAK,IAAI;EAC9B;;;;EAKA,eAAe,OAAa;AAC1B,WAAO,KAAK,cAAc,UAAU;EACtC;;;;EAKA,uBAAoB;AAClB,WAAO,KAAK,cAAc;EAC5B;;;mCA7DW,oBAAiB,mBAAA,MAAA,CAAA;AAAA;sFAAjB,oBAAiB,SAAjB,mBAAiB,WAAA,YAFhB,OAAM,CAAA;AAEd,IAAO,oBAAP;;sEAAO,mBAAiB,CAAA;UAH7B;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
