{
  "version": 3,
  "sources": ["src/app/core/services/avisos.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { Observable, BehaviorSubject, from } from 'rxjs';\nimport { map, tap, catchError, switchMap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport {\n    Aviso,\n    AvisoResponse,\n    CrearAvisoRequest,\n    ActualizarAvisoRequest,\n    FotoAviso\n} from '../../modules/avisos/models/aviso.model';\nimport { SupabaseClientService } from './supabase-client.service';\nimport { CacheService } from './cache.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AvisosService {\n    private supabase: SupabaseClient;\n    private avisosSubject = new BehaviorSubject<Aviso[]>([]);\n    public avisos$ = this.avisosSubject.asObservable();\n\n    constructor(\n        private supabaseClientService: SupabaseClientService,\n        private cacheService: CacheService\n    ) {\n        this.supabase = this.supabaseClientService.getClient();\n    }\n\n    /**\n     * M√©todo de debug para probar la conexi√≥n b√°sica\n     */\n    debugConnection(): Observable<any> {\n        console.log('üîç AvisosService: Probando conexi√≥n b√°sica...');\n        \n        return from(\n            this.supabase\n                .from('avisos')\n                .select('id')\n                .limit(1)\n        ).pipe(\n            map(({ data, error }) => {\n                if (error) {\n                    console.error('‚ùå AvisosService: Error en conexi√≥n:', error);\n                    throw error;\n                }\n                console.log('‚úÖ AvisosService: Conexi√≥n exitosa, datos:', data);\n                return { success: true, data };\n            }),\n            catchError(error => {\n                console.error('‚ùå AvisosService: Error cr√≠tico:', error);\n                return from(Promise.resolve({ success: false, error }));\n            })\n        );\n    }\n\n    /**\n     * Obtiene la lista de avisos con paginaci√≥n y filtros - VERSI√ìN OPTIMIZADA\n     */\n    getAvisos(\n        pagina: number = 1,\n        porPagina: number = 15, // Reducido a 15 para mejor rendimiento\n        busqueda?: string,\n        ordenarPor?: string,\n        orden?: 'asc' | 'desc',\n        estado?: string,\n        incluirCompletados: boolean = false\n    ): Observable<AvisoResponse> {\n        // Consulta optimizada - incluir solo campos esenciales\n        let query = this.supabase\n            .from('avisos')\n            .select(`\n                id,\n                cliente_id,\n                tecnico_asignado_id,\n                fecha_creacion,\n                nombre_cliente_aviso,\n                direccion_cliente_aviso,\n                telefono_cliente_aviso,\n                nombre_contacto,\n                tipo,\n                descripcion_problema,\n                estado,\n                urgencia,\n                es_urgente,\n                latitud,\n                longitud,\n                cliente:clientes!inner(id, nombre_completo, direccion, telefono_contacto),\n                tecnico_asignado:usuarios(id, nombre_completo, email)\n            `, { count: 'exact' });\n\n        // Aplicar filtros de manera m√°s eficiente\n        if (busqueda) {\n            query = query.or(`nombre_cliente_aviso.ilike.%${busqueda}%,descripcion_problema.ilike.%${busqueda}%`);\n        }\n\n        if (estado) {\n            query = query.eq('estado', estado);\n        } else if (!incluirCompletados) {\n            query = query.neq('estado', 'Completado');\n        }\n\n        // Aplicar paginaci√≥n y ordenamiento\n        const desde = (pagina - 1) * porPagina;\n        query = query\n            .range(desde, desde + porPagina - 1)\n            .order(ordenarPor || 'fecha_creacion', { ascending: orden === 'asc' });\n\n        return from(query).pipe(\n            map(({ data, error, count }) => {\n                if (error) throw error;\n\n                const avisos = data as unknown as Aviso[];\n                this.avisosSubject.next(avisos);\n\n                return {\n                    avisos,\n                    total: count || 0,\n                    pagina,\n                    por_pagina: porPagina\n                };\n            }),\n            catchError(error => {\n                console.error('Error al obtener avisos:', error);\n                throw error;\n            })\n        );\n    }\n\n    /**\n     * Obtiene un aviso por su ID - VERSI√ìN OPTIMIZADA\n     */\n    getAviso(id: string): Observable<Aviso> {\n        return from(\n            this.supabase\n                .from('avisos')\n                .select(`\n                    *,\n                    cliente:clientes!inner(*),\n                    tecnico_asignado:usuarios(*),\n                    fotos:fotos_aviso(id, url, descripcion, fecha_subida)\n                `)\n                .eq('id', id)\n                .single()\n        ).pipe(\n            map(({ data, error }) => {\n                if (error) throw error;\n                return data as Aviso;\n            }),\n            catchError(error => {\n                console.error('Error al obtener aviso:', error);\n                throw error;\n            })\n        );\n    }\n\n    /**\n     * Crea un nuevo aviso\n     */\n    crearAviso(aviso: CrearAvisoRequest): Observable<Aviso> {\n        const avisoData = {\n            ...aviso,\n            urgencia: aviso.es_urgente ? 'Alta' : 'Normal', // Mapear es_urgente a urgencia\n            fecha_creacion: new Date().toISOString(),\n            estado: 'No visitado',\n            requiere_presupuesto: false,\n            requiere_nueva_visita: false\n        };\n\n        return from(\n            this.supabase\n                .from('avisos')\n                .insert([avisoData])\n                .select(`\n          *,\n          cliente:clientes(*),\n          tecnico_asignado:usuarios(*),\n          fotos:fotos_aviso(*)\n        `)\n                .single()\n        ).pipe(\n            map(({ data, error }) => {\n                if (error) throw error;\n\n                const nuevoAviso = data as Aviso;\n                const avisosActuales = this.avisosSubject.value;\n                this.avisosSubject.next([nuevoAviso, ...avisosActuales]);\n\n                // Limpiar cache de avisos para forzar recarga\n                this.cacheService.clearCache('avisos');\n\n                return nuevoAviso;\n            })\n        );\n    }\n\n    /**\n     * Actualiza un aviso existente\n     */\n    actualizarAviso(id: string, aviso: ActualizarAvisoRequest): Observable<Aviso> {\n        const datosActualizados = {\n            ...aviso,\n            fecha_actualizacion: new Date().toISOString()\n        };\n\n        return from(\n            this.supabase\n                .from('avisos')\n                .update(datosActualizados)\n                .eq('id', id)\n                .select(`\n          *,\n          cliente:clientes(*),\n          tecnico_asignado:usuarios(*),\n          fotos:fotos_aviso(*)\n        `)\n                .single()\n        ).pipe(\n            map(({ data, error }) => {\n                if (error) throw error;\n\n                const avisoActualizado = data as Aviso;\n                const avisosActuales = this.avisosSubject.value;\n                const index = avisosActuales.findIndex(a => a.id === id);\n                if (index !== -1) {\n                    avisosActuales[index] = avisoActualizado;\n                    this.avisosSubject.next([...avisosActuales]);\n                }\n\n                // Limpiar cache de avisos para forzar recarga\n                this.cacheService.clearCache('avisos');\n\n                return avisoActualizado;\n            })\n        );\n    }\n\n    /**\n     * Elimina un aviso\n     */\n    eliminarAviso(id: string): Observable<void> {\n        return from(\n            this.supabase\n                .from('avisos')\n                .delete()\n                .eq('id', id)\n        ).pipe(\n            map(({ error }) => {\n                if (error) throw error;\n\n                const avisosActuales = this.avisosSubject.value;\n                const avisosFiltrados = avisosActuales.filter(a => a.id !== id);\n                this.avisosSubject.next(avisosFiltrados);\n\n                // Limpiar cache de avisos para forzar recarga\n                this.cacheService.clearCache('avisos');\n            }),\n            catchError(error => {\n                // Si hay error de clave for√°nea, intentar eliminar fotos primero\n                if (error.code === '23503' && error.message.includes('fotos_aviso')) {\n                    return this.eliminarFotosAviso(id).pipe(\n                        switchMap(() => from(\n                            this.supabase\n                                .from('avisos')\n                                .delete()\n                                .eq('id', id)\n                        )),\n                        map(({ error: deleteError }) => {\n                            if (deleteError) throw deleteError;\n\n                            const avisosActuales = this.avisosSubject.value;\n                            const avisosFiltrados = avisosActuales.filter(a => a.id !== id);\n                            this.avisosSubject.next(avisosFiltrados);\n\n                            // Limpiar cache de avisos para forzar recarga\n                            this.cacheService.clearCache('avisos');\n                        })\n                    );\n                }\n                throw error;\n            })\n        );\n    }\n\n    /**\n     * Elimina todas las fotos asociadas a un aviso (incluyendo archivos del storage)\n     */\n    private eliminarFotosAviso(avisoId: string): Observable<void> {\n        // Primero obtener todas las fotos del aviso\n        return from(\n            this.supabase\n                .from('fotos_aviso')\n                .select('*')\n                .eq('aviso_id', avisoId)\n        ).pipe(\n            switchMap(({ data: fotos, error: selectError }) => {\n                if (selectError) throw selectError;\n                \n                const fotosData = fotos as FotoAviso[];\n                \n                if (fotosData.length === 0) {\n                    // No hay fotos, solo eliminar registros\n                    return from(\n                        this.supabase\n                            .from('fotos_aviso')\n                            .delete()\n                            .eq('aviso_id', avisoId)\n                    ).pipe(\n                        map(({ error }) => {\n                            if (error) throw error;\n                        })\n                    );\n                }\n                \n                // Preparar rutas de archivos para eliminar del storage\n                const archivosAEliminar = fotosData.map(foto => {\n                    const urlParts = foto.url.split('/');\n                    const fileName = urlParts[urlParts.length - 1];\n                    return `${avisoId}/${fileName}`;\n                });\n                \n                // Eliminar archivos del storage\n                return from(\n                    this.supabase.storage\n                        .from('fotos-avisos')\n                        .remove(archivosAEliminar)\n                ).pipe(\n                    switchMap(({ error: storageError }) => {\n                        if (storageError) {\n                            console.warn('Error al eliminar archivos del storage:', storageError);\n                            // Continuar aunque falle la eliminaci√≥n del storage\n                        }\n                        \n                        // Eliminar registros de la base de datos\n                        return from(\n                            this.supabase\n                                .from('fotos_aviso')\n                                .delete()\n                                .eq('aviso_id', avisoId)\n                        );\n                    }),\n                    map(({ error: deleteError }) => {\n                        if (deleteError) throw deleteError;\n                    })\n                );\n            }),\n            catchError(error => {\n                console.error('Error al eliminar fotos del aviso:', error);\n                throw error;\n            })\n        );\n    }\n\n    /**\n     * Sube una foto para un aviso\n     */\n    subirFoto(avisoId: string, file: File, descripcion?: string): Observable<FotoAviso> {\n        // Sanitizar el nombre del archivo para evitar caracteres inv√°lidos\n        const sanitizedFileName = this.sanitizeFileName(file.name);\n        const fileName = `${avisoId}/${Date.now()}_${sanitizedFileName}`;\n\n        return from(\n            this.supabase.storage\n                .from('fotos-avisos')\n                .upload(fileName, file)\n        ).pipe(\n            map(({ data, error }) => {\n                if (error) {\n                    console.error('Error al subir archivo a storage:', error);\n                    // Si el bucket no existe, crear una entrada en la base de datos sin URL\n                    if (error.message === 'Bucket not found') {\n                        throw new Error('El bucket de storage no est√° configurado. Contacta al administrador.');\n                    }\n                    throw error;\n                }\n\n                // Obtener URL p√∫blica\n                const { data: urlData } = this.supabase.storage\n                    .from('fotos-avisos')\n                    .getPublicUrl(fileName);\n\n                return urlData.publicUrl;\n            }),\n            switchMap((publicUrl: string) => from(\n                this.supabase\n                    .from('fotos_aviso')\n                    .insert([{\n                        aviso_id: avisoId,\n                        url: publicUrl,\n                        descripcion: descripcion\n                    }])\n                    .select()\n                    .single()\n            )),\n            map(({ data, error }) => {\n                if (error) throw error;\n                return data as FotoAviso;\n            }),\n            catchError(error => {\n                console.error('Error completo al subir foto:', error);\n                throw error;\n            })\n        );\n    }\n\n    /**\n     * Elimina una foto de un aviso\n     */\n    eliminarFoto(fotoId: string): Observable<void> {\n        // Primero obtener la informaci√≥n de la foto para eliminar el archivo del storage\n        return from(\n            this.supabase\n                .from('fotos_aviso')\n                .select('*')\n                .eq('id', fotoId)\n                .single()\n        ).pipe(\n            switchMap(({ data: foto, error: selectError }) => {\n                if (selectError) throw selectError;\n                \n                const fotoData = foto as FotoAviso;\n                \n                // Extraer el nombre del archivo de la URL\n                const urlParts = fotoData.url.split('/');\n                const fileName = urlParts[urlParts.length - 1];\n                const avisoId = fotoData.aviso_id;\n                const fullPath = `${avisoId}/${fileName}`;\n                \n                // Eliminar el archivo del storage\n                return from(\n                    this.supabase.storage\n                        .from('fotos-avisos')\n                        .remove([fullPath])\n                ).pipe(\n                    switchMap(({ error: storageError }) => {\n                        if (storageError) {\n                            console.warn('Error al eliminar archivo del storage:', storageError);\n                            // Continuar aunque falle la eliminaci√≥n del storage\n                        }\n                        \n                        // Eliminar el registro de la base de datos\n                        return from(\n                            this.supabase\n                                .from('fotos_aviso')\n                                .delete()\n                                .eq('id', fotoId)\n                        );\n                    }),\n                    map(({ error: deleteError }) => {\n                        if (deleteError) throw deleteError;\n                    })\n                );\n            }),\n            catchError(error => {\n                console.error('Error al eliminar foto:', error);\n                throw error;\n            })\n        );\n    }\n\n    /**\n     * Busca avisos por t√©rmino de b√∫squeda\n     */\n    buscarAvisos(termino: string): Observable<Aviso[]> {\n        return from(\n            this.supabase\n                .from('avisos')\n                .select(`\n          *,\n          cliente:clientes(*),\n          tecnico_asignado:usuarios(*),\n          fotos:fotos_aviso(*)\n        `)\n                .or(`nombre_cliente_aviso.ilike.%${termino}%,descripcion_problema.ilike.%${termino}%`)\n                .neq('estado', 'Completado') // Excluir avisos completados de la b√∫squeda\n                .limit(10)\n        ).pipe(\n            map(({ data, error }) => {\n                if (error) throw error;\n                return data as Aviso[];\n            })\n        );\n    }\n\n    /**\n     * Obtiene solo avisos activos (no completados)\n     */\n    getAvisosActivos(\n        pagina: number = 1,\n        porPagina: number = 10,\n        busqueda?: string,\n        ordenarPor?: string,\n        orden?: 'asc' | 'desc',\n        estado?: string\n    ): Observable<AvisoResponse> {\n        return this.getAvisos(pagina, porPagina, busqueda, ordenarPor, orden, estado, false);\n    }\n\n    /**\n     * Obtiene solo avisos completados\n     */\n    getAvisosCompletados(\n        pagina: number = 1,\n        porPagina: number = 10,\n        busqueda?: string,\n        ordenarPor?: string,\n        orden?: 'asc' | 'desc'\n    ): Observable<AvisoResponse> {\n        return this.getAvisos(pagina, porPagina, busqueda, ordenarPor, orden, 'Completado', true);\n    }\n\n    /**\n     * Obtiene el valor actual de avisos\n     */\n    getAvisosActuales(): Aviso[] {\n        return this.avisosSubject.value;\n    }\n\n    /**\n     * Limpia el estado de avisos\n     */\n    limpiarAvisos(): void {\n        this.avisosSubject.next([]);\n    }\n\n    /**\n     * Sanitiza el nombre del archivo para evitar caracteres inv√°lidos en Supabase Storage\n     */\n    private sanitizeFileName(fileName: string): string {\n        return fileName\n            .replace(/[^a-zA-Z0-9.-]/g, '_') // Reemplazar caracteres especiales con guiones bajos\n            .replace(/_{2,}/g, '_') // Reemplazar m√∫ltiples guiones bajos consecutivos con uno solo\n            .replace(/^_+|_+$/g, '') // Eliminar guiones bajos al inicio y final\n            .toLowerCase(); // Convertir a min√∫sculas\n    }\n\n    /**\n     * Crea una factura autom√°ticamente desde los trabajos realizados de un aviso\n     * Actualizado para el nuevo flujo de albaranes\n     */\n    crearFacturaDesdeTrabajos(avisoId: string): Observable<any> {\n        // Obtener el aviso con todos sus trabajos realizados y albaranes\n        return from(\n            this.supabase\n                .from('avisos')\n                .select(`\n                    *,\n                    cliente:clientes(*),\n                    trabajos:trabajos_realizados(\n                        *,\n                        materiales:materiales_trabajo(\n                            *,\n                            material:inventario(*)\n                        ),\n                        albaran:albaranes!trabajos_realizados_albaran_id_fkey(*)\n                    )\n                `)\n                .eq('id', avisoId)\n                .single()\n        ).pipe(\n            map(({ data: aviso, error }) => {\n                if (error) throw error;\n                \n                const avisoData = aviso as any;\n                \n                // Validar que el aviso tenga trabajos finalizados (con albar√°n)\n                const trabajosFinalizados = avisoData.trabajos?.filter((t: any) => \n                    t.estado === 'Finalizado' || t.albaran?.estado_cierre === 'Finalizado'\n                ) || [];\n                \n                if (trabajosFinalizados.length === 0) {\n                    throw new Error('No hay trabajos finalizados para facturar. Debes crear un albar√°n primero.');\n                }\n\n                // Preparar datos para la factura\n                const facturaData = {\n                    avisoId: avisoData.id,\n                    cliente: avisoData.cliente || {\n                        nombre_completo: avisoData.nombre_cliente_aviso,\n                        direccion: avisoData.direccion_cliente_aviso,\n                        email: 'sin-email@ejemplo.com',\n                        cif: 'Sin CIF'\n                    },\n                    trabajos: trabajosFinalizados,\n                    resumen: this.calcularResumenFacturacion(trabajosFinalizados)\n                };\n\n                return facturaData;\n            }),\n            catchError(error => {\n                console.error('Error al preparar factura desde trabajos:', error);\n                throw error;\n            })\n        );\n    }\n\n    /**\n     * Calcula el resumen de facturaci√≥n desde trabajos realizados\n     */\n    private calcularResumenFacturacion(trabajos: any[]): any {\n        const materiales: any[] = [];\n        let horasTotales = 0;\n        \n        trabajos.forEach(trabajo => {\n            // Calcular horas del trabajo\n            const inicio = new Date(`2000-01-01T${trabajo.hora_inicio}`);\n            const fin = new Date(`2000-01-01T${trabajo.hora_fin}`);\n            const horas = (fin.getTime() - inicio.getTime()) / (1000 * 60 * 60);\n            horasTotales += Math.max(0, horas);\n            \n            // Agregar materiales utilizados\n            trabajo.materiales?.forEach((mat: any) => {\n                const existente = materiales.find(m => m.material_id === mat.material_id);\n                if (existente) {\n                    existente.cantidad_total += mat.cantidad_utilizada;\n                } else {\n                    materiales.push({\n                        material_id: mat.material_id,\n                        nombre: mat.material?.nombre || 'Material desconocido',\n                        cantidad_total: mat.cantidad_utilizada,\n                        precio_unitario: mat.precio_neto_al_momento,\n                        descripcion: mat.material?.descripcion || ''\n                    });\n                }\n            });\n        });\n\n        return {\n            materiales,\n            horasTotales,\n            numeroTrabajos: trabajos.length\n        };\n    }\n\n    /**\n     * Obtiene un resumen completo del aviso con todos sus elementos\n     * Actualizado para el nuevo esquema de base de datos\n     */\n    getResumenCompletoAviso(avisoId: string): Observable<any> {\n        return from(\n            this.supabase\n                .from('avisos')\n                .select(`\n                    *,\n                    cliente:clientes(*),\n                    tecnico_asignado:usuarios(*),\n                    fotos:fotos_aviso(*),\n                                           trabajos:trabajos_realizados(\n                           *,\n                           materiales:materiales_trabajo(\n                               *,\n                               material:inventario(*)\n                           ),\n                           albaran:albaranes!trabajos_realizados_albaran_id_fkey(*)\n                       ),\n                    albaranes:albaranes(*),\n                    presupuestos:presupuestos(*),\n                    facturas:facturas(*)\n                `)\n                .eq('id', avisoId)\n                .single()\n        ).pipe(\n            map(({ data, error }) => {\n                if (error) throw error;\n                \n                const avisoCompleto = data as any;\n                \n                // Calcular estad√≠sticas para el nuevo flujo\n                const trabajosFinalizados = avisoCompleto.trabajos?.filter((t: any) => \n                    t.estado === 'Finalizado' || t.albaran?.estado_cierre === 'Finalizado'\n                ) || [];\n                \n                const trabajosConAlbaran = avisoCompleto.trabajos?.filter((t: any) => \n                    t.albaran_id !== null\n                ) || [];\n                \n                const facturasPendientes = avisoCompleto.facturas?.filter((f: any) => \n                    f.estado !== 'Completado'\n                ) || [];\n                \n                // Determinar si tiene presupuesto pendiente\n                const presupuestoPendiente = avisoCompleto.albaranes?.some((a: any) => \n                    a.estado_cierre === 'Presupuesto pendiente'\n                ) || false;\n                \n                return {\n                    ...avisoCompleto,\n                    estadisticas: {\n                        totalTrabajos: avisoCompleto.trabajos?.length || 0,\n                        trabajosConAlbaran: trabajosConAlbaran.length,\n                        trabajosFinalizados: trabajosFinalizados.length,\n                        tienePresupuesto: presupuestoPendiente,\n                        estadoPresupuesto: presupuestoPendiente ? 'Pendiente' : null,\n                        totalFacturas: avisoCompleto.facturas?.length || 0,\n                        facturasPendientes: facturasPendientes.length,\n                        puedeFacturar: trabajosFinalizados.length > 0 && facturasPendientes.length === 0\n                    }\n                };\n            }),\n            catchError(error => {\n                console.error('Error al obtener resumen completo:', error);\n                throw error;\n            })\n        );\n    }\n\n    /**\n     * Actualiza el estado del aviso bas√°ndose en sus elementos relacionados\n     * Actualizado para el nuevo flujo de albaranes\n     */\n    actualizarEstadoAutomatico(avisoId: string): Observable<Aviso> {\n        return this.getResumenCompletoAviso(avisoId).pipe(\n            switchMap(resumen => {\n                let nuevoEstado = resumen.estado;\n                \n                console.log('üîç Analizando estado del aviso:', {\n                    estadoActual: resumen.estado,\n                    estadisticas: resumen.estadisticas,\n                    trabajos: resumen.trabajos?.length || 0,\n                    albaranes: resumen.albaranes?.length || 0\n                });\n                \n                // Nueva l√≥gica para determinar el estado autom√°ticamente\n                if (resumen.estadisticas.trabajosFinalizados > 0 && resumen.estadisticas.totalFacturas > 0) {\n                    // Si hay trabajos finalizados y facturas generadas, est√° completado\n                    nuevoEstado = 'Completado';\n                } else if (resumen.estadisticas.trabajosFinalizados > 0 && resumen.estadisticas.facturasPendientes === 0) {\n                    // Si hay trabajos finalizados pero no hay facturas, est√° listo para facturar\n                    nuevoEstado = 'Listo para facturar';\n                } else if (resumen.estadisticas.trabajosConAlbaran > 0 && resumen.estadisticas.tienePresupuesto) {\n                    // Si hay trabajos con albar√°n y requiere presupuesto\n                    nuevoEstado = 'Pendiente de presupuesto';\n                } else if (resumen.estadisticas.trabajosConAlbaran > 0 || resumen.estadisticas.totalTrabajos > 0) {\n                    // Si hay trabajos con albar√°n o trabajos en general, est√° en curso\n                    nuevoEstado = 'En curso';\n                } else if (resumen.estadisticas.totalTrabajos === 0 && resumen.estadisticas.trabajosConAlbaran === 0) {\n                    // Si no hay trabajos ni albaranes, mantener el estado original o marcarlo como pendiente\n                    if (resumen.estado === 'No visitado' || resumen.estado === 'Pendiente') {\n                        nuevoEstado = resumen.estado; // Mantener el estado actual\n                    } else {\n                        nuevoEstado = 'Pendiente';\n                    }\n                }\n                \n                console.log('üîç Estado calculado:', {\n                    estadoAnterior: resumen.estado,\n                    estadoNuevo: nuevoEstado,\n                    cambio: resumen.estado !== nuevoEstado\n                });\n                \n                // Actualizar el estado si es diferente\n                if (nuevoEstado !== resumen.estado) {\n                    console.log(`üîÑ Actualizando estado del aviso ${avisoId} de \"${resumen.estado}\" a \"${nuevoEstado}\"`);\n                    return this.actualizarAviso(avisoId, { estado: nuevoEstado });\n                }\n                \n                // NOTA: Despu√©s de actualizar el estado del aviso, se debe llamar a\n                // flujoAvisosService.sincronizarEstadosFacturas(avisoId) para mantener\n                // los estados de las facturas sincronizados con el estado del aviso\n                \n                return from([resumen]);\n            })\n        );\n    }\n} "],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAkBM,IAAO,iBAAP,MAAO,eAAa;EAKtB,YACY,uBACA,cAA0B;AAD1B,SAAA,wBAAA;AACA,SAAA,eAAA;AALJ,SAAA,gBAAgB,IAAI,gBAAyB,CAAA,CAAE;AAChD,SAAA,UAAU,KAAK,cAAc,aAAY;AAM5C,SAAK,WAAW,KAAK,sBAAsB,UAAS;EACxD;;;;EAKA,kBAAe;AACX,YAAQ,IAAI,4DAA+C;AAE3D,WAAO,KACH,KAAK,SACA,KAAK,QAAQ,EACb,OAAO,IAAI,EACX,MAAM,CAAC,CAAC,EACf,KACE,IAAI,CAAC,EAAE,MAAM,MAAK,MAAM;AACpB,UAAI,OAAO;AACP,gBAAQ,MAAM,+CAAuC,KAAK;AAC1D,cAAM;MACV;AACA,cAAQ,IAAI,qDAA6C,IAAI;AAC7D,aAAO,EAAE,SAAS,MAAM,KAAI;IAChC,CAAC,GACD,WAAW,WAAQ;AACf,cAAQ,MAAM,2CAAmC,KAAK;AACtD,aAAO,KAAK,QAAQ,QAAQ,EAAE,SAAS,OAAO,MAAK,CAAE,CAAC;IAC1D,CAAC,CAAC;EAEV;;;;EAKA,UACI,SAAiB,GACjB,YAAoB,IACpB,UACA,YACA,OACA,QACA,qBAA8B,OAAK;AAGnC,QAAI,QAAQ,KAAK,SACZ,KAAK,QAAQ,EACb,OAAO;;;;;;;;;;;;;;;;;;eAkBL,EAAE,OAAO,QAAO,CAAE;AAGzB,QAAI,UAAU;AACV,cAAQ,MAAM,GAAG,+BAA+B,QAAQ,iCAAiC,QAAQ,GAAG;IACxG;AAEA,QAAI,QAAQ;AACR,cAAQ,MAAM,GAAG,UAAU,MAAM;IACrC,WAAW,CAAC,oBAAoB;AAC5B,cAAQ,MAAM,IAAI,UAAU,YAAY;IAC5C;AAGA,UAAM,SAAS,SAAS,KAAK;AAC7B,YAAQ,MACH,MAAM,OAAO,QAAQ,YAAY,CAAC,EAClC,MAAM,cAAc,kBAAkB,EAAE,WAAW,UAAU,MAAK,CAAE;AAEzE,WAAO,KAAK,KAAK,EAAE,KACf,IAAI,CAAC,EAAE,MAAM,OAAO,MAAK,MAAM;AAC3B,UAAI;AAAO,cAAM;AAEjB,YAAM,SAAS;AACf,WAAK,cAAc,KAAK,MAAM;AAE9B,aAAO;QACH;QACA,OAAO,SAAS;QAChB;QACA,YAAY;;IAEpB,CAAC,GACD,WAAW,WAAQ;AACf,cAAQ,MAAM,4BAA4B,KAAK;AAC/C,YAAM;IACV,CAAC,CAAC;EAEV;;;;EAKA,SAAS,IAAU;AACf,WAAO,KACH,KAAK,SACA,KAAK,QAAQ,EACb,OAAO;;;;;iBAKP,EACA,GAAG,MAAM,EAAE,EACX,OAAM,CAAE,EACf,KACE,IAAI,CAAC,EAAE,MAAM,MAAK,MAAM;AACpB,UAAI;AAAO,cAAM;AACjB,aAAO;IACX,CAAC,GACD,WAAW,WAAQ;AACf,cAAQ,MAAM,2BAA2B,KAAK;AAC9C,YAAM;IACV,CAAC,CAAC;EAEV;;;;EAKA,WAAW,OAAwB;AAC/B,UAAM,YAAY,iCACX,QADW;MAEd,UAAU,MAAM,aAAa,SAAS;;MACtC,iBAAgB,oBAAI,KAAI,GAAG,YAAW;MACtC,QAAQ;MACR,sBAAsB;MACtB,uBAAuB;;AAG3B,WAAO,KACH,KAAK,SACA,KAAK,QAAQ,EACb,OAAO,CAAC,SAAS,CAAC,EAClB,OAAO;;;;;SAKf,EACQ,OAAM,CAAE,EACf,KACE,IAAI,CAAC,EAAE,MAAM,MAAK,MAAM;AACpB,UAAI;AAAO,cAAM;AAEjB,YAAM,aAAa;AACnB,YAAM,iBAAiB,KAAK,cAAc;AAC1C,WAAK,cAAc,KAAK,CAAC,YAAY,GAAG,cAAc,CAAC;AAGvD,WAAK,aAAa,WAAW,QAAQ;AAErC,aAAO;IACX,CAAC,CAAC;EAEV;;;;EAKA,gBAAgB,IAAY,OAA6B;AACrD,UAAM,oBAAoB,iCACnB,QADmB;MAEtB,sBAAqB,oBAAI,KAAI,GAAG,YAAW;;AAG/C,WAAO,KACH,KAAK,SACA,KAAK,QAAQ,EACb,OAAO,iBAAiB,EACxB,GAAG,MAAM,EAAE,EACX,OAAO;;;;;SAKf,EACQ,OAAM,CAAE,EACf,KACE,IAAI,CAAC,EAAE,MAAM,MAAK,MAAM;AACpB,UAAI;AAAO,cAAM;AAEjB,YAAM,mBAAmB;AACzB,YAAM,iBAAiB,KAAK,cAAc;AAC1C,YAAM,QAAQ,eAAe,UAAU,OAAK,EAAE,OAAO,EAAE;AACvD,UAAI,UAAU,IAAI;AACd,uBAAe,KAAK,IAAI;AACxB,aAAK,cAAc,KAAK,CAAC,GAAG,cAAc,CAAC;MAC/C;AAGA,WAAK,aAAa,WAAW,QAAQ;AAErC,aAAO;IACX,CAAC,CAAC;EAEV;;;;EAKA,cAAc,IAAU;AACpB,WAAO,KACH,KAAK,SACA,KAAK,QAAQ,EACb,OAAM,EACN,GAAG,MAAM,EAAE,CAAC,EACnB,KACE,IAAI,CAAC,EAAE,MAAK,MAAM;AACd,UAAI;AAAO,cAAM;AAEjB,YAAM,iBAAiB,KAAK,cAAc;AAC1C,YAAM,kBAAkB,eAAe,OAAO,OAAK,EAAE,OAAO,EAAE;AAC9D,WAAK,cAAc,KAAK,eAAe;AAGvC,WAAK,aAAa,WAAW,QAAQ;IACzC,CAAC,GACD,WAAW,WAAQ;AAEf,UAAI,MAAM,SAAS,WAAW,MAAM,QAAQ,SAAS,aAAa,GAAG;AACjE,eAAO,KAAK,mBAAmB,EAAE,EAAE,KAC/B,UAAU,MAAM,KACZ,KAAK,SACA,KAAK,QAAQ,EACb,OAAM,EACN,GAAG,MAAM,EAAE,CAAC,CACpB,GACD,IAAI,CAAC,EAAE,OAAO,YAAW,MAAM;AAC3B,cAAI;AAAa,kBAAM;AAEvB,gBAAM,iBAAiB,KAAK,cAAc;AAC1C,gBAAM,kBAAkB,eAAe,OAAO,OAAK,EAAE,OAAO,EAAE;AAC9D,eAAK,cAAc,KAAK,eAAe;AAGvC,eAAK,aAAa,WAAW,QAAQ;QACzC,CAAC,CAAC;MAEV;AACA,YAAM;IACV,CAAC,CAAC;EAEV;;;;EAKQ,mBAAmB,SAAe;AAEtC,WAAO,KACH,KAAK,SACA,KAAK,aAAa,EAClB,OAAO,GAAG,EACV,GAAG,YAAY,OAAO,CAAC,EAC9B,KACE,UAAU,CAAC,EAAE,MAAM,OAAO,OAAO,YAAW,MAAM;AAC9C,UAAI;AAAa,cAAM;AAEvB,YAAM,YAAY;AAElB,UAAI,UAAU,WAAW,GAAG;AAExB,eAAO,KACH,KAAK,SACA,KAAK,aAAa,EAClB,OAAM,EACN,GAAG,YAAY,OAAO,CAAC,EAC9B,KACE,IAAI,CAAC,EAAE,MAAK,MAAM;AACd,cAAI;AAAO,kBAAM;QACrB,CAAC,CAAC;MAEV;AAGA,YAAM,oBAAoB,UAAU,IAAI,UAAO;AAC3C,cAAM,WAAW,KAAK,IAAI,MAAM,GAAG;AACnC,cAAM,WAAW,SAAS,SAAS,SAAS,CAAC;AAC7C,eAAO,GAAG,OAAO,IAAI,QAAQ;MACjC,CAAC;AAGD,aAAO,KACH,KAAK,SAAS,QACT,KAAK,cAAc,EACnB,OAAO,iBAAiB,CAAC,EAChC,KACE,UAAU,CAAC,EAAE,OAAO,aAAY,MAAM;AAClC,YAAI,cAAc;AACd,kBAAQ,KAAK,2CAA2C,YAAY;QAExE;AAGA,eAAO,KACH,KAAK,SACA,KAAK,aAAa,EAClB,OAAM,EACN,GAAG,YAAY,OAAO,CAAC;MAEpC,CAAC,GACD,IAAI,CAAC,EAAE,OAAO,YAAW,MAAM;AAC3B,YAAI;AAAa,gBAAM;MAC3B,CAAC,CAAC;IAEV,CAAC,GACD,WAAW,WAAQ;AACf,cAAQ,MAAM,sCAAsC,KAAK;AACzD,YAAM;IACV,CAAC,CAAC;EAEV;;;;EAKA,UAAU,SAAiB,MAAY,aAAoB;AAEvD,UAAM,oBAAoB,KAAK,iBAAiB,KAAK,IAAI;AACzD,UAAM,WAAW,GAAG,OAAO,IAAI,KAAK,IAAG,CAAE,IAAI,iBAAiB;AAE9D,WAAO,KACH,KAAK,SAAS,QACT,KAAK,cAAc,EACnB,OAAO,UAAU,IAAI,CAAC,EAC7B,KACE,IAAI,CAAC,EAAE,MAAM,MAAK,MAAM;AACpB,UAAI,OAAO;AACP,gBAAQ,MAAM,qCAAqC,KAAK;AAExD,YAAI,MAAM,YAAY,oBAAoB;AACtC,gBAAM,IAAI,MAAM,yEAAsE;QAC1F;AACA,cAAM;MACV;AAGA,YAAM,EAAE,MAAM,QAAO,IAAK,KAAK,SAAS,QACnC,KAAK,cAAc,EACnB,aAAa,QAAQ;AAE1B,aAAO,QAAQ;IACnB,CAAC,GACD,UAAU,CAAC,cAAsB,KAC7B,KAAK,SACA,KAAK,aAAa,EAClB,OAAO,CAAC;MACL,UAAU;MACV,KAAK;MACL;KACH,CAAC,EACD,OAAM,EACN,OAAM,CAAE,CAChB,GACD,IAAI,CAAC,EAAE,MAAM,MAAK,MAAM;AACpB,UAAI;AAAO,cAAM;AACjB,aAAO;IACX,CAAC,GACD,WAAW,WAAQ;AACf,cAAQ,MAAM,iCAAiC,KAAK;AACpD,YAAM;IACV,CAAC,CAAC;EAEV;;;;EAKA,aAAa,QAAc;AAEvB,WAAO,KACH,KAAK,SACA,KAAK,aAAa,EAClB,OAAO,GAAG,EACV,GAAG,MAAM,MAAM,EACf,OAAM,CAAE,EACf,KACE,UAAU,CAAC,EAAE,MAAM,MAAM,OAAO,YAAW,MAAM;AAC7C,UAAI;AAAa,cAAM;AAEvB,YAAM,WAAW;AAGjB,YAAM,WAAW,SAAS,IAAI,MAAM,GAAG;AACvC,YAAM,WAAW,SAAS,SAAS,SAAS,CAAC;AAC7C,YAAM,UAAU,SAAS;AACzB,YAAM,WAAW,GAAG,OAAO,IAAI,QAAQ;AAGvC,aAAO,KACH,KAAK,SAAS,QACT,KAAK,cAAc,EACnB,OAAO,CAAC,QAAQ,CAAC,CAAC,EACzB,KACE,UAAU,CAAC,EAAE,OAAO,aAAY,MAAM;AAClC,YAAI,cAAc;AACd,kBAAQ,KAAK,0CAA0C,YAAY;QAEvE;AAGA,eAAO,KACH,KAAK,SACA,KAAK,aAAa,EAClB,OAAM,EACN,GAAG,MAAM,MAAM,CAAC;MAE7B,CAAC,GACD,IAAI,CAAC,EAAE,OAAO,YAAW,MAAM;AAC3B,YAAI;AAAa,gBAAM;MAC3B,CAAC,CAAC;IAEV,CAAC,GACD,WAAW,WAAQ;AACf,cAAQ,MAAM,2BAA2B,KAAK;AAC9C,YAAM;IACV,CAAC,CAAC;EAEV;;;;EAKA,aAAa,SAAe;AACxB,WAAO,KACH,KAAK,SACA,KAAK,QAAQ,EACb,OAAO;;;;;SAKf,EACQ,GAAG,+BAA+B,OAAO,iCAAiC,OAAO,GAAG,EACpF,IAAI,UAAU,YAAY,EAC1B,MAAM,EAAE,CAAC,EAChB,KACE,IAAI,CAAC,EAAE,MAAM,MAAK,MAAM;AACpB,UAAI;AAAO,cAAM;AACjB,aAAO;IACX,CAAC,CAAC;EAEV;;;;EAKA,iBACI,SAAiB,GACjB,YAAoB,IACpB,UACA,YACA,OACA,QAAe;AAEf,WAAO,KAAK,UAAU,QAAQ,WAAW,UAAU,YAAY,OAAO,QAAQ,KAAK;EACvF;;;;EAKA,qBACI,SAAiB,GACjB,YAAoB,IACpB,UACA,YACA,OAAsB;AAEtB,WAAO,KAAK,UAAU,QAAQ,WAAW,UAAU,YAAY,OAAO,cAAc,IAAI;EAC5F;;;;EAKA,oBAAiB;AACb,WAAO,KAAK,cAAc;EAC9B;;;;EAKA,gBAAa;AACT,SAAK,cAAc,KAAK,CAAA,CAAE;EAC9B;;;;EAKQ,iBAAiB,UAAgB;AACrC,WAAO,SACF,QAAQ,mBAAmB,GAAG,EAC9B,QAAQ,UAAU,GAAG,EACrB,QAAQ,YAAY,EAAE,EACtB,YAAW;EACpB;;;;;EAMA,0BAA0B,SAAe;AAErC,WAAO,KACH,KAAK,SACA,KAAK,QAAQ,EACb,OAAO;;;;;;;;;;;iBAWP,EACA,GAAG,MAAM,OAAO,EAChB,OAAM,CAAE,EACf,KACE,IAAI,CAAC,EAAE,MAAM,OAAO,MAAK,MAAM;AAjjB3C;AAkjBgB,UAAI;AAAO,cAAM;AAEjB,YAAM,YAAY;AAGlB,YAAM,wBAAsB,eAAU,aAAV,mBAAoB,OAAO,CAAC,MAAQ;AAvjBhF,YAAAA;AAwjBoB,iBAAE,WAAW,kBAAgBA,MAAA,EAAE,YAAF,gBAAAA,IAAW,mBAAkB;aACzD,CAAA;AAEL,UAAI,oBAAoB,WAAW,GAAG;AAClC,cAAM,IAAI,MAAM,+EAA4E;MAChG;AAGA,YAAM,cAAc;QAChB,SAAS,UAAU;QACnB,SAAS,UAAU,WAAW;UAC1B,iBAAiB,UAAU;UAC3B,WAAW,UAAU;UACrB,OAAO;UACP,KAAK;;QAET,UAAU;QACV,SAAS,KAAK,2BAA2B,mBAAmB;;AAGhE,aAAO;IACX,CAAC,GACD,WAAW,WAAQ;AACf,cAAQ,MAAM,6CAA6C,KAAK;AAChE,YAAM;IACV,CAAC,CAAC;EAEV;;;;EAKQ,2BAA2B,UAAe;AAC9C,UAAM,aAAoB,CAAA;AAC1B,QAAI,eAAe;AAEnB,aAAS,QAAQ,aAAU;AA5lBnC;AA8lBY,YAAM,SAAS,oBAAI,KAAK,cAAc,QAAQ,WAAW,EAAE;AAC3D,YAAM,MAAM,oBAAI,KAAK,cAAc,QAAQ,QAAQ,EAAE;AACrD,YAAM,SAAS,IAAI,QAAO,IAAK,OAAO,QAAO,MAAO,MAAO,KAAK;AAChE,sBAAgB,KAAK,IAAI,GAAG,KAAK;AAGjC,oBAAQ,eAAR,mBAAoB,QAAQ,CAAC,QAAY;AApmBrD,YAAAA,KAAA;AAqmBgB,cAAM,YAAY,WAAW,KAAK,OAAK,EAAE,gBAAgB,IAAI,WAAW;AACxE,YAAI,WAAW;AACX,oBAAU,kBAAkB,IAAI;QACpC,OAAO;AACH,qBAAW,KAAK;YACZ,aAAa,IAAI;YACjB,UAAQA,MAAA,IAAI,aAAJ,gBAAAA,IAAc,WAAU;YAChC,gBAAgB,IAAI;YACpB,iBAAiB,IAAI;YACrB,eAAa,SAAI,aAAJ,mBAAc,gBAAe;WAC7C;QACL;MACJ;IACJ,CAAC;AAED,WAAO;MACH;MACA;MACA,gBAAgB,SAAS;;EAEjC;;;;;EAMA,wBAAwB,SAAe;AACnC,WAAO,KACH,KAAK,SACA,KAAK,QAAQ,EACb,OAAO;;;;;;;;;;;;;;;;iBAgBP,EACA,GAAG,MAAM,OAAO,EAChB,OAAM,CAAE,EACf,KACE,IAAI,CAAC,EAAE,MAAM,MAAK,MAAM;AAvpBpC;AAwpBgB,UAAI;AAAO,cAAM;AAEjB,YAAM,gBAAgB;AAGtB,YAAM,wBAAsB,mBAAc,aAAd,mBAAwB,OAAO,CAAC,MAAQ;AA7pBpF,YAAAA;AA8pBoB,iBAAE,WAAW,kBAAgBA,MAAA,EAAE,YAAF,gBAAAA,IAAW,mBAAkB;aACzD,CAAA;AAEL,YAAM,uBAAqB,mBAAc,aAAd,mBAAwB,OAAO,CAAC,MACvD,EAAE,eAAe,UAChB,CAAA;AAEL,YAAM,uBAAqB,mBAAc,aAAd,mBAAwB,OAAO,CAAC,MACvD,EAAE,WAAW,kBACZ,CAAA;AAGL,YAAM,yBAAuB,mBAAc,cAAd,mBAAyB,KAAK,CAAC,MACxD,EAAE,kBAAkB,6BACnB;AAEL,aAAO,iCACA,gBADA;QAEH,cAAc;UACV,iBAAe,mBAAc,aAAd,mBAAwB,WAAU;UACjD,oBAAoB,mBAAmB;UACvC,qBAAqB,oBAAoB;UACzC,kBAAkB;UAClB,mBAAmB,uBAAuB,cAAc;UACxD,iBAAe,mBAAc,aAAd,mBAAwB,WAAU;UACjD,oBAAoB,mBAAmB;UACvC,eAAe,oBAAoB,SAAS,KAAK,mBAAmB,WAAW;;;IAG3F,CAAC,GACD,WAAW,WAAQ;AACf,cAAQ,MAAM,sCAAsC,KAAK;AACzD,YAAM;IACV,CAAC,CAAC;EAEV;;;;;EAMA,2BAA2B,SAAe;AACtC,WAAO,KAAK,wBAAwB,OAAO,EAAE,KACzC,UAAU,aAAU;AAzsBhC;AA0sBgB,UAAI,cAAc,QAAQ;AAE1B,cAAQ,IAAI,0CAAmC;QAC3C,cAAc,QAAQ;QACtB,cAAc,QAAQ;QACtB,YAAU,aAAQ,aAAR,mBAAkB,WAAU;QACtC,aAAW,aAAQ,cAAR,mBAAmB,WAAU;OAC3C;AAGD,UAAI,QAAQ,aAAa,sBAAsB,KAAK,QAAQ,aAAa,gBAAgB,GAAG;AAExF,sBAAc;MAClB,WAAW,QAAQ,aAAa,sBAAsB,KAAK,QAAQ,aAAa,uBAAuB,GAAG;AAEtG,sBAAc;MAClB,WAAW,QAAQ,aAAa,qBAAqB,KAAK,QAAQ,aAAa,kBAAkB;AAE7F,sBAAc;MAClB,WAAW,QAAQ,aAAa,qBAAqB,KAAK,QAAQ,aAAa,gBAAgB,GAAG;AAE9F,sBAAc;MAClB,WAAW,QAAQ,aAAa,kBAAkB,KAAK,QAAQ,aAAa,uBAAuB,GAAG;AAElG,YAAI,QAAQ,WAAW,iBAAiB,QAAQ,WAAW,aAAa;AACpE,wBAAc,QAAQ;QAC1B,OAAO;AACH,wBAAc;QAClB;MACJ;AAEA,cAAQ,IAAI,+BAAwB;QAChC,gBAAgB,QAAQ;QACxB,aAAa;QACb,QAAQ,QAAQ,WAAW;OAC9B;AAGD,UAAI,gBAAgB,QAAQ,QAAQ;AAChC,gBAAQ,IAAI,2CAAoC,OAAO,QAAQ,QAAQ,MAAM,QAAQ,WAAW,GAAG;AACnG,eAAO,KAAK,gBAAgB,SAAS,EAAE,QAAQ,YAAW,CAAE;MAChE;AAMA,aAAO,KAAK,CAAC,OAAO,CAAC;IACzB,CAAC,CAAC;EAEV;;;mCA1uBS,gBAAa,mBAAA,qBAAA,GAAA,mBAAA,YAAA,CAAA;AAAA;kFAAb,gBAAa,SAAb,eAAa,WAAA,YAFV,OAAM,CAAA;AAEhB,IAAO,gBAAP;;sEAAO,eAAa,CAAA;UAHzB;WAAW;MACR,YAAY;KACf;;;",
  "names": ["_a"]
}
