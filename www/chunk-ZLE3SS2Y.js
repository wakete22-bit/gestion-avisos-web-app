import{a as d,b as u}from"./chunk-ZFUZ5UD4.js";import{Bc as w,E as h,H as r,R as y,d as p,n as v,o as b,q as g,s as R,u as C}from"./chunk-QQQKELKR.js";import{a as f,k as c}from"./chunk-CRC5ZNR6.js";var x=(()=>{let n=class n{constructor(e){this.supabaseService=e}testAlternativeConnection(){return c(this,null,function*(){console.log("\u{1F9EA} INICIANDO test alternativo de conexi\xF3n...");try{let e=this.supabaseService.getClient();console.log("\u{1F9EA} Test 1: Cliente creado:",!!e);let t=`${d.supabaseUrl}/rest/v1/avisos?select=id&limit=1`;console.log("\u{1F9EA} Test 2: URL construida:",t);let s={apikey:d.supabaseServiceKey,Authorization:`Bearer ${d.supabaseServiceKey}`,"Content-Type":"application/json",Prefer:"return=minimal"};console.log("\u{1F9EA} Test 2: Headers preparados");let o=Date.now(),i=yield fetch(t,{method:"GET",headers:s}),l=Date.now();console.log("\u{1F9EA} Test 2: Fetch completado en",l-o,"ms"),console.log("\u{1F9EA} Test 2: Status:",i.status),console.log("\u{1F9EA} Test 2: StatusText:",i.statusText),console.log("\u{1F9EA} Test 2: Headers:",i.headers);let m=yield i.text();return console.log("\u{1F9EA} Test 2: Response body:",m),i.ok}catch(e){return console.error("\u{1F9EA} ERROR en test alternativo:",{message:e.message,stack:e.stack,fullError:e}),!1}})}testBasicConnectivity(){return c(this,null,function*(){console.log("\u{1F310} INICIANDO test de conectividad b\xE1sica...");try{let e=yield fetch("https://www.google.com",{method:"HEAD",mode:"no-cors"});return console.log("\u{1F310} Conectividad a internet:",e.type==="opaque"?"OK":"FAIL"),e.type==="opaque"}catch(e){return console.error("\u{1F310} Sin conectividad a internet:",e),!1}})}runCompleteDiagnostic(){return c(this,null,function*(){var s,o;console.log("\u{1FA7A} INICIANDO diagn\xF3stico completo...");let e=yield this.testBasicConnectivity();console.log("\u{1FA7A} Resultado conectividad:",e?"\u2705":"\u274C");let t=yield this.testAlternativeConnection();console.log("\u{1FA7A} Resultado conexi\xF3n alternativa:",t?"\u2705":"\u274C"),console.log("\u{1FA7A} Variables de entorno disponibles:",{nodeEnv:(o=(s=window.process)==null?void 0:s.env)==null?void 0:o.NODE_ENV,location:window.location.href,userAgent:navigator.userAgent}),console.log("\u{1FA7A} DIAGN\xD3STICO COMPLETO TERMINADO")})}};n.\u0275fac=function(t){return new(t||n)(r(u))},n.\u0275prov=h({token:n,factory:n.\u0275fac,providedIn:"root"});let a=n;return a})();var L=(()=>{let n=class n{constructor(e,t,s,o){this.supabaseService=e,this.ngZone=t,this.platform=s,this.connectionDebug=o,this.connectionState$=new p("connected"),this.appResumed$=new p(!1),this.reconnectingFlag=!1,this.retryCount=0,this.maxRetries=5,this.baseDelay=2e3,this.lastReconnectionAttempt=0,this.minReconnectionInterval=1e4,this.subscriptions=[],this.stats={totalAttempts:0,successfulReconnections:0,lastReconnectionTime:0,currentRetryCount:0,averageReconnectionTime:0},console.log("\u{1F504} UnifiedReconnectionService: Inicializando sistema unificado..."),console.log("\u{1F4F1} Plataforma detectada:",{mobile:this.platform.is("mobile"),hybrid:this.platform.is("hybrid"),pwa:this.platform.is("pwa"),ios:this.platform.is("ios"),android:this.platform.is("android")}),this.setupIntelligentReconnection()}setupIntelligentReconnection(){console.log("\u{1F527} Configurando listeners de reconexi\xF3n inteligente...");let t=v(document,"visibilitychange").pipe(R(1e3),C(),g(()=>{let i=document.visibilityState==="visible";return console.log("\u{1F441}\uFE0F Cambio de visibilidad:",document.visibilityState),i})).subscribe(()=>{this.handleAppResume()});this.subscriptions.push(t);let o=b(3e5).pipe(g(()=>{let i=document.visibilityState==="visible"&&!this.reconnectingFlag&&Date.now()-this.lastReconnectionAttempt>this.minReconnectionInterval;return i||console.log("\u{1F3E5} Health check omitido:",{visible:document.visibilityState==="visible",reconnecting:this.reconnectingFlag,timeSinceLastAttempt:Date.now()-this.lastReconnectionAttempt}),i})).subscribe(()=>{console.log("\u{1F3E5} Health check programado ejecut\xE1ndose..."),this.checkConnectionHealth()});this.subscriptions.push(o),this.platform.is("hybrid")&&this.setupCapacitorListeners(),this.setupNetworkListeners(),console.log("\u2705 Sistema de reconexi\xF3n configurado correctamente")}setupCapacitorListeners(){console.log("\u{1F4F1} Configurando listeners para app nativa..."),document.addEventListener("resume",()=>{console.log("\u{1F4F1} App nativa resumida - disparando reconexi\xF3n"),this.handleAppResume()}),document.addEventListener("pause",()=>{console.log("\u{1F4F1} App nativa pausada")})}setupNetworkListeners(){window.addEventListener("online",()=>{console.log("\u{1F310} Red disponible - verificando conexi\xF3n"),setTimeout(()=>{this.handleAppResume()},2e3)}),window.addEventListener("offline",()=>{console.log("\u{1F310} Red no disponible"),this.connectionState$.next("disconnected")})}handleAppResume(){return c(this,null,function*(){let e=Date.now();if(e-this.lastReconnectionAttempt<this.minReconnectionInterval){console.log("\u{1F504} Reconexi\xF3n ignorada - muy reciente:",{timeSinceLastAttempt:e-this.lastReconnectionAttempt,minimumInterval:this.minReconnectionInterval});return}if(this.reconnectingFlag){console.log("\u{1F504} Reconexi\xF3n ya en progreso - ignorando");return}console.log("\u{1F504} Iniciando proceso de reconexi\xF3n..."),this.lastReconnectionAttempt=e,this.reconnectingFlag=!0,this.connectionState$.next("reconnecting"),this.stats.totalAttempts++;let t=Date.now();try{if(yield this.attemptReconnectionWithIntelligentBackoff()){this.connectionState$.next("connected"),this.appResumed$.next(!0),this.retryCount=0,this.stats.successfulReconnections++,this.stats.lastReconnectionTime=Date.now();let o=Date.now()-t;this.updateAverageReconnectionTime(o),console.log("\u2705 Reconexi\xF3n exitosa en",o,"ms")}else this.connectionState$.next("disconnected"),console.log("\u274C Reconexi\xF3n fall\xF3 despu\xE9s de todos los intentos"),console.log("\u{1FA7A} Ejecutando diagn\xF3stico completo..."),yield this.connectionDebug.runCompleteDiagnostic(),this.retryCount>=this.maxRetries&&(console.log("\u274C M\xFAltiples fallos consecutivos - considerando refresh"),yield this.considerForceRefresh())}catch(s){console.error("\u274C Error cr\xEDtico en reconexi\xF3n:",s),this.connectionState$.next("disconnected")}finally{this.reconnectingFlag=!1,this.stats.currentRetryCount=this.retryCount}})}attemptReconnectionWithIntelligentBackoff(){return c(this,null,function*(){console.log("\u{1F504} Iniciando reconexi\xF3n con backoff inteligente..."),yield new Promise(e=>setTimeout(e,500));for(let e=0;e<this.maxRetries;e++)try{console.log(`\u{1F504} Intento ${e+1}/${this.maxRetries}`);let t=3e3+e*1e3;if(console.log(`\u23F1\uFE0F Timeout para este intento: ${t}ms`),yield this.testLightweightConnection(t))return console.log("\u2705 Conexi\xF3n restaurada en intento",e+1),console.log("\u{1F527} Reseteando cliente Supabase despu\xE9s de reconexi\xF3n exitosa..."),this.supabaseService.resetClientAfterReconnection(),!0;if(e<this.maxRetries-1){let o=this.baseDelay*Math.pow(1.5,e),i=Math.random()*1e3,l=o+i;console.log(`\u23F3 Esperando ${Math.round(l)}ms antes del siguiente intento`),yield new Promise(m=>setTimeout(m,l))}}catch(t){console.warn(`\u274C Intento ${e+1} fall\xF3:`,t.message||t)}return this.retryCount++,console.log("\u274C Todos los intentos de reconexi\xF3n fallaron"),!1})}testLightweightConnection(e){return c(this,null,function*(){console.log("\u{1F50D} INICIANDO test de conexi\xF3n DIRECTO con timeout:",e,"ms");try{return yield this.connectionDebug.testAlternativeConnection()}catch(t){return console.error("\u{1F50D} EXCEPCI\xD3N en test de conexi\xF3n DIRECTO:",{message:t.message,stack:t.stack,name:t.name,fullError:t}),!1}})}checkConnectionHealth(){return c(this,null,function*(){try{console.log("\u{1F3E5} Verificando salud de la conexi\xF3n..."),(yield this.testLightweightConnection(8e3))?console.log("\u{1F3E5} Conexi\xF3n saludable"):(console.log("\u{1F3E5} Conexi\xF3n no saludable - iniciando reconexi\xF3n"),yield this.handleAppResume())}catch(e){console.warn("\u{1F3E5} Error en verificaci\xF3n de salud:",e)}})}considerForceRefresh(){return c(this,null,function*(){console.log("\u{1F504} Evaluando necesidad de refresh completo...");try{if(console.log("\u{1F504} \xDAltima verificaci\xF3n antes del refresh..."),yield this.testLightweightConnection(15e3)){console.log("\u2705 Conexi\xF3n restaurada en \xFAltima verificaci\xF3n - cancelando refresh"),this.connectionState$.next("connected"),this.appResumed$.next(!0),this.retryCount=0;return}}catch(e){console.error("\u274C Test final fall\xF3:",e)}if(!navigator.onLine){console.log("\u{1F310} Sin conexi\xF3n de red - no hacer refresh");return}console.warn("\u{1F504} \xDALTIMO RECURSO: Programando refresh completo en 5 segundos..."),console.warn("\u{1F4CA} Estad\xEDsticas de reconexi\xF3n:",this.stats),setTimeout(()=>{console.warn("\u{1F504} Ejecutando refresh completo..."),window.location.reload()},5e3)})}updateAverageReconnectionTime(e){this.stats.successfulReconnections===1?this.stats.averageReconnectionTime=e:this.stats.averageReconnectionTime=(this.stats.averageReconnectionTime+e)/2}get connectionState(){return this.connectionState$.asObservable()}get appResumed(){return this.appResumed$.asObservable()}get isConnected(){return this.connectionState$.value==="connected"}get isReconnecting(){return this.connectionState$.value==="reconnecting"}get reconnectionStats(){return f({},this.stats)}forceConnectionCheck(){return c(this,null,function*(){if(this.reconnectingFlag)return console.log("\u{1F504} Ya hay una reconexi\xF3n en progreso"),!1;console.log("\u{1F504} Verificaci\xF3n de conexi\xF3n forzada solicitada");try{let e=yield this.testLightweightConnection(1e4);return this.connectionState$.next(e?"connected":"disconnected"),e||(console.log("\u{1F504} Conexi\xF3n fall\xF3 - iniciando reconexi\xF3n autom\xE1tica"),this.handleAppResume()),e}catch(e){return console.error("\u274C Error en verificaci\xF3n forzada:",e),this.connectionState$.next("disconnected"),!1}})}resetRetryCount(){this.retryCount=0,console.log("\u{1F504} Contador de reintentos reiniciado")}cleanup(){console.log("\u{1F9F9} Limpiando recursos de UnifiedReconnectionService..."),this.subscriptions.forEach(e=>e.unsubscribe()),this.subscriptions=[]}getDebugInfo(){var e,t;return{connectionState:this.connectionState$.value,isReconnecting:this.reconnectingFlag,retryCount:this.retryCount,lastReconnectionAttempt:this.lastReconnectionAttempt,stats:this.stats,platform:{mobile:this.platform.is("mobile"),hybrid:this.platform.is("hybrid"),pwa:this.platform.is("pwa")},network:{online:navigator.onLine,effectiveType:(e=navigator.connection)==null?void 0:e.effectiveType,downlink:(t=navigator.connection)==null?void 0:t.downlink},document:{visibilityState:document.visibilityState,hasFocus:document.hasFocus()}}}};n.\u0275fac=function(t){return new(t||n)(r(u),r(y),r(w),r(x))},n.\u0275prov=h({token:n,factory:n.\u0275fac,providedIn:"root"});let a=n;return a})();export{L as a};
