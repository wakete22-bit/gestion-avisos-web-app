{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-segment_2.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, c as createEvent, w as writeTask, h, d as Host, g as getElement, i as forceUpdate, f as printIonWarning, j as printIonError } from './index-4DxY6_gG.js';\nimport { r as raf, f as addEventListener, m as removeEventListener, b as inheritAttributes } from './helpers-8KSQQGQy.js';\nimport { i as isRTL } from './dir-C53feagD.js';\nimport { c as createColorClasses, h as hostContext } from './theme-DiVJyqlX.js';\nimport { b as getIonMode } from './ionic-global-CTSyufhF.js';\nconst segmentIosCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:grid;grid-auto-columns:1fr;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto;grid-auto-columns:minmax(-webkit-min-content, 1fr);grid-auto-columns:minmax(min-content, 1fr)}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.065);border-radius:8px;overflow:hidden;z-index:0}:host(.ion-color){background:rgba(var(--ion-color-base-rgb), 0.065)}:host(.in-toolbar){-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;width:auto}:host(.in-toolbar:not(.ion-color)){background:var(--ion-toolbar-segment-background, var(--background))}:host(.in-toolbar-color:not(.ion-color)){background:rgba(var(--ion-color-contrast-rgb), 0.11)}\";\nconst segmentMdCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:grid;grid-auto-columns:1fr;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto;grid-auto-columns:minmax(-webkit-min-content, 1fr);grid-auto-columns:minmax(min-content, 1fr)}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:transparent;grid-auto-columns:minmax(auto, 360px)}:host(.in-toolbar){min-height:var(--min-height)}:host(.segment-scrollable) ::slotted(ion-segment-button){min-width:auto}\";\nconst Segment = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.ionSelect = createEvent(this, \"ionSelect\", 7);\n    this.ionStyle = createEvent(this, \"ionStyle\", 7);\n    this.segmentViewEl = null;\n    this.activated = false;\n    /**\n     * If `true`, the user cannot interact with the segment.\n     */\n    this.disabled = false;\n    /**\n     * If `true`, the segment buttons will overflow and the user can swipe to see them.\n     * In addition, this will disable the gesture to drag the indicator between the buttons\n     * in order to swipe to see hidden buttons.\n     */\n    this.scrollable = false;\n    /**\n     * If `true`, users will be able to swipe between segment buttons to activate them.\n     */\n    this.swipeGesture = true;\n    /**\n     * If `true`, navigating to an `ion-segment-button` with the keyboard will focus and select the element.\n     * If `false`, keyboard navigation will only focus the `ion-segment-button` element.\n     */\n    this.selectOnFocus = false;\n    this.onClick = ev => {\n      const current = ev.target;\n      const previous = this.checked;\n      // If the current element is a segment then that means\n      // the user tried to swipe to a segment button and\n      // click a segment button at the same time so we should\n      // not update the checked segment button\n      if (current.tagName === 'ION-SEGMENT') {\n        return;\n      }\n      this.value = current.value;\n      if (current !== previous) {\n        this.emitValueChange();\n      }\n      if (this.segmentViewEl) {\n        this.updateSegmentView();\n        if (this.scrollable && previous) {\n          this.checkButton(previous, current);\n        }\n      } else if (this.scrollable || !this.swipeGesture) {\n        if (previous) {\n          this.checkButton(previous, current);\n        } else {\n          this.setCheckedClasses();\n        }\n      }\n    };\n    this.onSlottedItemsChange = () => {\n      /**\n       * When the slotted segment buttons change we need to\n       * ensure that the new segment buttons are checked if\n       * the value matches the segment button value.\n       */\n      this.valueChanged(this.value);\n    };\n    this.getSegmentButton = selector => {\n      var _a, _b;\n      const buttons = this.getButtons().filter(button => !button.disabled);\n      const currIndex = buttons.findIndex(button => button === document.activeElement);\n      switch (selector) {\n        case 'first':\n          return buttons[0];\n        case 'last':\n          return buttons[buttons.length - 1];\n        case 'next':\n          return (_a = buttons[currIndex + 1]) !== null && _a !== void 0 ? _a : buttons[0];\n        case 'previous':\n          return (_b = buttons[currIndex - 1]) !== null && _b !== void 0 ? _b : buttons[buttons.length - 1];\n        default:\n          return null;\n      }\n    };\n  }\n  colorChanged(value, oldValue) {\n    /**\n     * If color is set after not having\n     * previously been set (or vice versa),\n     * we need to emit style so the segment-buttons\n     * can apply their color classes properly.\n     */\n    if (oldValue === undefined && value !== undefined || oldValue !== undefined && value === undefined) {\n      this.emitStyle();\n    }\n  }\n  swipeGestureChanged() {\n    this.gestureChanged();\n  }\n  valueChanged(value, oldValue) {\n    // Force a value to exist if we're using a segment view\n    if (this.segmentViewEl && value === undefined) {\n      this.value = this.getButtons()[0].value;\n      return;\n    }\n    if (oldValue !== undefined && value !== undefined) {\n      const buttons = this.getButtons();\n      const previous = buttons.find(button => button.value === oldValue);\n      const current = buttons.find(button => button.value === value);\n      if (previous && current) {\n        if (!this.segmentViewEl) {\n          this.checkButton(previous, current);\n        } else if (this.triggerScrollOnValueChange !== false) {\n          this.updateSegmentView();\n        }\n      }\n    } else if (value !== undefined && oldValue === undefined && this.segmentViewEl) {\n      this.updateSegmentView();\n    }\n    /**\n     * `ionSelect` is emitted every time the value changes (internal or external changes).\n     * Used by `ion-segment-button` to determine if the button should be checked.\n     */\n    this.ionSelect.emit({\n      value\n    });\n    // The scroll listener should handle scrolling the active button into view as needed\n    if (!this.segmentViewEl) {\n      this.scrollActiveButtonIntoView();\n    }\n    this.triggerScrollOnValueChange = undefined;\n  }\n  disabledChanged() {\n    this.gestureChanged();\n    if (!this.segmentViewEl) {\n      const buttons = this.getButtons();\n      for (const button of buttons) {\n        button.disabled = this.disabled;\n      }\n    } else {\n      this.segmentViewEl.disabled = this.disabled;\n    }\n  }\n  gestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(!this.scrollable && !this.disabled && this.swipeGesture);\n    }\n  }\n  connectedCallback() {\n    this.emitStyle();\n    this.segmentViewEl = this.getSegmentView();\n  }\n  disconnectedCallback() {\n    this.segmentViewEl = null;\n  }\n  componentWillLoad() {\n    this.emitStyle();\n  }\n  async componentDidLoad() {\n    this.segmentViewEl = this.getSegmentView();\n    this.setCheckedClasses();\n    /**\n     * We need to wait for the buttons to all be rendered\n     * before we can scroll.\n     */\n    raf(() => {\n      /**\n       * When the segment loads for the first\n       * time we just want to snap the active button into\n       * place instead of scroll. Smooth scrolling should only\n       * happen when the user interacts with the segment.\n       */\n      this.scrollActiveButtonIntoView(false);\n    });\n    this.gesture = (await import('./index-CfgBF1SE.js')).createGesture({\n      el: this.el,\n      gestureName: 'segment',\n      gesturePriority: 100,\n      threshold: 0,\n      passive: false,\n      onStart: ev => this.onStart(ev),\n      onMove: ev => this.onMove(ev),\n      onEnd: ev => this.onEnd(ev)\n    });\n    this.gestureChanged();\n    if (this.disabled) {\n      this.disabledChanged();\n    }\n    // Update segment view based on the initial value,\n    // but do not animate the scroll\n    this.updateSegmentView(false);\n  }\n  onStart(detail) {\n    this.valueBeforeGesture = this.value;\n    this.activate(detail);\n  }\n  onMove(detail) {\n    this.setNextIndex(detail);\n  }\n  onEnd(detail) {\n    this.setActivated(false);\n    this.setNextIndex(detail, true);\n    detail.event.stopImmediatePropagation();\n    const value = this.value;\n    if (value !== undefined) {\n      if (this.valueBeforeGesture !== value) {\n        this.emitValueChange();\n        this.updateSegmentView();\n      }\n    }\n    this.valueBeforeGesture = undefined;\n  }\n  /**\n   * Emits an `ionChange` event.\n   *\n   * This API should be called for user committed changes.\n   * This API should not be used for external value changes.\n   */\n  emitValueChange() {\n    const {\n      value\n    } = this;\n    this.ionChange.emit({\n      value\n    });\n  }\n  getButtons() {\n    return Array.from(this.el.querySelectorAll('ion-segment-button'));\n  }\n  get checked() {\n    return this.getButtons().find(button => button.value === this.value);\n  }\n  /*\n   * Activate both the segment and the buttons\n   * due to a bug with ::slotted in Safari\n   */\n  setActivated(activated) {\n    const buttons = this.getButtons();\n    buttons.forEach(button => {\n      button.classList.toggle('segment-button-activated', activated);\n    });\n    this.activated = activated;\n  }\n  activate(detail) {\n    const clicked = detail.event.target;\n    const buttons = this.getButtons();\n    const checked = buttons.find(button => button.value === this.value);\n    // Make sure we are only checking for activation on a segment button\n    // since disabled buttons will get the click on the segment\n    if (clicked.tagName !== 'ION-SEGMENT-BUTTON') {\n      return;\n    }\n    // If there are no checked buttons, set the current button to checked\n    if (!checked) {\n      this.value = clicked.value;\n      this.setCheckedClasses();\n    }\n    // If the gesture began on the clicked button with the indicator\n    // then we should activate the indicator\n    if (this.value === clicked.value) {\n      this.setActivated(true);\n    }\n  }\n  getIndicator(button) {\n    const root = button.shadowRoot || button;\n    return root.querySelector('.segment-button-indicator');\n  }\n  checkButton(previous, current) {\n    const previousIndicator = this.getIndicator(previous);\n    const currentIndicator = this.getIndicator(current);\n    if (previousIndicator === null || currentIndicator === null) {\n      return;\n    }\n    const previousClientRect = previousIndicator.getBoundingClientRect();\n    const currentClientRect = currentIndicator.getBoundingClientRect();\n    const widthDelta = previousClientRect.width / currentClientRect.width;\n    const xPosition = previousClientRect.left - currentClientRect.left;\n    // Scale the indicator width to match the previous indicator width\n    // and translate it on top of the previous indicator\n    const transform = `translate3d(${xPosition}px, 0, 0) scaleX(${widthDelta})`;\n    writeTask(() => {\n      // Remove the transition before positioning on top of the previous indicator\n      currentIndicator.classList.remove('segment-button-indicator-animated');\n      currentIndicator.style.setProperty('transform', transform);\n      // Force a repaint to ensure the transform happens\n      currentIndicator.getBoundingClientRect();\n      // Add the transition to move the indicator into place\n      currentIndicator.classList.add('segment-button-indicator-animated');\n      // Remove the transform to slide the indicator back to the button clicked\n      currentIndicator.style.setProperty('transform', '');\n      this.scrollActiveButtonIntoView(true);\n    });\n    this.value = current.value;\n    this.setCheckedClasses();\n  }\n  setCheckedClasses() {\n    const buttons = this.getButtons();\n    const index = buttons.findIndex(button => button.value === this.value);\n    const next = index + 1;\n    for (const button of buttons) {\n      button.classList.remove('segment-button-after-checked');\n    }\n    if (next < buttons.length) {\n      buttons[next].classList.add('segment-button-after-checked');\n    }\n  }\n  getSegmentView() {\n    const buttons = this.getButtons();\n    // Get the first button with a contentId\n    const firstContentId = buttons.find(button => button.contentId);\n    // Get the segment content with an id matching the button's contentId\n    const segmentContent = document.querySelector(`ion-segment-content[id=\"${firstContentId === null || firstContentId === void 0 ? void 0 : firstContentId.contentId}\"]`);\n    // Return the segment view for that matching segment content\n    return segmentContent === null || segmentContent === void 0 ? void 0 : segmentContent.closest('ion-segment-view');\n  }\n  handleSegmentViewScroll(ev) {\n    const {\n      scrollRatio,\n      isManualScroll\n    } = ev.detail;\n    if (!isManualScroll) {\n      return;\n    }\n    const dispatchedFrom = ev.target;\n    const segmentViewEl = this.segmentViewEl;\n    const segmentEl = this.el;\n    // Only update the indicator if the event was dispatched from the correct segment view\n    if (ev.composedPath().includes(segmentViewEl) || (dispatchedFrom === null || dispatchedFrom === void 0 ? void 0 : dispatchedFrom.contains(segmentEl))) {\n      const buttons = this.getButtons();\n      // If no buttons are found or there is no value set then do nothing\n      if (!buttons.length) return;\n      const index = buttons.findIndex(button => button.value === this.value);\n      const current = buttons[index];\n      const nextIndex = Math.round(scrollRatio * (buttons.length - 1));\n      if (this.lastNextIndex === undefined || this.lastNextIndex !== nextIndex) {\n        this.lastNextIndex = nextIndex;\n        this.triggerScrollOnValueChange = false;\n        this.checkButton(current, buttons[nextIndex]);\n        this.emitValueChange();\n      }\n    }\n  }\n  /**\n   * Finds the related segment view and sets its current content\n   * based on the selected segment button. This method\n   * should be called on initial load of the segment,\n   * after the gesture is completed (if dragging between segments)\n   * and when a segment button is clicked directly.\n   */\n  updateSegmentView(smoothScroll = true) {\n    const buttons = this.getButtons();\n    const button = buttons.find(btn => btn.value === this.value);\n    // If the button does not have a contentId then there is\n    // no associated segment view to update\n    if (!(button === null || button === void 0 ? void 0 : button.contentId)) {\n      return;\n    }\n    const segmentView = this.segmentViewEl;\n    if (segmentView) {\n      segmentView.setContent(button.contentId, smoothScroll);\n    }\n  }\n  scrollActiveButtonIntoView(smoothScroll = true) {\n    const {\n      scrollable,\n      value,\n      el\n    } = this;\n    if (scrollable) {\n      const buttons = this.getButtons();\n      const activeButton = buttons.find(button => button.value === value);\n      if (activeButton !== undefined) {\n        const scrollContainerBox = el.getBoundingClientRect();\n        const activeButtonBox = activeButton.getBoundingClientRect();\n        /**\n         * Subtract the active button x position from the scroll\n         * container x position. This will give us the x position\n         * of the active button within the scroll container.\n         */\n        const activeButtonLeft = activeButtonBox.x - scrollContainerBox.x;\n        /**\n         * If we just used activeButtonLeft, then the active button\n         * would be aligned with the left edge of the scroll container.\n         * Instead, we want the segment button to be centered. As a result,\n         * we subtract half of the scroll container width. This will position\n         * the left edge of the active button at the midpoint of the scroll container.\n         * We then add half of the active button width. This will position the active\n         * button such that the midpoint of the active button is at the midpoint of the\n         * scroll container.\n         */\n        const centeredX = activeButtonLeft - scrollContainerBox.width / 2 + activeButtonBox.width / 2;\n        /**\n         * newScrollPosition is the absolute scroll position that the\n         * container needs to move to in order to center the active button.\n         * It is calculated by adding the current scroll position\n         * (scrollLeft) to the offset needed to center the button\n         * (centeredX).\n         */\n        const newScrollPosition = el.scrollLeft + centeredX;\n        /**\n         * We intentionally use scrollTo here instead of scrollIntoView\n         * to avoid a WebKit bug where accelerated animations break\n         * when using scrollIntoView. Using scrollIntoView will cause the\n         * segment container to jump during the transition and then snap into place.\n         * This is because scrollIntoView can potentially cause parent element\n         * containers to also scroll. scrollTo does not have this same behavior, so\n         * we use this API instead.\n         *\n         * scrollTo is used instead of scrollBy because there is a\n         * Webkit bug that causes scrollBy to not work smoothly when\n         * the active button is near the edge of the scroll container.\n         * This leads to the buttons to jump around during the transition.\n         *\n         * Note that if there is not enough scrolling space to center the element\n         * within the scroll container, the browser will attempt\n         * to center by as much as it can.\n         */\n        el.scrollTo({\n          top: 0,\n          left: newScrollPosition,\n          behavior: smoothScroll ? 'smooth' : 'instant'\n        });\n      }\n    }\n  }\n  setNextIndex(detail, isEnd = false) {\n    const rtl = isRTL(this.el);\n    const activated = this.activated;\n    const buttons = this.getButtons();\n    const index = buttons.findIndex(button => button.value === this.value);\n    const previous = buttons[index];\n    let current;\n    let nextIndex;\n    if (index === -1) {\n      return;\n    }\n    // Get the element that the touch event started on in case\n    // it was the checked button, then we will move the indicator\n    const rect = previous.getBoundingClientRect();\n    const left = rect.left;\n    const width = rect.width;\n    // Get the element that the gesture is on top of based on the currentX of the\n    // gesture event and the Y coordinate of the starting element, since the gesture\n    // can move up and down off of the segment\n    const currentX = detail.currentX;\n    const previousY = rect.top + rect.height / 2;\n    /**\n     * Segment can be used inside the shadow dom\n     * so doing document.elementFromPoint would never\n     * return a segment button in that instance.\n     * We use getRootNode to which will return the parent\n     * shadow root if used inside a shadow component and\n     * returns document otherwise.\n     */\n    const root = this.el.getRootNode();\n    const nextEl = root.elementFromPoint(currentX, previousY);\n    const decreaseIndex = rtl ? currentX > left + width : currentX < left;\n    const increaseIndex = rtl ? currentX < left : currentX > left + width;\n    // If the indicator is currently activated then we have started the gesture\n    // on top of the checked button so we need to slide the indicator\n    // by checking the button next to it as we move\n    if (activated && !isEnd) {\n      // Decrease index, move left in LTR & right in RTL\n      if (decreaseIndex) {\n        const newIndex = index - 1;\n        if (newIndex >= 0) {\n          nextIndex = newIndex;\n        }\n        // Increase index, moves right in LTR & left in RTL\n      } else if (increaseIndex) {\n        if (activated && !isEnd) {\n          const newIndex = index + 1;\n          if (newIndex < buttons.length) {\n            nextIndex = newIndex;\n          }\n        }\n      }\n      if (nextIndex !== undefined && !buttons[nextIndex].disabled) {\n        current = buttons[nextIndex];\n      }\n    }\n    // If the indicator is not activated then we will just set the indicator\n    // to the element where the gesture ended\n    if (!activated && isEnd) {\n      current = nextEl;\n    }\n    if (current != null) {\n      /**\n       * If current element is ion-segment then that means\n       * user tried to select a disabled ion-segment-button,\n       * and we should not update the ripple.\n       */\n      if (current.tagName === 'ION-SEGMENT') {\n        return false;\n      }\n      if (previous !== current) {\n        this.checkButton(previous, current);\n      }\n    }\n    return true;\n  }\n  emitStyle() {\n    this.ionStyle.emit({\n      segment: true\n    });\n  }\n  onKeyDown(ev) {\n    const rtl = isRTL(this.el);\n    let keyDownSelectsButton = this.selectOnFocus;\n    let current;\n    switch (ev.key) {\n      case 'ArrowRight':\n        ev.preventDefault();\n        current = rtl ? this.getSegmentButton('previous') : this.getSegmentButton('next');\n        break;\n      case 'ArrowLeft':\n        ev.preventDefault();\n        current = rtl ? this.getSegmentButton('next') : this.getSegmentButton('previous');\n        break;\n      case 'Home':\n        ev.preventDefault();\n        current = this.getSegmentButton('first');\n        break;\n      case 'End':\n        ev.preventDefault();\n        current = this.getSegmentButton('last');\n        break;\n      case ' ':\n      case 'Enter':\n        ev.preventDefault();\n        current = document.activeElement;\n        keyDownSelectsButton = true;\n    }\n    if (!current) {\n      return;\n    }\n    if (keyDownSelectsButton) {\n      const previous = this.checked;\n      this.checkButton(previous || current, current);\n      if (current !== previous) {\n        this.emitValueChange();\n      }\n    }\n    current.setFocus();\n  }\n  render() {\n    const mode = getIonMode(this);\n    return h(Host, {\n      key: 'e67ed512739cf2cfe657b0c44ebc3dfb1e9fbb79',\n      role: \"tablist\",\n      onClick: this.onClick,\n      class: createColorClasses(this.color, {\n        [mode]: true,\n        'in-toolbar': hostContext('ion-toolbar', this.el),\n        'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n        'segment-activated': this.activated,\n        'segment-disabled': this.disabled,\n        'segment-scrollable': this.scrollable\n      })\n    }, h(\"slot\", {\n      key: '804d8acfcb9abfeeee38244b015fbc5c36330b9e',\n      onSlotchange: this.onSlottedItemsChange\n    }));\n  }\n  get el() {\n    return getElement(this);\n  }\n  static get watchers() {\n    return {\n      \"color\": [\"colorChanged\"],\n      \"swipeGesture\": [\"swipeGestureChanged\"],\n      \"value\": [\"valueChanged\"],\n      \"disabled\": [\"disabledChanged\"]\n    };\n  }\n};\nSegment.style = {\n  ios: segmentIosCss,\n  md: segmentMdCss\n};\nconst segmentButtonIosCss = \":host{--color:initial;--color-hover:var(--color);--color-checked:var(--color);--color-disabled:var(--color);--padding-start:0;--padding-end:0;--padding-top:0;--padding-bottom:0;border-radius:var(--border-radius);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:column;flex-direction:column;height:auto;background:var(--background);color:var(--color);text-decoration:none;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;grid-row:1;-webkit-font-kerning:none;font-kerning:none}.button-native{border-radius:0;font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;-webkit-margin-start:var(--margin-start);margin-inline-start:var(--margin-start);-webkit-margin-end:var(--margin-end);margin-inline-end:var(--margin-end);margin-top:var(--margin-top);margin-bottom:var(--margin-bottom);-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:inherit;flex-direction:inherit;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;min-width:inherit;max-width:inherit;height:auto;min-height:inherit;max-height:inherit;-webkit-transition:var(--transition);transition:var(--transition);border:none;outline:none;background:transparent;contain:content;pointer-events:none;overflow:hidden;z-index:2}.button-native::after{left:0;right:0;top:0;bottom:0;position:absolute;content:\\\"\\\";opacity:0}.button-inner{display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:inherit;flex-flow:inherit;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;z-index:1}:host(.segment-button-checked){background:var(--background-checked);color:var(--color-checked)}:host(.segment-button-disabled){cursor:default;pointer-events:none}:host(.ion-focused) .button-native{color:var(--color-focused)}:host(.ion-focused) .button-native::after{background:var(--background-focused);opacity:var(--background-focused-opacity)}:host(:focus){outline:none}@media (any-hover: hover){:host(:hover) .button-native{color:var(--color-hover)}:host(:hover) .button-native::after{background:var(--background-hover);opacity:var(--background-hover-opacity)}:host(.segment-button-checked:hover) .button-native{color:var(--color-checked)}}::slotted(ion-icon){-ms-flex-negative:0;flex-shrink:0;-ms-flex-order:-1;order:-1;pointer-events:none}::slotted(ion-label){display:block;-ms-flex-item-align:center;align-self:center;max-width:100%;line-height:22px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;pointer-events:none}:host(.segment-button-layout-icon-top) .button-native{-ms-flex-direction:column;flex-direction:column}:host(.segment-button-layout-icon-start) .button-native{-ms-flex-direction:row;flex-direction:row}:host(.segment-button-layout-icon-end) .button-native{-ms-flex-direction:row-reverse;flex-direction:row-reverse}:host(.segment-button-layout-icon-bottom) .button-native{-ms-flex-direction:column-reverse;flex-direction:column-reverse}:host(.segment-button-layout-icon-hide) ::slotted(ion-icon){display:none}:host(.segment-button-layout-label-hide) ::slotted(ion-label){display:none}ion-ripple-effect{color:var(--ripple-color, var(--color-checked))}.segment-button-indicator{-webkit-transform-origin:left;transform-origin:left;position:absolute;opacity:0;-webkit-box-sizing:border-box;box-sizing:border-box;will-change:transform, opacity;pointer-events:none}.segment-button-indicator-background{width:100%;height:var(--indicator-height);-webkit-transform:var(--indicator-transform);transform:var(--indicator-transform);-webkit-box-shadow:var(--indicator-box-shadow);box-shadow:var(--indicator-box-shadow);pointer-events:none}.segment-button-indicator-animated{-webkit-transition:var(--indicator-transition);transition:var(--indicator-transition)}:host(.segment-button-checked) .segment-button-indicator{opacity:1}@media (prefers-reduced-motion: reduce){.segment-button-indicator-background{-webkit-transform:none;transform:none}.segment-button-indicator-animated{-webkit-transition:none;transition:none}}:host{--background:none;--background-checked:none;--background-hover:none;--background-hover-opacity:0;--background-focused:none;--background-focused-opacity:0;--border-radius:7px;--border-width:1px;--border-color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.12);--border-style:solid;--indicator-box-shadow:0 0 5px rgba(0, 0, 0, 0.16);--indicator-color:var(--ion-color-step-350, var(--ion-background-color-step-350, var(--ion-background-color, #fff)));--indicator-height:100%;--indicator-transition:transform 260ms cubic-bezier(0.4, 0, 0.2, 1);--indicator-transform:none;--transition:100ms all linear;--padding-top:0;--padding-end:13px;--padding-bottom:0;--padding-start:13px;margin-top:2px;margin-bottom:2px;position:relative;-ms-flex-direction:row;flex-direction:row;min-width:70px;min-height:28px;-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);font-size:13px;font-weight:450;line-height:37px}:host::before{margin-left:0;margin-right:0;margin-top:5px;margin-bottom:5px;-webkit-transition:160ms opacity ease-in-out;transition:160ms opacity ease-in-out;-webkit-transition-delay:100ms;transition-delay:100ms;border-left:var(--border-width) var(--border-style) var(--border-color);content:\\\"\\\";opacity:1;will-change:opacity}:host(:first-of-type)::before{border-left-color:transparent}:host(.segment-button-disabled){opacity:0.3}::slotted(ion-icon){font-size:24px}:host(.segment-button-layout-icon-start) ::slotted(ion-label){-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:0;margin-inline-end:0}:host(.segment-button-layout-icon-end) ::slotted(ion-label){-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:2px;margin-inline-end:2px}.segment-button-indicator{-webkit-padding-start:2px;padding-inline-start:2px;-webkit-padding-end:2px;padding-inline-end:2px;left:0;right:0;top:0;bottom:0}.segment-button-indicator-background{border-radius:var(--border-radius);background:var(--indicator-color)}.segment-button-indicator-background{-webkit-transition:var(--indicator-transition);transition:var(--indicator-transition)}:host(.segment-button-checked)::before,:host(.segment-button-after-checked)::before{opacity:0}:host(.segment-button-checked){z-index:-1}:host(.segment-button-activated){--indicator-transform:scale(0.95)}:host(.ion-focused) .button-native{opacity:0.7}@media (any-hover: hover){:host(:hover) .button-native{opacity:0.5}:host(.segment-button-checked:hover) .button-native{opacity:1}}:host(.in-segment-color){background:none;color:var(--ion-text-color, #000)}:host(.in-segment-color) .segment-button-indicator-background{background:var(--ion-color-step-350, var(--ion-background-color-step-350, var(--ion-background-color, #fff)))}@media (any-hover: hover){:host(.in-segment-color:hover) .button-native,:host(.in-segment-color.segment-button-checked:hover) .button-native{color:var(--ion-text-color, #000)}}:host(.in-toolbar:not(.in-segment-color)){--background-checked:var(--ion-toolbar-segment-background-checked, none);--color:var(--ion-toolbar-segment-color, var(--ion-toolbar-color), initial);--color-checked:var(--ion-toolbar-segment-color-checked, var(--ion-toolbar-color), initial);--indicator-color:var(--ion-toolbar-segment-indicator-color, var(--ion-color-step-350, var(--ion-background-color-step-350, var(--ion-background-color, #fff))))}:host(.in-toolbar-color) .segment-button-indicator-background{background:var(--ion-color-contrast)}:host(.in-toolbar-color:not(.in-segment-color)) .button-native{color:var(--ion-color-contrast)}:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color)) .button-native{color:var(--ion-color-base)}@media (any-hover: hover){:host(.in-toolbar-color:not(.in-segment-color):hover) .button-native{color:var(--ion-color-contrast)}:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color):hover) .button-native{color:var(--ion-color-base)}}\";\nconst segmentButtonMdCss = \":host{--color:initial;--color-hover:var(--color);--color-checked:var(--color);--color-disabled:var(--color);--padding-start:0;--padding-end:0;--padding-top:0;--padding-bottom:0;border-radius:var(--border-radius);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:column;flex-direction:column;height:auto;background:var(--background);color:var(--color);text-decoration:none;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;grid-row:1;-webkit-font-kerning:none;font-kerning:none}.button-native{border-radius:0;font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;-webkit-margin-start:var(--margin-start);margin-inline-start:var(--margin-start);-webkit-margin-end:var(--margin-end);margin-inline-end:var(--margin-end);margin-top:var(--margin-top);margin-bottom:var(--margin-bottom);-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:inherit;flex-direction:inherit;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;min-width:inherit;max-width:inherit;height:auto;min-height:inherit;max-height:inherit;-webkit-transition:var(--transition);transition:var(--transition);border:none;outline:none;background:transparent;contain:content;pointer-events:none;overflow:hidden;z-index:2}.button-native::after{left:0;right:0;top:0;bottom:0;position:absolute;content:\\\"\\\";opacity:0}.button-inner{display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:inherit;flex-flow:inherit;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;z-index:1}:host(.segment-button-checked){background:var(--background-checked);color:var(--color-checked)}:host(.segment-button-disabled){cursor:default;pointer-events:none}:host(.ion-focused) .button-native{color:var(--color-focused)}:host(.ion-focused) .button-native::after{background:var(--background-focused);opacity:var(--background-focused-opacity)}:host(:focus){outline:none}@media (any-hover: hover){:host(:hover) .button-native{color:var(--color-hover)}:host(:hover) .button-native::after{background:var(--background-hover);opacity:var(--background-hover-opacity)}:host(.segment-button-checked:hover) .button-native{color:var(--color-checked)}}::slotted(ion-icon){-ms-flex-negative:0;flex-shrink:0;-ms-flex-order:-1;order:-1;pointer-events:none}::slotted(ion-label){display:block;-ms-flex-item-align:center;align-self:center;max-width:100%;line-height:22px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;pointer-events:none}:host(.segment-button-layout-icon-top) .button-native{-ms-flex-direction:column;flex-direction:column}:host(.segment-button-layout-icon-start) .button-native{-ms-flex-direction:row;flex-direction:row}:host(.segment-button-layout-icon-end) .button-native{-ms-flex-direction:row-reverse;flex-direction:row-reverse}:host(.segment-button-layout-icon-bottom) .button-native{-ms-flex-direction:column-reverse;flex-direction:column-reverse}:host(.segment-button-layout-icon-hide) ::slotted(ion-icon){display:none}:host(.segment-button-layout-label-hide) ::slotted(ion-label){display:none}ion-ripple-effect{color:var(--ripple-color, var(--color-checked))}.segment-button-indicator{-webkit-transform-origin:left;transform-origin:left;position:absolute;opacity:0;-webkit-box-sizing:border-box;box-sizing:border-box;will-change:transform, opacity;pointer-events:none}.segment-button-indicator-background{width:100%;height:var(--indicator-height);-webkit-transform:var(--indicator-transform);transform:var(--indicator-transform);-webkit-box-shadow:var(--indicator-box-shadow);box-shadow:var(--indicator-box-shadow);pointer-events:none}.segment-button-indicator-animated{-webkit-transition:var(--indicator-transition);transition:var(--indicator-transition)}:host(.segment-button-checked) .segment-button-indicator{opacity:1}@media (prefers-reduced-motion: reduce){.segment-button-indicator-background{-webkit-transform:none;transform:none}.segment-button-indicator-animated{-webkit-transition:none;transition:none}}:host{--background:none;--background-checked:none;--background-hover:var(--color-checked);--background-focused:var(--color-checked);--background-activated-opacity:0;--background-focused-opacity:.12;--background-hover-opacity:.04;--color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6);--color-checked:var(--ion-color-primary, #0054e9);--indicator-box-shadow:none;--indicator-color:var(--color-checked);--indicator-height:2px;--indicator-transition:transform 250ms cubic-bezier(0.4, 0, 0.2, 1);--indicator-transform:none;--padding-top:0;--padding-end:16px;--padding-bottom:0;--padding-start:16px;--transition:color 0.15s linear 0s, opacity 0.15s linear 0s;min-width:90px;min-height:48px;border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);font-size:14px;font-weight:500;letter-spacing:0.06em;line-height:40px;text-transform:uppercase}:host(.segment-button-disabled){opacity:0.3}:host(.in-segment-color){background:none;color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6)}:host(.in-segment-color) ion-ripple-effect{color:var(--ion-color-base)}:host(.in-segment-color) .segment-button-indicator-background{background:var(--ion-color-base)}:host(.in-segment-color.segment-button-checked) .button-native{color:var(--ion-color-base)}:host(.in-segment-color.ion-focused) .button-native::after{background:var(--ion-color-base)}@media (any-hover: hover){:host(.in-segment-color:hover) .button-native{color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6)}:host(.in-segment-color:hover) .button-native::after{background:var(--ion-color-base)}:host(.in-segment-color.segment-button-checked:hover) .button-native{color:var(--ion-color-base)}}:host(.in-toolbar:not(.in-segment-color)){--background:var(--ion-toolbar-segment-background, none);--background-checked:var(--ion-toolbar-segment-background-checked, none);--color:var(--ion-toolbar-segment-color, rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6));--color-checked:var(--ion-toolbar-segment-color-checked, var(--ion-color-primary, #0054e9));--indicator-color:var(--ion-toolbar-segment-color-checked, var(--color-checked))}:host(.in-toolbar-color:not(.in-segment-color)) .button-native{color:rgba(var(--ion-color-contrast-rgb), 0.6)}:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color)) .button-native{color:var(--ion-color-contrast)}@media (any-hover: hover){:host(.in-toolbar-color:not(.in-segment-color)) .button-native::after{background:var(--ion-color-contrast)}}::slotted(ion-icon){margin-top:12px;margin-bottom:12px;font-size:24px}::slotted(ion-label){margin-top:12px;margin-bottom:12px}:host(.segment-button-layout-icon-top) ::slotted(ion-label),:host(.segment-button-layout-icon-bottom) ::slotted(ion-icon){margin-top:0}:host(.segment-button-layout-icon-top) ::slotted(ion-icon),:host(.segment-button-layout-icon-bottom) ::slotted(ion-label){margin-bottom:0}:host(.segment-button-layout-icon-start) ::slotted(ion-label){-webkit-margin-start:8px;margin-inline-start:8px;-webkit-margin-end:0;margin-inline-end:0}:host(.segment-button-layout-icon-end) ::slotted(ion-label){-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:8px;margin-inline-end:8px}:host(.segment-button-has-icon-only) ::slotted(ion-icon){margin-top:12px;margin-bottom:12px}:host(.segment-button-has-label-only) ::slotted(ion-label){margin-top:12px;margin-bottom:12px}.segment-button-indicator{left:0;right:0;bottom:0}.segment-button-indicator-background{background:var(--indicator-color)}:host(.in-toolbar:not(.in-segment-color)) .segment-button-indicator-background{background:var(--ion-toolbar-segment-indicator-color, var(--indicator-color))}:host(.in-toolbar-color:not(.in-segment-color)) .segment-button-indicator-background{background:var(--ion-color-contrast)}\";\nlet ids = 0;\nconst SegmentButton = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.segmentEl = null;\n    this.inheritedAttributes = {};\n    this.checked = false;\n    /**\n     * If `true`, the user cannot interact with the segment button.\n     */\n    this.disabled = false;\n    /**\n     * Set the layout of the text and icon in the segment.\n     */\n    this.layout = 'icon-top';\n    /**\n     * The type of the button.\n     */\n    this.type = 'button';\n    /**\n     * The value of the segment button.\n     */\n    this.value = 'ion-sb-' + ids++;\n    this.updateStyle = () => {\n      forceUpdate(this);\n    };\n    this.updateState = () => {\n      const {\n        segmentEl\n      } = this;\n      if (segmentEl) {\n        this.checked = segmentEl.value === this.value;\n        if (segmentEl.disabled) {\n          this.disabled = true;\n        }\n      }\n    };\n  }\n  valueChanged() {\n    this.updateState();\n  }\n  connectedCallback() {\n    const segmentEl = this.segmentEl = this.el.closest('ion-segment');\n    if (segmentEl) {\n      this.updateState();\n      addEventListener(segmentEl, 'ionSelect', this.updateState);\n      addEventListener(segmentEl, 'ionStyle', this.updateStyle);\n    }\n    // Prevent buttons from being disabled when associated with segment content\n    if (this.contentId && this.disabled) {\n      printIonWarning(`[ion-segment-button] - Segment buttons cannot be disabled when associated with an <ion-segment-content>.`);\n      this.disabled = false;\n    }\n  }\n  disconnectedCallback() {\n    const segmentEl = this.segmentEl;\n    if (segmentEl) {\n      removeEventListener(segmentEl, 'ionSelect', this.updateState);\n      removeEventListener(segmentEl, 'ionStyle', this.updateStyle);\n      this.segmentEl = null;\n    }\n  }\n  componentWillLoad() {\n    this.inheritedAttributes = Object.assign({}, inheritAttributes(this.el, ['aria-label']));\n    // Return if there is no contentId defined\n    if (!this.contentId) return;\n    // Attempt to find the Segment Content by its contentId\n    const segmentContent = document.getElementById(this.contentId);\n    // If no associated Segment Content exists, log an error and return\n    if (!segmentContent) {\n      printIonError(`[ion-segment-button] - Unable to find Segment Content with id=\"${this.contentId}\".`);\n      return;\n    }\n    // Ensure the found element is a valid ION-SEGMENT-CONTENT\n    if (segmentContent.tagName !== 'ION-SEGMENT-CONTENT') {\n      printIonError(`[ion-segment-button] - Element with id=\"${this.contentId}\" is not an <ion-segment-content> element.`);\n      return;\n    }\n  }\n  get hasLabel() {\n    return !!this.el.querySelector('ion-label');\n  }\n  get hasIcon() {\n    return !!this.el.querySelector('ion-icon');\n  }\n  /**\n   * @internal\n   * Focuses the native <button> element\n   * inside of ion-segment-button.\n   */\n  async setFocus() {\n    const {\n      nativeEl\n    } = this;\n    if (nativeEl !== undefined) {\n      nativeEl.focus();\n    }\n  }\n  render() {\n    const {\n      checked,\n      type,\n      disabled,\n      hasIcon,\n      hasLabel,\n      layout,\n      segmentEl\n    } = this;\n    const mode = getIonMode(this);\n    const hasSegmentColor = () => (segmentEl === null || segmentEl === void 0 ? void 0 : segmentEl.color) !== undefined;\n    return h(Host, {\n      key: '26cb7ee90455bcaa6416125802d7e5729fa05b5b',\n      class: {\n        [mode]: true,\n        'in-toolbar': hostContext('ion-toolbar', this.el),\n        'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n        'in-segment': hostContext('ion-segment', this.el),\n        'in-segment-color': hasSegmentColor(),\n        'segment-button-has-label': hasLabel,\n        'segment-button-has-icon': hasIcon,\n        'segment-button-has-label-only': hasLabel && !hasIcon,\n        'segment-button-has-icon-only': hasIcon && !hasLabel,\n        'segment-button-disabled': disabled,\n        'segment-button-checked': checked,\n        [`segment-button-layout-${layout}`]: true,\n        'ion-activatable': true,\n        'ion-activatable-instant': true,\n        'ion-focusable': true\n      }\n    }, h(\"button\", Object.assign({\n      key: '75add37f11c107d1e2cfdb154e08004e9579e863',\n      \"aria-selected\": checked ? 'true' : 'false',\n      role: \"tab\",\n      ref: el => this.nativeEl = el,\n      type: type,\n      class: \"button-native\",\n      part: \"native\",\n      disabled: disabled\n    }, this.inheritedAttributes), h(\"span\", {\n      key: '8e720d2a3e304903685bf09d226a64e944d78a22',\n      class: \"button-inner\"\n    }, h(\"slot\", {\n      key: 'c8e7b3ebf8f03042a1001155643b585283c73c65'\n    })), mode === 'md' && h(\"ion-ripple-effect\", {\n      key: '3586ac317b8d82c92b0ccfbfae42f8778612321b'\n    })), h(\"div\", {\n      key: '9cf93957da9e8dc333c8b05327bb903385b1c5f4',\n      part: \"indicator\",\n      class: \"segment-button-indicator segment-button-indicator-animated\"\n    }, h(\"div\", {\n      key: 'd3b6f0b3860ec6896b46703f64ed1cc8c75612e3',\n      part: \"indicator-background\",\n      class: \"segment-button-indicator-background\"\n    })));\n  }\n  get el() {\n    return getElement(this);\n  }\n  static get watchers() {\n    return {\n      \"value\": [\"valueChanged\"]\n    };\n  }\n};\nSegmentButton.style = {\n  ios: segmentButtonIosCss,\n  md: segmentButtonMdCss\n};\nexport { Segment as ion_segment, SegmentButton as ion_segment_button };"],"mappings":"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","names":[],"x_google_ignoreList":[0]}