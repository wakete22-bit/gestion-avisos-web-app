{
  "version": 3,
  "sources": ["src/app/modules/presupuestos/components/crear-presupuesto/crear-presupuesto.component.ts", "src/app/modules/presupuestos/components/crear-presupuesto/crear-presupuesto.component.html"],
  "sourcesContent": ["import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonContent, IonIcon } from '@ionic/angular/standalone';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Subject, takeUntil } from 'rxjs';\nimport { addIcons } from 'ionicons';\nimport { \n  arrowBackOutline, \n  saveOutline, \n  addCircleOutline, \n  trashOutline, \n  refreshOutline,\n  listOutline,\n  close,\n  searchOutline,\n  addCircle,\n  cubeOutline,\n  alertCircleOutline\n} from 'ionicons/icons';\nimport { PresupuestosService, CrearPresupuestoRequest } from '../../services/presupuestos.service';\nimport { AvisosService } from '../../../../core/services/avisos.service';\nimport { InventarioService } from '../../../inventario/services/inventario.service';\nimport { Inventario } from '../../../inventario/models/inventario.model';\n\n@Component({\n  selector: 'app-crear-presupuesto',\n  templateUrl: './crear-presupuesto.component.html',\n  styleUrls: ['./crear-presupuesto.component.scss'],\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, FormsModule, IonContent, IonIcon]\n})\nexport class CrearPresupuestoComponent implements OnInit {\n  presupuestoForm: FormGroup;\n  avisoId: string | null = null;\n  presupuestoId: string | null = null;\n  aviso: any = null;\n  presupuesto: any = null;\n  loading = false;\n  materiales: any[] = [];\n  modoEdicion = false;\n  \n  // Variables para la selección de materiales del inventario\n  productosInventario: Inventario[] = [];\n  productosFiltrados: Inventario[] = [];\n  loadingProductos = false;\n  errorProductos: string | null = null;\n  busquedaProducto = '';\n  mostrarSelectorMateriales = false;\n\n  private destroy$ = new Subject<void>();\n  private formStatusSubscription: any;\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private route: ActivatedRoute,\n    private presupuestosService: PresupuestosService,\n    private avisosService: AvisosService,\n    private inventarioService: InventarioService\n  ) {\n    addIcons({\n      arrowBackOutline,\n      saveOutline,\n      addCircleOutline,\n      trashOutline,\n      refreshOutline,\n      listOutline,\n      close,\n      searchOutline,\n      addCircle,\n      cubeOutline,\n      alertCircleOutline\n    });\n    \n    this.presupuestoForm = this.fb.group({\n      horas_estimadas: [0, [Validators.required, Validators.min(0), Validators.max(1000)]],\n      total_estimado: [0, [Validators.required, Validators.min(0), Validators.max(1000000)]]\n    });\n\n    // Suscribirse a cambios en el formulario para debugging\n    this.formStatusSubscription = this.presupuestoForm.statusChanges.subscribe(status => {\n      console.log('Estado del formulario:', status);\n      console.log('Formulario válido:', this.presupuestoForm.valid);\n      console.log('Errores:', this.presupuestoForm.errors);\n    });\n  }\n\n  ngOnInit() {\n    this.cargarAviso();\n    this.cargarProductosInventario();\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n    if (this.formStatusSubscription) {\n      this.formStatusSubscription.unsubscribe();\n    }\n  }\n\n  cargarAviso() {\n    this.route.queryParams.subscribe(params => {\n      this.avisoId = params['avisoId'];\n      this.presupuestoId = params['id'];\n      this.modoEdicion = params['edit'] === 'true';\n\n      console.log('Parámetros de ruta:', {\n        avisoId: this.avisoId,\n        presupuestoId: this.presupuestoId,\n        modoEdicion: this.modoEdicion\n      });\n\n      if (this.avisoId) {\n        this.avisosService.getAviso(this.avisoId).subscribe({\n          next: (aviso: any) => {\n            this.aviso = aviso;\n            console.log('Aviso cargado:', aviso);\n          },\n          error: (error: any) => {\n            console.error('Error al cargar aviso:', error);\n          }\n        });\n      }\n\n      if (this.presupuestoId && this.modoEdicion) {\n        this.cargarPresupuestoParaEditar();\n      }\n    });\n  }\n\n  /**\n   * Verifica los precios de los productos del inventario\n   */\n  verificarPreciosInventario() {\n    console.log('Verificando precios del inventario...');\n    this.productosInventario.forEach((producto, index) => {\n      console.log(`Producto ${index + 1}:`, {\n        id: producto.id,\n        nombre: producto.nombre,\n        precio_neto: producto.precio_neto,\n        tipo_precio: typeof producto.precio_neto,\n        es_valido: !isNaN(producto.precio_neto) && isFinite(producto.precio_neto)\n      });\n    });\n  }\n\n  /**\n   * Carga los productos del inventario\n   */\n  cargarProductosInventario() {\n    this.loadingProductos = true;\n    this.errorProductos = null;\n\n    this.inventarioService.getInventario(1, 1000, '', 'nombre', 'asc', false)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (response) => {\n          this.productosInventario = response.inventario;\n          this.productosFiltrados = [...this.productosInventario];\n          this.loadingProductos = false;\n          console.log('Productos del inventario cargados:', this.productosInventario.length);\n          \n          // Verificar precios de los productos\n          this.verificarPreciosInventario();\n          \n          // Si estamos en modo edición y tenemos materiales pendientes de procesar\n          if (this.modoEdicion && this.presupuesto && this.presupuesto.materiales) {\n            console.log('Reprocesando materiales después de cargar inventario');\n            this.procesarMateriales(this.presupuesto.materiales);\n          }\n        },\n        error: (error) => {\n          console.error('Error al cargar productos del inventario:', error);\n          this.errorProductos = 'Error al cargar productos del inventario';\n          this.loadingProductos = false;\n        }\n      });\n  }\n\n  /**\n   * Filtra productos del inventario por búsqueda\n   */\n  filtrarProductos(event: any) {\n    const termino = event?.target?.value || event || '';\n    this.busquedaProducto = termino;\n    if (!termino.trim()) {\n      this.productosFiltrados = [...this.productosInventario];\n    } else {\n      this.productosFiltrados = this.productosInventario.filter(producto =>\n        producto.nombre.toLowerCase().includes(termino.toLowerCase()) ||\n        producto.codigo.toLowerCase().includes(termino.toLowerCase()) ||\n        (producto.descripcion?.toLowerCase() || '').includes(termino.toLowerCase())\n      );\n    }\n  }\n\n  /**\n   * Abre el selector de materiales\n   */\n  abrirSelectorMateriales() {\n    this.mostrarSelectorMateriales = true;\n    this.productosFiltrados = [...this.productosInventario];\n    this.busquedaProducto = '';\n  }\n\n  /**\n   * Cierra el selector de materiales\n   */\n  cerrarSelectorMateriales() {\n    this.mostrarSelectorMateriales = false;\n  }\n\n  /**\n   * Añade un producto del inventario como material\n   */\n  agregarMaterialDelInventario(producto: Inventario) {\n    console.log('Agregando material del inventario:', producto);\n    console.log('Precio del producto:', producto.precio_neto);\n    \n    // Verificar si el producto ya está en la lista\n    const yaExiste = this.materiales.find(m => m.material_id === producto.id);\n    \n    if (yaExiste) {\n      // Si ya existe, incrementar la cantidad\n      yaExiste.cantidad_estimada = (yaExiste.cantidad_estimada || 0) + 1;\n      console.log('Material existente actualizado:', yaExiste);\n    } else {\n      // Si no existe, añadirlo con cantidad 1\n      const nuevoMaterial = {\n        material_id: producto.id,\n        cantidad_estimada: 1,\n        precio_neto_al_momento: producto.precio_neto,\n        producto: producto // Guardar referencia al producto para mostrar información\n      };\n      this.materiales.push(nuevoMaterial);\n      console.log('Nuevo material agregado:', nuevoMaterial);\n    }\n    \n    this.calcularTotal(true); // Sin verificación para evitar bucle\n    this.cerrarSelectorMateriales();\n  }\n\n  /**\n   * Obtiene el nombre del producto por ID\n   */\n  getNombreProducto(materialId: string): string {\n    // Primero buscar en los productos del inventario\n    const producto = this.productosInventario.find(p => p.id === materialId);\n    if (producto) {\n      return producto.nombre;\n    }\n    \n    // Si no se encuentra en el inventario, buscar en los materiales del presupuesto\n    const material = this.materiales.find(m => m.material_id === materialId);\n    if (material && material.producto) {\n      return material.producto.nombre || 'Producto no encontrado';\n    }\n    \n    return 'Producto no encontrado';\n  }\n\n  /**\n   * Obtiene el precio del producto por ID\n   */\n  getPrecioProducto(materialId: string): number {\n    // Primero buscar en los productos del inventario\n    const producto = this.productosInventario.find(p => p.id === materialId);\n    if (producto) {\n      return producto.precio_neto;\n    }\n    \n    // Si no se encuentra en el inventario, buscar en los materiales del presupuesto\n    const material = this.materiales.find(m => m.material_id === materialId);\n    if (material && material.producto) {\n      return material.producto.precio_neto || 0;\n    }\n    \n    return 0;\n  }\n\n  cargarPresupuestoParaEditar() {\n    if (!this.presupuestoId) return;\n\n    this.loading = true;\n    this.presupuestosService.getPresupuesto(this.presupuestoId).subscribe({\n      next: (presupuesto) => {\n        console.log('Presupuesto cargado para editar:', presupuesto);\n        this.presupuesto = presupuesto;\n        \n        // Establecer el avisoId desde el presupuesto\n        if (presupuesto.aviso_id) {\n          this.avisoId = presupuesto.aviso_id;\n          console.log('AvisoId establecido:', this.avisoId);\n        }\n        \n        this.presupuestoForm.patchValue({\n          horas_estimadas: presupuesto.horas_estimadas,\n          total_estimado: presupuesto.total_estimado\n        });\n\n        // Cargar materiales si existen - esperar a que los productos del inventario estén cargados\n        if (presupuesto.materiales && presupuesto.materiales.length > 0) {\n          console.log('Materiales encontrados:', presupuesto.materiales);\n          \n          // Esperar a que los productos del inventario estén cargados\n          if (this.productosInventario.length > 0) {\n            this.procesarMateriales(presupuesto.materiales);\n          } else {\n            // Si no están cargados, esperar un poco y reintentar\n            setTimeout(() => {\n              this.procesarMateriales(presupuesto.materiales);\n            }, 500);\n          }\n        } else {\n          console.log('No se encontraron materiales en el presupuesto');\n          this.materiales = [];\n        }\n\n        setTimeout(() => {\n          this.calcularTotal(true);\n        }, 100);\n        \n        this.loading = false;\n      },\n      error: (error) => {\n        console.error('Error al cargar presupuesto para editar:', error);\n        this.loading = false;\n      }\n    });\n  }\n\n  /**\n   * Procesa los materiales del presupuesto\n   */\n  procesarMateriales(materialesPresupuesto: any[]) {\n    console.log('Procesando materiales:', materialesPresupuesto);\n    this.materiales = materialesPresupuesto.map((material: any) => {\n      console.log('Procesando material:', material);\n      console.log('Precio del material:', material.precio_neto_al_momento);\n      console.log('Material completo:', material);\n      \n      const materialProcesado = {\n        material_id: material.material_id,\n        cantidad_estimada: material.cantidad_estimada || 1,\n        precio_neto_al_momento: material.precio_neto_al_momento || 0,\n        producto: material.material // Guardar referencia al producto del inventario\n      };\n      \n      console.log('Material procesado:', materialProcesado);\n      return materialProcesado;\n    });\n    console.log('Materiales procesados:', this.materiales);\n  }\n\n  agregarMaterial() {\n    this.materiales.push({\n      material_id: '',\n      cantidad_estimada: 1,\n      precio_neto_al_momento: 0\n    });\n  }\n\n  eliminarMaterial(index: number) {\n    console.log('Eliminando material en índice:', index);\n    console.log('Material a eliminar:', this.materiales[index]);\n    \n    this.materiales.splice(index, 1);\n    console.log('Materiales después de eliminar:', this.materiales);\n    \n    // Recalcular el total y actualizar el formulario\n    this.calcularTotal(true); // Sin verificación para evitar bucle\n    \n    // Forzar la actualización del formulario\n    this.presupuestoForm.updateValueAndValidity();\n    \n    console.log('Total estimado después de eliminar material:', this.presupuestoForm.get('total_estimado')?.value);\n    \n    // Verificar el estado después de eliminar\n    this.verificarEstadoMateriales();\n  }\n\n  /**\n   * Actualiza la cantidad de un material\n   */\n  actualizarCantidadMaterial(index: number, event: any) {\n    const nuevaCantidad = event?.target?.value || event || '1';\n    console.log('Actualizando cantidad del material:', index, 'Nueva cantidad:', nuevaCantidad);\n    \n    if (this.materiales[index]) {\n      this.materiales[index].cantidad_estimada = parseInt(nuevaCantidad) || 1;\n      console.log('Material actualizado:', this.materiales[index]);\n      this.calcularTotal(true); // Sin verificación para evitar bucle\n      this.verificarEstadoMateriales();\n    }\n  }\n\n  /**\n   * Actualiza el precio de un material\n   */\n  actualizarPrecioMaterial(index: number, event: any) {\n    const nuevoPrecio = event?.target?.value || event || '0';\n    console.log('Actualizando precio del material:', index, 'Nuevo precio:', nuevoPrecio);\n    \n    if (this.materiales[index]) {\n      this.materiales[index].precio_neto_al_momento = parseFloat(nuevoPrecio) || 0;\n      console.log('Material actualizado:', this.materiales[index]);\n      this.calcularTotal(true); // Sin verificación para evitar bucle\n      this.verificarEstadoMateriales();\n    }\n  }\n\n  /**\n   * Verifica el estado de los materiales y el total\n   */\n  verificarEstadoMateriales() {\n    console.log('=== Verificación de Estado de Materiales ===');\n    console.log('Cantidad de materiales:', this.materiales.length);\n    console.log('Materiales:', this.materiales);\n    console.log('Total estimado en formulario:', this.presupuestoForm.get('total_estimado')?.value);\n    console.log('Costo total calculado:', this.calcularCostoTotalMateriales());\n    \n    // Calcular el total sin verificación para evitar bucle infinito\n    const horasEstimadas = this.presupuestoForm.get('horas_estimadas')?.value || 0;\n    const precioPorHora = 50;\n    const costoManoObra = horasEstimadas * precioPorHora;\n    const costoMateriales = this.materiales.reduce((total, material) => {\n      const cantidad = material.cantidad_estimada || 0;\n      const precio = material.precio_neto_al_momento || 0;\n      return total + (cantidad * precio);\n    }, 0);\n    const totalCalculado = costoManoObra + costoMateriales;\n    \n    console.log('Total calculado (mano obra + materiales):', totalCalculado);\n    console.log('==========================================');\n  }\n\n  /**\n   * Calcula el costo total de materiales\n   */\n  calcularCostoTotalMateriales(): number {\n    return this.materiales.reduce((total, m) => total + (m.cantidad_estimada * m.precio_neto_al_momento), 0);\n  }\n\n  calcularTotal(sinVerificacion: boolean = false) {\n    console.log('Calculando total...');\n    console.log('Materiales actuales:', this.materiales);\n    \n    const horasEstimadas = this.presupuestoForm.get('horas_estimadas')?.value || 0;\n    const precioPorHora = 50; // Esto debería venir de configuración\n    const costoManoObra = horasEstimadas * precioPorHora;\n    \n    const costoMateriales = this.materiales.reduce((total, material) => {\n      const cantidad = material.cantidad_estimada || 0;\n      const precio = material.precio_neto_al_momento || 0;\n      const subtotal = cantidad * precio;\n      console.log(`Material: ${material.material_id}, Cantidad: ${cantidad}, Precio: ${precio}, Subtotal: ${subtotal}`);\n      return total + subtotal;\n    }, 0);\n    \n    const totalEstimado = costoManoObra + costoMateriales;\n    console.log('Calculando total:', {\n      horasEstimadas,\n      precioPorHora,\n      costoManoObra,\n      costoMateriales,\n      totalEstimado\n    });\n    \n    // Asegurar que el valor sea un número válido\n    if (isNaN(totalEstimado) || !isFinite(totalEstimado)) {\n      console.error('Error: Total calculado no es un número válido');\n      this.presupuestoForm.patchValue({ total_estimado: 0 });\n    } else {\n      this.presupuestoForm.patchValue({ total_estimado: totalEstimado });\n    }\n    \n    // Forzar la validación del formulario\n    this.presupuestoForm.updateValueAndValidity();\n    console.log('Formulario después de calcular total:', {\n      válido: this.presupuestoForm.valid,\n      errores: this.presupuestoForm.errors,\n      total_estimado: this.presupuestoForm.get('total_estimado')?.value\n    });\n    \n    // Solo verificar si no se especifica sinVerificacion\n    if (!sinVerificacion) {\n      this.verificarEstadoMateriales();\n    }\n  }\n\n  /**\n   * Limpia materiales vacíos o inválidos\n   */\n  limpiarMaterialesInvalidos(): void {\n    console.log('Limpiando materiales inválidos...');\n    console.log('Materiales antes de limpiar:', this.materiales);\n    \n    // Filtrar solo materiales válidos\n    this.materiales = this.materiales.filter(material => \n      material.material_id && \n      material.cantidad_estimada > 0 && \n      material.precio_neto_al_momento >= 0\n    );\n    \n    console.log('Materiales después de limpiar:', this.materiales);\n  }\n\n  /**\n   * Verifica el estado de los materiales antes de guardar\n   */\n  verificarMaterialesAntesDeGuardar(): void {\n    console.log('=== Verificación de Materiales Antes de Guardar ===');\n    console.log('Cantidad de materiales:', this.materiales.length);\n    console.log('Materiales:', this.materiales);\n    console.log('Materiales válidos:', this.materiales.filter(m => m.material_id && m.cantidad_estimada > 0));\n    console.log('Materiales con precio válido:', this.materiales.filter(m => m.precio_neto_al_momento > 0));\n    console.log('==================================================');\n  }\n\n  /**\n   * Verifica si el formulario está listo para guardar\n   */\n  verificarFormulario(): boolean {\n    console.log('Verificando formulario...');\n    console.log('AvisoId actual:', this.avisoId);\n    console.log('Modo edición:', this.modoEdicion);\n    console.log('PresupuestoId:', this.presupuestoId);\n    \n    // Verificar avisoId\n    if (!this.avisoId) {\n      console.error('No hay avisoId');\n      return false;\n    }\n    \n    // Verificar si el formulario es válido\n    if (!this.presupuestoForm.valid) {\n      console.error('Formulario inválido');\n      console.log('Errores del formulario:', this.presupuestoForm.errors);\n      console.log('Errores de horas_estimadas:', this.presupuestoForm.get('horas_estimadas')?.errors);\n      console.log('Errores de total_estimado:', this.presupuestoForm.get('total_estimado')?.errors);\n      return false;\n    }\n    \n    // Verificar valores mínimos\n    const horasEstimadas = this.presupuestoForm.get('horas_estimadas')?.value;\n    const totalEstimado = this.presupuestoForm.get('total_estimado')?.value;\n    \n    if (horasEstimadas < 0 || totalEstimado < 0) {\n      console.error('Valores negativos no permitidos');\n      return false;\n    }\n    \n    console.log('Formulario verificado correctamente');\n    return true;\n  }\n\n  guardarPresupuesto() {\n    console.log('Iniciando guardarPresupuesto...');\n    console.log('Formulario válido:', this.presupuestoForm.valid);\n    console.log('Aviso ID:', this.avisoId);\n    console.log('Valores del formulario:', this.presupuestoForm.value);\n    console.log('Materiales:', this.materiales);\n\n    // Usar el método de verificación\n    if (!this.verificarFormulario()) {\n      alert('Por favor, complete todos los campos requeridos correctamente');\n      return;\n    }\n\n    this.loading = true;\n    console.log('Iniciando operación de guardado...');\n    \n    // Verificar materiales antes de guardar\n    this.verificarMaterialesAntesDeGuardar();\n    \n    // Limpiar materiales inválidos\n    this.limpiarMaterialesInvalidos();\n    \n    if (this.modoEdicion && this.presupuestoId) {\n      // Modo edición - actualizar presupuesto existente\n      console.log('Modo edición - actualizando presupuesto:', this.presupuestoId);\n      const presupuestoData = {\n        horas_estimadas: this.presupuestoForm.get('horas_estimadas')?.value,\n        total_estimado: this.presupuestoForm.get('total_estimado')?.value,\n        materiales: this.materiales // Incluir materiales en la actualización\n      };\n\n      console.log('Datos para actualizar:', presupuestoData);\n      console.log('Materiales a actualizar:', this.materiales);\n      console.log('Cantidad de materiales:', this.materiales.length);\n      console.log('Materiales detallados:', JSON.stringify(this.materiales, null, 2));\n\n      this.presupuestosService.actualizarPresupuesto(this.presupuestoId, presupuestoData).subscribe({\n        next: (presupuesto) => {\n          console.log('Presupuesto actualizado exitosamente:', presupuesto);\n          this.loading = false;\n          alert('Presupuesto actualizado correctamente');\n          this.router.navigate(['/presupuestos']);\n        },\n        error: (error) => {\n          console.error('Error al actualizar presupuesto:', error);\n          this.loading = false;\n          alert('Error al actualizar el presupuesto: ' + (error.message || 'Error desconocido'));\n        }\n      });\n    } else {\n      // Modo creación - crear nuevo presupuesto\n      console.log('Modo creación - creando nuevo presupuesto');\n      const presupuestoData: CrearPresupuestoRequest = {\n        aviso_id: this.avisoId || '',\n        horas_estimadas: this.presupuestoForm.get('horas_estimadas')?.value,\n        total_estimado: this.presupuestoForm.get('total_estimado')?.value,\n        materiales: this.materiales\n      };\n\n      console.log('Datos para crear:', presupuestoData);\n\n      this.presupuestosService.crearPresupuesto(presupuestoData).subscribe({\n        next: (presupuesto) => {\n          console.log('Presupuesto creado exitosamente:', presupuesto);\n          this.loading = false;\n          alert('Presupuesto creado correctamente');\n          this.router.navigate(['/presupuestos']);\n        },\n        error: (error) => {\n          console.error('Error al crear presupuesto:', error);\n          this.loading = false;\n          alert('Error al crear el presupuesto: ' + (error.message || 'Error desconocido'));\n        }\n      });\n    }\n  }\n\n  volver() {\n    this.router.navigate(['/presupuestos']);\n  }\n} ", "<ion-content>\r\n  <div class=\"presupuesto-container\">\r\n    <!-- Header -->\r\n    <div class=\"page-header\">\r\n      <button class=\"btn-back\" (click)=\"volver()\">\r\n        <ion-icon name=\"arrow-back-outline\"></ion-icon>\r\n        Volver\r\n      </button>\r\n      <h1>{{ modoEdicion ? 'Editar Presupuesto' : 'Crear Presupuesto' }}</h1>\r\n    </div>\r\n\r\n    <!-- Estado de carga -->\r\n    <div *ngIf=\"loading && modoEdicion\" class=\"loading-state\">\r\n      <div class=\"loading-spinner\">\r\n        <ion-icon name=\"refresh-outline\" class=\"spinning\"></ion-icon>\r\n        <p>Cargando presupuesto...</p>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Información del Aviso -->\r\n    <div class=\"aviso-info\" *ngIf=\"aviso && !loading\">\r\n      <h2>Aviso: #{{ aviso.id?.substring(0, 8) }}</h2>\r\n      <p><strong>Cliente:</strong> {{ aviso.nombre_cliente_aviso }}</p>\r\n      <p><strong>Descripción:</strong> {{ aviso.descripcion_problema }}</p>\r\n    </div>\r\n\r\n    <!-- Formulario -->\r\n    <form [formGroup]=\"presupuestoForm\" (ngSubmit)=\"guardarPresupuesto()\">\r\n      <div class=\"form-section\">\r\n        <h3>Estimación de Trabajo</h3>\r\n        \r\n        <div class=\"form-group\">\r\n          <label>Horas estimadas</label>\r\n          <input \r\n            type=\"number\" \r\n            formControlName=\"horas_estimadas\"\r\n            (input)=\"calcularTotal()\"\r\n            min=\"0\"\r\n            step=\"0.5\"\r\n            placeholder=\"0.0\">\r\n          <div *ngIf=\"presupuestoForm.get('horas_estimadas')?.invalid && presupuestoForm.get('horas_estimadas')?.touched\" class=\"error-message\">\r\n            <span *ngIf=\"presupuestoForm.get('horas_estimadas')?.errors?.['required']\">Las horas estimadas son requeridas</span>\r\n            <span *ngIf=\"presupuestoForm.get('horas_estimadas')?.errors?.['min']\">Las horas deben ser mayor o igual a 0</span>\r\n            <span *ngIf=\"presupuestoForm.get('horas_estimadas')?.errors?.['max']\">Las horas no pueden exceder 1000</span>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label>Total estimado (€)</label>\r\n          <input \r\n            type=\"number\" \r\n            formControlName=\"total_estimado\"\r\n            min=\"0\"\r\n            step=\"0.01\"\r\n            placeholder=\"0.00\">\r\n          <div *ngIf=\"presupuestoForm.get('total_estimado')?.invalid && presupuestoForm.get('total_estimado')?.touched\" class=\"error-message\">\r\n            <span *ngIf=\"presupuestoForm.get('total_estimado')?.errors?.['required']\">El total estimado es requerido</span>\r\n            <span *ngIf=\"presupuestoForm.get('total_estimado')?.errors?.['min']\">El total debe ser mayor o igual a 0</span>\r\n            <span *ngIf=\"presupuestoForm.get('total_estimado')?.errors?.['max']\">El total no puede exceder 1,000,000</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Materiales -->\r\n      <div class=\"form-section\">\r\n        <div class=\"section-header\">\r\n          <h3>Materiales Estimados</h3>\r\n          <div class=\"header-actions\">\r\n            <button type=\"button\" class=\"btn-select-inventory\" (click)=\"abrirSelectorMateriales()\">\r\n              <ion-icon name=\"list-outline\"></ion-icon>\r\n              Seleccionar del Inventario\r\n            </button>\r\n            <button type=\"button\" class=\"btn-add\" (click)=\"agregarMaterial()\">\r\n              <ion-icon name=\"add-circle-outline\"></ion-icon>\r\n              Agregar Manualmente\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Selector de materiales del inventario -->\r\n        <div *ngIf=\"mostrarSelectorMateriales\" class=\"inventory-selector\">\r\n          <div class=\"selector-header\">\r\n            <h4>Seleccionar Materiales del Inventario</h4>\r\n            <button type=\"button\" class=\"btn-close\" (click)=\"cerrarSelectorMateriales()\">\r\n              <ion-icon name=\"close\"></ion-icon>\r\n            </button>\r\n          </div>\r\n          \r\n          <!-- Búsqueda de productos -->\r\n          <div class=\"search-container\">\r\n            <input \r\n              type=\"text\" \r\n              [(ngModel)]=\"busquedaProducto\"\r\n              (input)=\"filtrarProductos($event)\"\r\n              placeholder=\"Buscar productos...\"\r\n              class=\"search-input\">\r\n            <ion-icon name=\"search-outline\"></ion-icon>\r\n          </div>\r\n\r\n          <!-- Estado de carga de productos -->\r\n          <div *ngIf=\"loadingProductos\" class=\"loading-products\">\r\n            <ion-icon name=\"refresh-outline\" class=\"spinning\"></ion-icon>\r\n            <span>Cargando productos...</span>\r\n          </div>\r\n\r\n          <!-- Error al cargar productos -->\r\n          <div *ngIf=\"errorProductos\" class=\"error-products\">\r\n            <ion-icon name=\"alert-circle-outline\"></ion-icon>\r\n            <span>{{ errorProductos }}</span>\r\n          </div>\r\n\r\n          <!-- Lista de productos -->\r\n          <div *ngIf=\"!loadingProductos && !errorProductos\" class=\"products-list\">\r\n            <div \r\n              *ngFor=\"let producto of productosFiltrados\" \r\n              class=\"product-item\"\r\n              (click)=\"agregarMaterialDelInventario(producto)\">\r\n              <div class=\"product-info\">\r\n                <div class=\"product-header\">\r\n                  <span class=\"product-code\">{{ producto.codigo }}</span>\r\n                  <span class=\"product-price\">{{ producto.precio_neto | currency:'EUR':'symbol':'1.2-2' }}</span>\r\n                </div>\r\n                <span class=\"product-name\">{{ producto.nombre }}</span>\r\n                <div class=\"product-details\">\r\n                  <span class=\"product-stock\">Stock: {{ producto.cantidad_disponible }} {{ producto.unidad }}</span>\r\n                  <span class=\"product-description\">{{ producto.descripcion }}</span>\r\n                </div>\r\n              </div>\r\n              <ion-icon name=\"add-circle-outline\" class=\"add-icon\"></ion-icon>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Sin productos -->\r\n          <div *ngIf=\"!loadingProductos && !errorProductos && productosFiltrados.length === 0\" class=\"no-products\">\r\n            <ion-icon name=\"cube-outline\"></ion-icon>\r\n            <p>No se encontraron productos</p>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Lista de materiales añadidos -->\r\n        <div class=\"materiales-list\" *ngIf=\"materiales.length > 0\">\r\n          <h4>Materiales añadidos</h4>\r\n          <div class=\"material-item\" *ngFor=\"let material of materiales; let i = index\">\r\n            <div class=\"material-info\">\r\n              <div class=\"material-header\">\r\n                <span class=\"material-name\">{{ getNombreProducto(material.material_id) }}</span>\r\n                <span class=\"material-price\">{{ material.precio_neto_al_momento | currency:'EUR':'symbol':'1.2-2' }}</span>\r\n              </div>\r\n              <div class=\"material-fields\">\r\n                <div class=\"field-group\">\r\n                  <label>Cantidad:</label>\r\n                  <input \r\n                    type=\"number\" \r\n                    [value]=\"material.cantidad_estimada\"\r\n                    (change)=\"actualizarCantidadMaterial(i, $event)\"\r\n                    min=\"1\"\r\n                    class=\"quantity-input\">\r\n                </div>\r\n                \r\n                <div class=\"field-group\">\r\n                  <label>Precio unitario:</label>\r\n                  <input \r\n                    type=\"number\" \r\n                    [value]=\"material.precio_neto_al_momento\"\r\n                    (input)=\"actualizarPrecioMaterial(i, $event)\"\r\n                    min=\"0\"\r\n                    step=\"0.01\"\r\n                    placeholder=\"0.00\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <button type=\"button\" class=\"btn-remove\" (click)=\"eliminarMaterial(i)\">\r\n              <ion-icon name=\"trash-outline\"></ion-icon>\r\n            </button>\r\n          </div>\r\n\r\n          <!-- Resumen de costos -->\r\n          <div class=\"costo-total\">\r\n            <strong>Costo total de materiales: {{ calcularCostoTotalMateriales() | currency:'EUR':'symbol':'1.2-2' }}</strong>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"no-materiales\" *ngIf=\"materiales.length === 0\">\r\n          <p>No se han agregado materiales al presupuesto</p>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Botones -->\r\n      <div class=\"form-actions\">\r\n        <button type=\"button\" class=\"btn-secondary\" (click)=\"volver()\">\r\n          Cancelar\r\n        </button>\r\n        <button \r\n          type=\"submit\" \r\n          class=\"btn-primary\" \r\n          [disabled]=\"!presupuestoForm.valid || loading || !avisoId\"\r\n          [class.btn-disabled]=\"!presupuestoForm.valid || loading || !avisoId\">\r\n          <ion-icon name=\"save-outline\"></ion-icon>\r\n          {{ loading ? 'Guardando...' : (modoEdicion ? 'Actualizar Presupuesto' : 'Guardar Presupuesto') }}\r\n        </button>\r\n      </div>\r\n      \r\n      <!-- Información de estado -->\r\n      <div *ngIf=\"!presupuestoForm.valid && presupuestoForm.touched\" class=\"form-status\">\r\n        <p class=\"status-error\">Por favor, complete todos los campos requeridos correctamente</p>\r\n      </div>\r\n      <div *ngIf=\"!avisoId\" class=\"form-status\">\r\n        <p class=\"status-error\">No se ha seleccionado un aviso</p>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</ion-content> "],
  "mappings": "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",
  "names": ["_a"]
}
