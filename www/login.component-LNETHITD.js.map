{
  "version": 3,
  "sources": ["src/app/modules/auth/pages/login/login.component.ts", "src/app/modules/auth/pages/login/login.component.html"],
  "sourcesContent": ["import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { AuthService } from '../../../../core/services/auth.service';\r\nimport { LoginRequest } from '../../../../core/models/usuario.model';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, IonicModule, ReactiveFormsModule]\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm!: FormGroup;\r\n  isLoading = false;\r\n  errorMessage = '';\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.initForm();\r\n  }\r\n\r\n  private initForm(): void {\r\n    this.loginForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]]\r\n    });\r\n  }\r\n\r\n  async onSubmit(): Promise<void> {\r\n    if (this.loginForm.valid) {\r\n      this.isLoading = true;\r\n      this.errorMessage = '';\r\n\r\n      const credentials: LoginRequest = this.loginForm.value;\r\n\r\n      try {\r\n        const response = await this.authService.login(credentials);\r\n        console.log('Login exitoso:', response);\r\n        this.router.navigate(['/home']);\r\n      } catch (error: any) {\r\n        console.error('Error en login:', error);\r\n        this.errorMessage = error.message || 'Error al iniciar sesión. Inténtalo de nuevo.';\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    } else {\r\n      this.markFormGroupTouched();\r\n    }\r\n  }\r\n\r\n  private markFormGroupTouched(): void {\r\n    Object.keys(this.loginForm.controls).forEach(key => {\r\n      const control = this.loginForm.get(key);\r\n      control?.markAsTouched();\r\n    });\r\n  }\r\n\r\n  getErrorMessage(fieldName: string): string {\r\n    const field = this.loginForm.get(fieldName);\r\n    if (field?.errors && field.touched) {\r\n      if (field.errors['required']) {\r\n        return `${fieldName === 'email' ? 'El email' : 'La contraseña'} es requerido`;\r\n      }\r\n      if (field.errors['email']) {\r\n        return 'El email no es válido';\r\n      }\r\n      if (field.errors['minlength']) {\r\n        return 'La contraseña debe tener al menos 6 caracteres';\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n  goToRegister(): void {\r\n    this.router.navigate(['/auth/register']);\r\n  }\r\n} ", "<ion-content>\r\n  <div class=\"login-container\">\r\n    <div class=\"login-card\">\r\n      <!-- Logo -->\r\n      <div class=\"logo-container\">\r\n        <img src=\"assets/icon/LogoGestionAvisos.png\" alt=\"Logo\" class=\"logo\">\r\n        <h1 class=\"app-title\">Gestión de Avisos</h1>\r\n      </div>\r\n\r\n      <!-- Formulario de Login -->\r\n      <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\" class=\"login-form\">\r\n        <h2 class=\"form-title\">Iniciar Sesión</h2>\r\n\r\n        <!-- Campo Email -->\r\n        <div class=\"form-group\">\r\n          <label>Email</label>\r\n          <input \r\n            type=\"email\" \r\n            formControlName=\"email\"\r\n            class=\"form-control\"\r\n            placeholder=\"tu@email.com\"\r\n            autocomplete=\"email\">\r\n        </div>\r\n        <div class=\"error-message\" *ngIf=\"getErrorMessage('email')\">\r\n          {{ getErrorMessage('email') }}\r\n        </div>\r\n\r\n        <!-- Campo Contraseña -->\r\n        <div class=\"form-group\">\r\n          <label>Contraseña</label>\r\n          <input \r\n            type=\"password\" \r\n            formControlName=\"password\"\r\n            class=\"form-control\"\r\n            placeholder=\"Tu contraseña\"\r\n            autocomplete=\"current-password\">\r\n        </div>\r\n        <div class=\"error-message\" *ngIf=\"getErrorMessage('password')\">\r\n          {{ getErrorMessage('password') }}\r\n        </div>\r\n\r\n        <!-- Mensaje de Error -->\r\n        <div class=\"error-message global-error\" *ngIf=\"errorMessage\">\r\n          {{ errorMessage }}\r\n        </div>\r\n\r\n        <!-- Botón de Login -->\r\n        <button \r\n          type=\"submit\" \r\n          class=\"login-button\"\r\n          [disabled]=\"isLoading || !loginForm.valid\">\r\n          <div class=\"button-content\">\r\n            <ion-spinner *ngIf=\"isLoading\" name=\"crescent\"></ion-spinner>\r\n            <span *ngIf=\"!isLoading\">Iniciar Sesión</span>\r\n          </div>\r\n        </button>\r\n\r\n        <!-- Enlace a Registro -->\r\n        <div class=\"register-link\">\r\n          <p>¿No tienes cuenta? \r\n            <a (click)=\"goToRegister()\" class=\"link\">Regístrate aquí</a>\r\n          </p>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</ion-content>\r\n"],
  "mappings": "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",
  "names": []
}
