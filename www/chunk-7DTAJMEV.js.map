{
  "version": 3,
  "sources": ["src/app/core/config/performance.config.ts", "src/app/core/services/cache.service.ts"],
  "sourcesContent": ["export const PERFORMANCE_CONFIG = {\r\n  // Configuraci√≥n de cache\r\n  CACHE: {\r\n    DEFAULT_TTL: 2 * 60 * 1000, // 2 minutos\r\n    MAX_SIZE: 25,\r\n    CLEANUP_INTERVAL: 30 * 1000, // 30 segundos\r\n  },\r\n  \r\n  // Configuraci√≥n de limpieza de memoria\r\n  MEMORY: {\r\n    CLEANUP_INTERVAL: 30 * 1000, // 30 segundos\r\n    FORCE_CLEANUP_INTERVAL: 2 * 60 * 1000, // 2 minutos\r\n  },\r\n  \r\n  // Configuraci√≥n de observables\r\n  OBSERVABLES: {\r\n    MAX_SUBSCRIPTIONS: 20,\r\n    CLEANUP_INTERVAL: 45 * 1000, // 45 segundos\r\n  },\r\n  \r\n  // Configuraci√≥n de HTTP\r\n  HTTP: {\r\n    MAX_CONCURRENT_REQUESTS: 5,\r\n    REQUEST_TIMEOUT: 30 * 1000, // 30 segundos\r\n  },\r\n  \r\n  // Configuraci√≥n de Supabase\r\n  SUPABASE: {\r\n    EVENTS_PER_SECOND: 2,\r\n    MAX_RETRIES: 2,\r\n  },\r\n  \r\n  // Configuraci√≥n de paginaci√≥n\r\n  PAGINATION: {\r\n    DEFAULT_PAGE_SIZE: 15,\r\n    MAX_PAGE_SIZE: 25,\r\n  }\r\n};\r\n", "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { tap, catchError } from 'rxjs/operators';\r\nimport { PERFORMANCE_CONFIG } from '../config/performance.config';\r\n\r\nexport interface CacheItem<T> {\r\n  data: T;\r\n  timestamp: number;\r\n  ttl: number; // Time to live in milliseconds\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CacheService {\r\n  private cache = new Map<string, CacheItem<any>>();\r\n  private readonly DEFAULT_TTL = PERFORMANCE_CONFIG.CACHE.DEFAULT_TTL;\r\n  private readonly MAX_CACHE_SIZE = PERFORMANCE_CONFIG.CACHE.MAX_SIZE;\r\n  private cleanupInterval: any;\r\n\r\n  constructor() {\r\n    // Iniciar limpieza autom√°tica seg√∫n configuraci√≥n\r\n    this.startAutoCleanup();\r\n  }\r\n\r\n  /**\r\n   * Inicia la limpieza autom√°tica del cache\r\n   */\r\n  private startAutoCleanup(): void {\r\n    this.cleanupInterval = setInterval(() => {\r\n      this.cleanup();\r\n    }, PERFORMANCE_CONFIG.CACHE.CLEANUP_INTERVAL);\r\n  }\r\n\r\n  /**\r\n   * Detiene la limpieza autom√°tica\r\n   */\r\n  private stopAutoCleanup(): void {\r\n    if (this.cleanupInterval) {\r\n      clearInterval(this.cleanupInterval);\r\n      this.cleanupInterval = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene datos del cach√© o los obtiene de la funci√≥n de fetch si no est√°n en cach√©\r\n   */\r\n  getOrSet<T>(\r\n    key: string, \r\n    fetchFunction: () => Observable<T>, \r\n    ttl: number = this.DEFAULT_TTL\r\n  ): Observable<T> {\r\n    const cached = this.get<T>(key);\r\n    if (cached) {\r\n      console.log(`‚úÖ Cache hit: ${key}`);\r\n      return new Observable(observer => {\r\n        observer.next(cached);\r\n        observer.complete();\r\n      });\r\n    }\r\n\r\n    console.log(`üîÑ Cache miss: ${key}`);\r\n    return fetchFunction().pipe(\r\n      tap(data => {\r\n        this.set(key, data, ttl);\r\n      }),\r\n      catchError(error => {\r\n        console.error(`‚ùå Error fetching data for key ${key}:`, error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Establece un valor en el cach√©\r\n   */\r\n  set<T>(key: string, data: T, ttl: number = this.DEFAULT_TTL): void {\r\n    // Verificar si el cache est√° muy lleno\r\n    if (this.cache.size > this.MAX_CACHE_SIZE) {\r\n      this.cleanup();\r\n    }\r\n\r\n    this.cache.set(key, {\r\n      data,\r\n      timestamp: Date.now(),\r\n      ttl\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Obtiene un valor del cach√©\r\n   */\r\n  get<T>(key: string): T | null {\r\n    const cached = this.cache.get(key);\r\n    if (cached && !this.isExpired(cached)) {\r\n      return cached.data;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Elimina un elemento del cach√©\r\n   */\r\n  delete(key: string): void {\r\n    this.cache.delete(key);\r\n  }\r\n\r\n  /**\r\n   * Limpia todo el cach√©\r\n   */\r\n  clear(): void {\r\n    this.cache.clear();\r\n    console.log('üóëÔ∏è Cache completamente limpiado');\r\n  }\r\n\r\n  /**\r\n   * Limpia elementos del cach√© que coincidan con un prefijo\r\n   */\r\n  clearCache(prefix: string): void {\r\n    const keysToDelete: string[] = [];\r\n    for (const key of this.cache.keys()) {\r\n      if (key.startsWith(prefix)) {\r\n        keysToDelete.push(key);\r\n      }\r\n    }\r\n    keysToDelete.forEach(key => this.cache.delete(key));\r\n    console.log(`üóëÔ∏è Cleared cache for prefix: ${prefix} (${keysToDelete.length} items)`);\r\n  }\r\n\r\n  /**\r\n   * Limpia cache de m√∫ltiples m√≥dulos a la vez\r\n   */\r\n  clearMultipleCaches(prefixes: string[]): void {\r\n    prefixes.forEach(prefix => this.clearCache(prefix));\r\n    console.log(`üóëÔ∏è Cleared multiple caches: ${prefixes.join(', ')}`);\r\n  }\r\n\r\n  /**\r\n   * Limpia todo el cache relacionado con datos din√°micos\r\n   */\r\n  clearAllDataCache(): void {\r\n    const dataPrefixes = [\r\n      'avisos',\r\n      'presupuestos', \r\n      'facturas',\r\n      'inventario',\r\n      'clientes',\r\n      'tecnicos',\r\n      'dashboard'\r\n    ];\r\n    this.clearMultipleCaches(dataPrefixes);\r\n  }\r\n\r\n  /**\r\n   * Limpia elementos expirados del cach√©\r\n   */\r\n  cleanup(): void {\r\n    const now = Date.now();\r\n    \r\n    for (const [key, item] of this.cache.entries()) {\r\n      if (this.isExpired(item)) {\r\n        this.cache.delete(key);\r\n      }\r\n    }\r\n    \r\n    // Si a√∫n hay muchos elementos, limpiar los m√°s antiguos\r\n    if (this.cache.size > this.MAX_CACHE_SIZE) {\r\n      const entries = Array.from(this.cache.entries());\r\n      entries.sort((a, b) => a[1].timestamp - b[1].timestamp);\r\n      \r\n      // Mantener solo los elementos m√°s recientes\r\n      const toDelete = entries.slice(0, entries.length - this.MAX_CACHE_SIZE);\r\n      toDelete.forEach(([key]) => this.cache.delete(key));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica si un elemento del cach√© ha expirado\r\n   */\r\n  private isExpired(item: CacheItem<any>): boolean {\r\n    return Date.now() - item.timestamp > item.ttl;\r\n  }\r\n\r\n  /**\r\n   * Obtiene estad√≠sticas del cach√©\r\n   */\r\n  getStats(): { size: number; keys: string[] } {\r\n    return {\r\n      size: this.cache.size,\r\n      keys: Array.from(this.cache.keys())\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Genera una clave de cach√© basada en par√°metros\r\n   */\r\n  generateKey(prefix: string, params: any): string {\r\n    const paramString = JSON.stringify(params);\r\n    return `${prefix}:${paramString}`;\r\n  }\r\n\r\n  /**\r\n   * Limpia recursos al destruir el servicio\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.stopAutoCleanup();\r\n    this.clear();\r\n  }\r\n} "],
  "mappings": "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",
  "names": []
}
