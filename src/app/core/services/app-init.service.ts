import { Injectable, OnInit } from '@angular/core';
import { Platform } from '@ionic/angular';
import { SupabaseClientService } from './supabase-client.service';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root'
})
export class AppInitService implements OnInit {
  private isInitialized = false;

  constructor(
    private platform: Platform,
    private supabaseClientService: SupabaseClientService,
    private authService: AuthService
  ) {}

  ngOnInit() {
    // Este m√©todo se ejecuta cuando el servicio se inicializa
    this.initializeApp();
  }

  /**
   * Inicializa la aplicaci√≥n y restaura la sesi√≥n si existe
   */
  async initializeApp(): Promise<void> {
    if (this.isInitialized) {
      console.log('üîß AppInitService: App ya inicializada');
      return;
    }

    try {
      console.log('üöÄ AppInitService: Iniciando aplicaci√≥n...');

      // Esperar a que la plataforma est√© lista
      await this.platform.ready();

      console.log('üì± Plataforma lista:', this.platform.is('mobile') ? 'M√≥vil' : 'Web');

      // Inicializar el cliente Supabase
      const supabaseClient = this.supabaseClientService.getClient();
      console.log('üîß Cliente Supabase inicializado');

      // Restaurar sesi√≥n si existe
      await this.restoreUserSession();

      this.isInitialized = true;
      console.log('‚úÖ AppInitService: Aplicaci√≥n inicializada correctamente');

    } catch (error) {
      console.error('‚ùå AppInitService: Error en inicializaci√≥n:', error);
    }
  }

  /**
   * Restaura la sesi√≥n del usuario si existe una v√°lida
   */
  private async restoreUserSession(): Promise<void> {
    try {
      console.log('üîê AppInitService: Verificando sesi√≥n existente...');

      // Intentar restaurar la sesi√≥n desde Capacitor Preferences
      const storedSession = await this.supabaseClientService.restoreSession();
      
      if (storedSession) {
        console.log('‚úÖ Sesi√≥n encontrada en almacenamiento, restaurando...');
        
        // Verificar si la sesi√≥n es v√°lida en Supabase
        const currentSession = await this.supabaseClientService.getCurrentSession();
        
        if (currentSession && currentSession.user) {
          console.log('‚úÖ Sesi√≥n v√°lida en Supabase, cargando datos del usuario...');
          
          // Cargar los datos del usuario en el AuthService
          await this.authService.loadUserData(currentSession.user.id);
          
          console.log('‚úÖ Usuario restaurado exitosamente');
        } else {
          console.log('‚ö†Ô∏è Sesi√≥n en almacenamiento pero no v√°lida en Supabase, limpiando...');
          await this.supabaseClientService.clearSessionFromPreferences();
        }
      } else {
        console.log('‚ÑπÔ∏è No hay sesi√≥n almacenada para restaurar');
      }

    } catch (error) {
      console.error('‚ùå AppInitService: Error restaurando sesi√≥n:', error);
      // En caso de error, limpiar cualquier sesi√≥n corrupta
      await this.supabaseClientService.clearSessionFromPreferences();
    }
  }

  /**
   * Verifica si la app est√° inicializada
   */
  isAppInitialized(): boolean {
    return this.isInitialized;
  }

  /**
   * M√©todo para reinicializar la app si es necesario
   */
  async reinitializeApp(): Promise<void> {
    console.log('üîÑ AppInitService: Reinicializando aplicaci√≥n...');
    this.isInitialized = false;
    await this.initializeApp();
  }
}
